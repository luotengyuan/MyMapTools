<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.ComponentModel.License">
            <summary>
            Provides the abstract base class for all licenses. A license is granted to a specific instance of a component.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.License.#ctor">
            <summary>
            Initializes a new instance of the License class.
            </summary>
        </member>
        <member name="T:OpenNETCF.ComponentModel.LicenseManager">
            <summary>
            Provides properties and methods to add a license to a component and to manage a LicenseProvider. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.LicenseManager.IsValid(System.Type,OpenNETCF.ComponentModel.License@)">
            <summary>
            Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid License.
            </summary>
            <param name="type">A System.Type that represents the type of object that requests the License.</param>
            <param name="license">A License that is a valid license, or null if a valid license cannot be granted.</param>
            <returns>true if a valid license can be granted; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.ComponentModel.LicenseManager.Validate(System.Type)">
            <summary>
            Determines whether a valid license can be granted for the specified type.
            </summary>
            <param name="type">A System.Type that represents the type of object that requests the License.</param>
            <returns>A valid OpenNETCF.ComponentModel.License.</returns>
        </member>
        <member name="M:OpenNETCF.ComponentModel.LicenseManager.IsValid(System.Type)">
            <summary>
            Determines whether a valid license can be granted for the specified type.
            </summary>
            <param name="type">A System.Type that represents the type of object that requests the License.</param>
            <returns>true if a valid license can be granted; otherwise, false.</returns>
        </member>
        <member name="T:OpenNETCF.ComponentModel.LicenseProvider">
            <summary>
            Provides the abstract base class for implementing a license provider.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.LicenseProvider.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.ComponentModel.LicenseProvider class. 
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.LicenseProvider.GetLicense(System.Type,System.Reflection.Assembly,OpenNETCF.ComponentModel.LicenseResourceType,System.Boolean)">
            <summary>
            When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.
            </summary>
            <param name="type">A System.Type that represents the component requesting the license.</param>
            <param name="typeAssembly"></param>
            <param name="resourceType">LicenseResourceType that represents the way the client license is supplied.</param>
            <param name="allowExceptions">true if a System.ComponentModel.LicenseException should be thrown when the component cannot be granted a license; otherwise, false.</param>
            <returns>A valid OpenNETCF.ComponentModel.License.</returns>
        </member>
        <member name="T:OpenNETCF.ComponentModel.LicenseProviderAttribute">
            <summary>
            Specifies the OpenNETCF.ComponentModel.LicenseProvider to use with a class. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:OpenNETCF.ComponentModel.PublicKeyLicenseProvider">
            <summary>
            Provides an implementation of a OpenNETCF.ComponentModel.LicenseProvider. 
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.PublicKeyLicenseProvider.GetLicense(System.Type,System.Reflection.Assembly,OpenNETCF.ComponentModel.LicenseResourceType,System.Boolean)">
            <summary>
            Returns a license for the instance of the component, if one is available.
            </summary>
            <param name="type"></param>
            <param name="allowExceptions"></param>
            <param name="resourceType"></param>
            <param name="typeAssembly"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Diagnostics.TraceLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.TraceLevel.Off">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.TraceLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.TraceLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.TraceLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.TraceLevel.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.DriveInfo">
            <summary>
            Provides access to information on a drive.
            </summary>
            <remarks>This class models a drive and provides methods and properties to query for drive information.
            Use <see cref="T:OpenNETCF.IO.DriveInfo"/> to determine what drives are available, and the capacity and available free space on the drive.</remarks>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.#ctor(System.String)">
            <summary>
            Provides access to information on the specified drive.
            </summary>
            <param name="driveName"></param>
            <remarks>Use this class to obtain information on drives.
            The drive name must be a valid Windows CE volume path e.g. "\Storage Card".
            You cannot use this method to obtain information on drive names that are a null reference (Nothing in Visual Basic) or use UNC (\\server\share) paths.</remarks>
            <exception cref="T:System.ArgumentNullException">The drive name cannot be a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.ToString">
            <summary>
            Returns a drive name as a string.
            </summary>
            <returns>The name of the drive.</returns>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.ManufacturerID">
            <summary>
            Gets the manufacturer ID of the volume (if available)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.SerialNumber">
            <summary>
            Gets the serial number of the volume (if available)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.AvailableFreeSpace">
            <summary>
            Indicates the amount of available free space on a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.TotalFreeSpace">
            <summary>
            Gets the total amount of free space available on a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.TotalSize">
            <summary>
            Gets the total size of storage space on a drive.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileAccess2">
            <summary>
            CreateFile file access flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Read">
            <summary>
            Read access to the file.  Data can be read from the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Write">
            <summary>
            Write access to the file.  Data can be written to the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Execute">
            <summary>
            Execute permission. The file can be executed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.All">
            <summary>
            All permissions.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileCreateDisposition">
            <summary>
            Specifies which action to take on files that exist, and which action to take when files do not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateNew">
            <summary>
            Creates a new file.
            The function fails if the specified file already exists.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateAlways">
            <summary>
            Creates a new file.
            If the file exists, the function overwrites the file and clears the existing attributes.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenExisting">
            <summary>
            Opens the file.
            The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenAlways">
            <summary>
            Opens the file, if it exists.
            If the file does not exist, the function creates the file as if dwCreationDisposition were <b>CreateNew</b>.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.TruncateExisting">
            <summary>
            Opens the file.
            Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at least Write access.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileFlags">
            <summary>
            CreateFile file flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.WriteThrough">
            <summary>
            Instructs the system to write through any intermediate cache and go directly to disk.
            The system can still cache write operations, but cannot lazily flush them.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.Overlapped">
            <summary>
            This flag is not supported; however, multiple read/write operations pending on a device at a time are allowed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.RandomAccess">
            <summary>
            Indicates that the file is accessed randomly.
            The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.SequentialScan">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.DeleteOnClose">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemMonitor.Created"/>, or <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventArgs">
            <summary>
            Provides data for the directory events: <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/>, <see cref="E:OpenNETCF.IO.FileSystemMonitor.Deleted"/>.
            </summary>
            <remarks>The <b>FileSystemEventArgs</b> class is passed as a parameter to event handlers for these events:
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/> event occurs when changes are made to the size, system attributes, last write time, last access time, or security permissions in a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemMonitor.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemMonitor"/>.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemMonitor"/> is created.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemMonitor"/> is deleted. For more information, see <see cref="T:OpenNETCF.IO.FileSystemMonitor"/>.</para></remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemEventArgs.#ctor(OpenNETCF.IO.WatcherChangeTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> class.
            </summary>
            <param name="changeType">One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values, which represents the kind of change detected in the file system.</param>
            <param name="directory">The root directory of the affected file or directory.</param>
            <param name="name">The name of the affected file or directory.</param>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.ChangeType">
            <summary>
            Gets the type of directory event that occurred.
            </summary>
            <value>One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values that represents the kind of change detected in the file system.</value>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.FullPath">
            <summary>
            Gets the fully qualifed path of the affected file or directory.
            </summary>
            <value>The path of the affected file or directory.</value>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.Name">
            <summary>
            Gets the name of the affected file or directory.
            </summary>
            <value>The name of the affected file or directory.</value>
        </member>
        <member name="T:OpenNETCF.IO.NotifyFilters">
            <summary>
            Specifies changes to watch for in a file or folder.
            </summary>
            <remarks>You can combine the members of this enumeration to watch for more than one kind of change. For example, you can watch for changes in the size of a file or folder, and for changes in security settings. This raises an event anytime there is a change in size or security settings of a file or folder.</remarks>
            <seealso cref="T:OpenNETCF.IO.FileSystemMonitor"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Attributes">
            <summary>
            The attributes of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.CreationTime">
            <summary>
            The time the file or folder was created.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.DirectoryName">
            <summary>
            The name of the directory.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastAccess">
            <summary>
            The date the file or folder was last opened.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastWrite">
            <summary>
            The date the file or folder last had anything written to it.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Security">
            <summary>
            The security settings of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Size">
            <summary>
            The size of the file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:OpenNETCF.IO.FileSystemMonitor.Renamed"/> event of a <see cref="T:OpenNETCF.IO.FileSystemMonitor"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.RenamedEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventArgs">
            <summary>
            Provides data for the Renamed event.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldFullPath">
            <summary>
            Gets the previous fully qualified path of the affected file or directory.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldName">
            <summary>
            Gets the old name of the affected file or directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.WatcherChangeTypes">
            <summary>
            Changes that might occur to a file or directory.
            </summary>
            <remarks>Each <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> member is associated with an event in <see cref="T:OpenNETCF.IO.FileSystemMonitor"/>.
            For more information on the events, see <see cref="E:OpenNETCF.IO.FileSystemMonitor.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemMonitor.Created"/>, <see cref="E:OpenNETCF.IO.FileSystemMonitor.Deleted"/> and <see cref="E:OpenNETCF.IO.FileSystemMonitor.Renamed"/>.</remarks>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.All">
            <summary>
            The creation, deletion, change, or renaming of a file or folder. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Changed">
            <summary>
            The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Created">
            <summary>
            The creation of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Deleted">
            <summary>
            The deletion of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Renamed">
            <summary>
            The renaming of a file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.Wave">
            <summary>
            Native wave in/out methods.
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Wave.SetVolume(System.Int32)">
            <summary>
            Set the volume for the default waveOut device (device ID = 0)
            </summary>
            <param name="Volume"></param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Wave.SetVolume(System.IntPtr,System.Int32)">
            <summary>
            Set the volume for an already-open waveOut device
            </summary>
            <param name="hWaveOut"></param>
            <param name="Volume"></param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Wave.GetVolume">
            <summary>
            Get the current volume setting for the default waveOut device (device ID = 0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Wave.GetVolume(System.IntPtr)">
            <summary>
            Set the current volume setting for an already-open waveOut device
            </summary>
            <param name="hWaveOut"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.ComponentModel.BackgroundWorker">
            <summary>
            Executes an operation on a separate thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the BackgroundWorker class.
            Call from the desktop code as the other ctor is not good enough
            Call it passing in a created control e.g. the Form
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.#ctor">
            <summary>
            Initializes a new instance of the BackgroundWorker class.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Raises the BackgroundWorker.ProgressChanged event.
            </summary>
            <param name="aProgressPercent">The percentage, from 0 to 100, of the background operation that is complete. </param>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
            <summary>
            Raises the BackgroundWorker.ProgressChanged event.
            </summary>
            <param name="aProgressPercent">The percentage, from 0 to 100, of the background operation that is complete. </param>
            <param name="aUserState">The state object passed to BackgroundWorker.RunWorkerAsync(System.Object).</param>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.RunWorkerAsync">
            <summary>
            Starts execution of a background operation.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
            <summary>
            Starts execution of a background operation.
            </summary>
            <param name="aArgument"> A parameter for use by the background operation to be executed in the BackgroundWorker.DoWork event handler.</param>
        </member>
        <member name="M:OpenNETCF.ComponentModel.BackgroundWorker.CancelAsync">
            <summary>
            Requests cancellation of a pending background operation.
            </summary>
        </member>
        <member name="E:OpenNETCF.ComponentModel.BackgroundWorker.DoWork">
            <summary>
            Occurs when <see cref="M:OpenNETCF.ComponentModel.BackgroundWorker.RunWorkerAsync"/> is called.
            </summary>
        </member>
        <member name="E:OpenNETCF.ComponentModel.BackgroundWorker.ProgressChanged">
            <summary>
            Occurs when <see cref="M:OpenNETCF.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> is called.
            </summary>
        </member>
        <member name="E:OpenNETCF.ComponentModel.BackgroundWorker.RunWorkerCompleted">
            <summary>
            Occurs when the background operation has completed, has been cancelled, or has raised an exception.
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.BackgroundWorker.CancellationPending">
            <summary>
            Gets a value indicating whether the application has requested cancellation of a background operation.
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.BackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets a value indicating whether the BackgroundWorker object can report progress updates.
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value indicating whether the BackgroundWorker object supports asynchronous cancellation.
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.BackgroundWorker.IsBusy">
            <summary>
             Gets a value indicating whether the System.ComponentModel.BackgroundWorker is running an asynchronous operation.
            Returns:
            true, if the System.ComponentModel.BackgroundWorker is running an
            asynchronous operation; otherwise, false.
            </summary>
        </member>
        <member name="T:OpenNETCF.ComponentModel.DoWorkEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.ComponentModel.ProgressChangedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.ComponentModel.RunWorkerCompletedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.ComponentModel.DoWorkEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="aArgument"></param>
        </member>
        <member name="P:OpenNETCF.ComponentModel.DoWorkEventArgs.Argument">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.DoWorkEventArgs.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.ComponentModel.InvalidEnumArgumentException">
            <summary>
            The exception thrown when using invalid arguments that are enumerators.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.InvalidEnumArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.ComponentModel.InvalidEnumArgumentException"/> class without a message.
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.ComponentModel.InvalidEnumArgumentException"/> class with the specified message.
            </summary>
            <param name="message">The message to display with this exception.</param>
        </member>
        <member name="M:OpenNETCF.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.ComponentModel.InvalidEnumArgumentException"/> class with the specified detailed description and the specified exception.
            </summary>
            <param name="message">A detailed description of the error.</param>
            <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:OpenNETCF.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.ComponentModel.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="T:OpenNETCF.ComponentModel.ProgressChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="aProgressPercent"></param>
            <param name="aUserState"></param>
        </member>
        <member name="P:OpenNETCF.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.ProgressChangedEventArgs.UserState">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.ComponentModel.RunWorkerCompletedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="aResult"></param>
            <param name="aError"></param>
            <param name="aCancelled"></param>
        </member>
        <member name="P:OpenNETCF.ComponentModel.RunWorkerCompletedEventArgs.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.RunWorkerCompletedEventArgs.Cancelled">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.ComponentModel.RunWorkerCompletedEventArgs.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.CRC">
            <summary>
            Class used for generating Cyclic Redundancy Check (CRC) Hashes
            </summary>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.Byte[])">
            <summary>
            Generates a CCITT32 CRC of the data
            </summary>
            <param name="data">Data to generate a CRC for</param>
            <returns>The CRC</returns>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates a CRC using a common polynomial for the next closest bitlength above that specified.
            For example, a bit length of 13 through 16 will use the CCITT16 polynomial masking off bits necessary to maintain the specified bitlength.
            </summary>
            <param name="data">Data to generate a CRC for</param>
            <param name="offset">The offset into the source data at which to start the CRC</param>
            <param name="length">The number of bytes in the source data to analyze</param>
            <returns>The CRC</returns>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.Byte[],System.Int32)">
            <summary>
            Generates a CRC using a common polynomial for the next closest bitlength above that specified.
            For example, a bit length of 13 through 16 will use the CCITT16 polynomial masking off bits necessary to maintain the specified bitlength.
            </summary>
            <param name="data">Data to generate a CRC for</param>
            <param name="crcBitLength">Length, in bits, of the polynomial to use</param>
            <returns>The CRC</returns>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.Byte[],System.Int32,System.Int32,OpenNETCF.CRCPolynomial,System.UInt64)">
            <summary>
            Generates a CRC using a common polynomial for the next closest bitlength above that specified.
            For example, a bit length of 13 through 16 will use the CCITT16 polynomial masking off bits necessary to maintain the specified bitlength.
            </summary>
            <param name="data">Data to generate a CRC for</param>
            <param name="offset">The offset into the source data at which to start the CRC</param>
            <param name="length">The number of bytes in the source data to analyze</param>
            <param name="polynomial">Standard polynomial to use for the CRC</param>
            <param name="seedCRC">CRC seed value</param>
            <returns>The CRC</returns>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.Byte[],System.Int32,System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Generates a CRC using a common polynomial for the next closest bitlength above that specified.
            For example, a bit length of 13 through 16 will use the CCITT16 polynomial masking off bits necessary to maintain the specified bitlength.
            </summary>
            <param name="data">Data to generate a CRC for</param>
            <param name="offset">The offset into the source data at which to start the CRC</param>
            <param name="length">The number of bytes in the source data to analyze</param>
            <param name="crcBitLength">Length, in bits, of the polynomial to use</param>
            <param name="polynomial">Custom polynomial to use for the CRC</param>
            <param name="seedCRC">CRC seed value</param>
            <returns>The CRC</returns>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.CRC.GenerateChecksum(System.IO.Stream,System.Int32,System.UInt64)">
            <summary>
            Generates a CRC for the data in an open data stream
            </summary>
            <param name="stream">Stream to use as a source for the data</param>
            <param name="crcBitLength"></param>
            <param name="polynomial">Custom Polynomial or <c>CRCPolynomial</c> to use in the CRC</param>
            <returns>The data's CRC</returns>
        </member>
        <member name="T:OpenNETCF.Diagnostics.DebugMessage">
            <summary>
            Use the static methods of this class to output data to a device's debug port. Messages will be sent only in Debug builds, allowing developers to easily compile out messaging.
            </summary>
            <remarks>
            This is the equivalent of the unmanaged DEBUGMSG macro and applies only to generic CE devices.
            Most commercial Pocket PC and SmartPhone devices do not expose a debug port.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DebugMessage.Write(System.Boolean,System.String)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> and the current assembly is a Debug build, <i>message</i> will be output on the device's debug port.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="message">Text to output</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DebugMessage.Write(System.Boolean,System.Object)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> and the current assembly is a Debug build, the result from <i>obj.ToString</i> will be output on the device's debug port.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="obj">Object to call ToString() on</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DebugMessage.WriteLine(System.Boolean,System.String)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> and the current assembly is a Debug build, <i>message</i> will be output on the device's debug port followed by a carriage return and new line.
            Lines output with <i>WriteLine</i> are also affected by calls to <c>Indent</c> or <c>Unindent</c>.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="message">Text to output</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DebugMessage.Indent">
            <summary>
            Increases the indent level used by <c>WriteLine</c> by two spaces
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DebugMessage.Unindent">
            <summary>
            Decreases the indent level used by <c>WriteLine</c> by two spaces
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.DiagnosticsConfigurationHandler">
            <summary>
            Summary description for DiagnosticsConfigurationHandler.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.DiagnosticsConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EntryWrittenEventArgs">
            <summary>
            Event arguments for the last entry written to the log EntryWrittenEventArgs.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EntryWrittenEventArgs.eventLogEntry">
            <summary>
            The entry that was just written to the log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EntryWrittenEventArgs.#ctor(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EntryWrittenEventArgs.EventLogEntry">
            <summary>
            The event log entry that was written to the log
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EntryWrittenEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLog">
            <summary>
            Class is similar to the System.Diagnostics.EventLog in the full framework with a few differences.
            1. Since CE.Net and PPC have no event log we write the log to the application root directory as an XML file
            2. Every Application will have it's own log.  There will not be one log system/device wide
            3. Attempted to keep as close as possible to the full framework class but some things are missing
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,OpenNETCF.Diagnostics.IEventLogWriter)">
            <summary>
            Overloaded constructor were a custom IEventLogWriter can be specified
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="customEventLogWriter">Custom event log writter which implements IEventLogWriter</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,OpenNETCF.Diagnostics.EventLogWriterType)">
            <summary>
            Default constructor.
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,System.String,System.String,OpenNETCF.Diagnostics.EventLogWriterType)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Delete(System.String)">
            <summary>
            Removes an event log from the local file.
            </summary>
            <param name="logName">The name of the log to delete.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.GetEventLogs">
            <summary>
            Searches for all event logs on the local file and creates an array of EventLog objects that contain the list.
            </summary>
            <returns>An array of type EventLog that represents the logs on the local computer.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Exists(System.String)">
            <summary>
            Determines whether the log exists on the local file.
            </summary>
            <param name="logName">The name of the log to search for.</param>
            <remarks>The full framework defines this method as static.  Since this is not a system wide log but an application specific log this method will only search for a Log Item with the current XML file.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Clear">
            <summary>
            Removes all entries from the event log.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Close">
            <summary>
            Closes the event log and releases read and write handles.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String)">
            <summary>
            Writes an information type entry, with the given message text, to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String)">
            <summary>
            Writes an information type entry with the given message text to the event log, using the specified event source.
            </summary>
            <param name="source">The source by which the application is registered. </param>
            <param name="message">The string to write to the event log.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Writes an entry with the given message text and application-defined event identifier to the event log.
            </summary>
            <param name="message">The string to write to the event log. </param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values. </param>
            <param name="eventID">The application-specific identifier for the event. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log, using the specified event source.
            </summary>
            <param name="source">The source by which the application is registered.</param>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Writes an entry with the given message text and application-defined event identifier to the event log, using the specified registered event source.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, and appends binary data to the message.
            </summary>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
            <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, using the specified registered event source. The category can be used to filter events in the log.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log (using the specified registered event source) and appends binary data to the message.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
            <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.CheckForValidLog">
            <summary>
            Checks to see if the source is set
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.CreateEventLogWriter(System.String,System.String,System.String,System.String)">
            <summary>
            Creates the event log Writer object
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnEntryWritten(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Notifies any listeners that an entry was written to the log
            </summary>
            <param name="e">the entry item that was written to the log</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogCleared">
            <summary>
            Notifies any listeners that the log was cleared
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogDisplayNameChanged">
            <summary>
            Notifies any listeners that log display name was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogClosed">
            <summary>
            Notifies any listeners that log was closed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogChanged">
            <summary>
            Notifies any listeners that log was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnSourceChanged">
            <summary>
            Notifies any listeners that source was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnEventLogAdded">
            <summary>
            Notifies any listeners that a log was added to the event log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.eventLogWriter_EntryWritten(System.Object,OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Handler for the entry written event in the eventLogWriter
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.eventLogWriter_EventLogCollectionUpdated(System.Object,System.EventArgs)">
            <summary>
            event listeners when the eventlog collection is updated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogChanged">
            <summary>
            Public event to notify listeners that the log has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogDisplayNameChanged">
            <summary>
            Public event to notify listeners that the log display name has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogClosed">
            <summary>
            Public event to notify listeners that the log has been closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogCleared">
            <summary>
            Public event to notify listeners that the log has been cleared
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.SourceChanged">
            <summary>
            Public event to notify listeners that the source has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.EventLogAdded">
            <summary>
            Notifies listeners if there is a new log in the eventLog
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.EntryWritten">
            <summary>
            Occurs when an entry is written to an event log on the local computer
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the EventLog receives EntryWritten event notifications.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Entries">
            <summary>
            Gets the contents of the event log.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Log">
            <summary>
            Gets or sets the name of the log to read from or write to.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogDisplayName">
            <summary>
            Gets the event log's friendly name.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Source">
            <summary>
            Gets or sets the source name to register and use when writing to the event log.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogFileName">
            <summary>
            Gets the file name the log is stored under.  Defaults to the calling assembly name with ".Log" appended
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogPath">
            <summary>
            Gets the path of where the log file is stored
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.EventLogWriterType">
            <summary>
            Gets the eventLogWriterType
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntry">
            <summary>
            Summary description for EventLogEntry.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.ID">
            <summary>
            Gets the ID value that uniquely identifies the item in the log
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Category">
            <summary>
            Gets the text associated with the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.CategoryNumber">CategoryNumber</see> for this entry.
            </summary>
            <value>The application-specific category text.</value>
            <remarks>
            Each application (event source) can define its own numbered categories and the text strings to which they are mapped. The text strings associated with the category are stored in the XML Log.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.CategoryNumber">
            <summary>
            Gets the entry's category number.
            </summary>
            <value>The application-specific category number for this entry .</value>
            <remarks>Each application (event source) can define its own numbered categories and the text strings to which they are mapped.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Data">
            <summary>
            Gets the binary data associated with the entry.
            </summary>
            <value>An array of bytes that holds the binary data associated with the entry.</value>
            <remarks>Getting this property creates an array that holds a copy of the entry's event-specific binary data. Event-specific data is sometimes used to store information that the application will process independently of the Event Viewer, for example, to make reports from the log file.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.EntryType">
            <summary>
            Gets the event type of this entry.
            </summary>
            <value>The <seealso cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</seealso> that indicates the event type associated with the entry in the event log. This is usually used to indicate the severity of the event log entry.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.EventID">
            <summary>
            Gets the application-specific event identifier of this event entry.
            </summary>
            <value>The application-specific identifier for the event.</value>
            <remarks>Event identifiers, together with the event source, uniquely identify an event.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Index">
            <summary>
            Gets the index of this entry in the event log.
            </summary>
            <value>The index of this entry in the event log.</value>
            <remarks>This number is not necessarily zero based.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.MachineName">
            <summary>
            Gets the name of the computer on which this entry was generated.
            </summary>
            <value>The name of the computer that contains the event log.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Message">
            <summary>
            Gets the localized message associated with this event entry.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Source">
            <summary>
            Gets the name of the application that generated this event.
            </summary>
            <remarks>The event source indicates what logged the event. It is often the name of the application, or the name of a subcomponent of the application if the application is large. Applications and services usually write to (and therefore are sources for) the Application log or a custom log. Device drivers usually write to the System log.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.TimeGenerated">
            <summary>
            Gets the local time at which this event was generated.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that represents the local time at which this event was generated.</value>
            <remarks>This member holds the time that an event was generated. This might not be the same as the time when the event information was written to the event log. For the latter, read the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.TimeWritten">TimeWritten</see> property.There’s almost always going to be a lag between the time something happens and the time it is logged, if only milliseconds. Usually, it is more important to know when the event was generated, unless you want to see if there is a significant lag in logging. That can happen if your log files are on a different server and you are experiencing a bottleneck.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.TimeWritten">
            <summary>
            Gets the local time at which this event was written to the log.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that represents the local time at which this event was written to the log.</value>
            <remarks>This member holds the time that an event's information is written to the event log. This might not be the same time as when the event was generated. For the latter, read the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.TimeGenerated">TimeGenerated</see> property.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.UserName">
            <summary>
            Gets the name of the user who's responsible for this event.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntryCollection">
            <summary>
            Summary description for EventLogEntryCollection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.Clear">
            <summary>
            Overloaded method.  To clear the event log use EventLog.Clear();
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.RemoveAt(System.Int32)">
            <summary>
            Overloaded method.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.Add(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Add an eventlog entry to the collection
            </summary>
            <param name="eventLogEntry"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntryCollection.Item(System.Int32)">
            <summary>
            Gets the EventLogEntry by index
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntryCollection.Item(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntryType">
            <summary>
            Specifies the event type of an event log entry.
            </summary>
            <remarks>
            The type of an event log entry is used to indicate the severity of an event log entry.
            Each event must be of a single type, which the application indicates when it reports the event.
            </remarks>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Error">
            <summary>
            An error event. This indicates a significant problem the user should know about; usually a loss of functionality or data.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.FailureAudit">
            <summary>
            A failure audit event. This indicates a security event that occurs when an audited access attempt fails; for example, a failed attempt to open a file.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Information">
            <summary>
            An information event. This indicates a significant, successful operation.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.SuccessAudit">
            <summary>
            A success audit event. This indicates a security event that occurs when an audited access attempt is successful; for example, logging on successfully.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Warning">
            <summary>
            A warning event. This indicates a problem that is not immediately significant, but that may signify conditions that could cause future problems.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogWriterType">
            <summary>
            Defines the type of Event log writers available
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogWriterType.XML">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogWriterType.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.IEventLogWriter">
            <summary>
            Defines the interface that will be used by EventLog to write to a log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.GetEventLogs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="E:OpenNETCF.Diagnostics.IEventLogWriter.EntryWritten">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.IEventLogWriter.EventLogCollectionUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Entries">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.XMLEventLogWriter">
            <summary>
            Implements writing to the event log using XML
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.xmlLog">
            <summary>
            The Xml document representing the log
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.nodeEventLog">
            <summary>
            The current eventlog node which contains all Log nodes
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.nodeLog">
            <summary>
            The current log node that is being written to
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.EVENTLOG_ROOT">
            <summary>
            The default Xml for a new log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.InitializeLogFile">
            <summary>
            Creates the XML document to store the event logs
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadEventLogCollection">
            <summary>
            Loads the eventlog collection
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.CreateLogFile">
            <summary>
            Creates a log file on the system
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadNodes">
            <summary>
            Loads the source, log and EventLog nodes
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadEventLogEntryCollection">
            <summary>
            Loads the eventlog entry collection
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.CreateLogNode(System.String)">
            <summary>
            Create the log node and adds it to the nodeEventLog
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.EventLogNode(System.String)">
            <summary>
            Retrieves and event log node by logName
            </summary>
            <param name="logName">The name of the log node</param>
            <returns>The XmlNode containing the log items or null if not found</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.NodeAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Changes an attribute in the specified node
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.NodeAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Retreives the attribute in the specified node
            </summary>
            <param name="node"></param>
            <param name="attributeName"></param>
            <returns>The value of the attribute or null if not found</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.SaveLogFile">
            <summary>
            Saves the logfile
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.WriteEntryToLog(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry to the log file
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.OnEntryWritten(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Raises the eventLogEntryWritten event to listeners
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Diagnostics.FileVersionInfo">
            <summary>
            Provides version information for a physical file in storage memory.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
            <summary>
            Returns a <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> representing the version information associated with the specified file.
            </summary>
            <param name="fileName">The fully qualified path and name of the file to retrieve the version information for.</param>
            <returns>A <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> containing information about the file.
            If the file information was not found, the <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> contains only the name of the file requested.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file specified cannot be found.</exception>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileName">
            <summary>
            Gets the name of the file that this instance of <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> describes.
            </summary>
            <value>The name of the file described by this instance of <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/>.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart">
            <summary>
            Gets the major part of the version number.
            </summary>
            <value>A value representing the major part of the version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the first set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart">
            <summary>
            Gets the minor part of the version number.
            </summary>
            <value>A value representing the minor part of the version number of the file.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the second set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart">
            <summary>
            Gets the build number of the file.
            </summary>
            <value>A value representing the build number of the file.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the third set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart">
            <summary>
            Gets the file private part number.
            </summary>
            <value>A value representing the file private part number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the last set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart">
            <summary>
            Gets the major part of the version number for the product this file is associated with.
            </summary>
            <value>A value representing the major part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the first set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart">
            <summary>
            Gets the minor part of the version number for the product the file is associated with.
            </summary>
            <value>A value representing the minor part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the second set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart">
            <summary>
            Gets the build number of the product this file is associated with.
            </summary>
            <value>A value representing the build part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the third set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart">
            <summary>
            Gets the private part number of the product this file is associated with.
            </summary>
            <value>A value representing the private part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the last set of 16 bits.</remarks>
        </member>
        <member name="T:OpenNETCF.Diagnostics.Logging">
            <summary>
            This class enables you to turn on and off the creation of log files with diagnostic information about interoperability, loading the application, and networking
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.LoggingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.InteropLoggingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.LoaderLoggingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.NetworkLoggingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.LogFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.IncludeAppNameInLogFileName">
            <summary>
             If there are two applications writing log files to the same directory, the older log file will always get overwritten with the newer log file when the second application is run. This key can be used as a differentiator for the log files.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.IncludeProcessIDInLogFileName">
            <summary>
            This key is useful if you want to run the same application but have separate logs. This adds the process ID to the log file name, so that each run of the same application creates a new log file with a different name.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Logging.FlushLogFileAfterEachEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.ProcessHelper">
            <summary>
            Provides helper methods for processes.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessHelper.GetCurrentProcessID">
            <summary>
            This function returns the process identifier of the calling process.
            </summary>
            <returns>The return value is the process identifier of the calling process.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessHelper.GetCurrentProcessHandle">
            <summary>
            Gets a new <see cref="T:System.Diagnostics.Process"/> component and associates it with the currently active process.
            </summary>
            <returns>A new <see cref="T:System.Diagnostics.Process"/> component associated with the process resource that is running the calling application.</returns>
            <remarks>Use this method to create a new Process instance and associate it with the process resource on the local computer.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessHelper.GetCurrentThreadID">
            <summary>
            This function returns the thread identifier, which is used as a handle of the calling thread. 
            </summary>
            <returns>The thread identifier of the calling thread indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessHelper.GetCurrentThreadHandle">
            <summary>
            This function returns a pseudohandle for the current thread. 
            </summary>
            <returns>The return value is a pseudohandle for the current thread.</returns>
            <remarks>
            <p>A pseudohandle is a special constant that is interpreted as the current thread handle. </p>
            <p>The calling thread can use this handle to specify itself whenever a thread handle is required.This handle has the maximum possible access to the thread object.</p>
            <p>The function cannot be used by one thread to create a handle that can be used by other threads to refer to the first thread. The handle is always interpreted as referring to the thread that is using it.</p>
            <p>The pseudohandle need not be closed when it is no longer needed. Calling the CloseHandle function with this handle has no effect.</p>
            </remarks>
        </member>
        <member name="T:OpenNETCF.Diagnostics.ReleaseMessage">
            <summary>
            Use the static methods of this class to output data to a device's debug port.  Messages will be sent in Debug or Release builds
            </summary>
            <remarks>
            This is the equivalent of the unmanaged RETAILMSG macro and applies only to generic CE devices.
            Most commercial Pocket PC and SmartPhone devices do not expose a debug port.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ReleaseMessage.Write(System.Boolean,System.String)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> then <i>message</i> will be output on the device's debug port.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="message">Text to output</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ReleaseMessage.Write(System.Boolean,System.Object)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> then, the result from <i>obj.ToString</i> will be output on the device's debug port.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="obj">Object to call ToString() on</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ReleaseMessage.WriteLine(System.Boolean,System.String)">
            <summary>
            If <i>condition</i> evaluates to <b>true</b> then <i>message</i> will be output on the device's debug port followed by a carriage return and new line.
            Lines output with <i>WriteLine</i> are also affected by calls to <c>Indent</c> or <c>Unindent</c>.
            </summary>
            <param name="condition">When <b>true</b> output will be sent to the debug port</param>
            <param name="message">Text to output</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ReleaseMessage.Indent">
            <summary>
            Increases the indent level used by <c>WriteLine</c> by two spaces
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ReleaseMessage.Unindent">
            <summary>
            Decreases the indent level used by <c>WriteLine</c> by two spaces
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.Stopwatch">
            <summary>
            Provides a set of methods and properties that you can use to accurately measure elapsed time.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.Stopwatch.IsHighResolution">
            <summary>
            Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.GetTimestamp">
            <summary>
            Gets the current number of ticks in the timer mechanism.
            </summary>
            <returns>A long integer representing the tick counter value of the underlying timer mechanism.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.StartNew">
            <summary>
            Initializes a new Stopwatch instance, sets the elapsed time property to zero, and starts measuring elapsed time.
            </summary>
            <returns>A Stopwatch that has just begun measuring elapsed time.</returns>
        </member>
        <member name="F:OpenNETCF.Diagnostics.Stopwatch.Frequency">
            <summary>
            Gets the frequency of the timer as the number of ticks per second. This field is read-only.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the Stopwatch class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Stopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Stopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the Stopwatch timer is running.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Stopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Stopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
        </member>
        <member name="T:OpenNETCF.Enum2">
            <summary>
            Provides helper functions for Enumerations.
            </summary>
            <remarks>Extends the <see cref="T:System.Enum">System.Enum Class</see>.</remarks>
            <seealso cref="T:System.Enum">System.Enum Class</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns> A string containing the name of the enumerated constant in enumType whose value is value, or null if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"> enumType is not an System.Enum.  -or-  value is neither of type enumType nor does it have the same underlying type as enumType.</exception>
            <example>The following code sample illustrates the use of GetName (Based on the example provided with desktop .NET Framework):
            <code>[Visual Basic] 
            Imports System
            
            	Public Class GetNameTest
            
            		Enum Colors
            			Red
            			Green
            			Blue
            			Yellow
            		End Enum 'Colors
            
            		Enum Styles
            			Plaid
            			Striped
            			Tartan
            			Corduroy
            		End Enum 'Styles
            
            	Public Shared Sub Main() 
            		MessageBox.Show("The 4th value of the Colors Enum is " + [OpenNETCF.Enum].GetName(GetType(Colors), 3))
            		MessageBox.Show("The 4th value of the Styles Enum is " + [OpenNETCF.Enum].GetName(GetType(Styles), 3))
            	End Sub 'Main
            	
            End Class 'GetNameTest</code>
            <code>[C#] 
            using System;
            
            public class GetNameTest 
            {
            	enum Colors { Red, Green, Blue, Yellow };
            	enum Styles { Plaid, Striped, Tartan, Corduroy };
            
            	public static void Main() 
            	{
            		MessageBox.Show("The 4th value of the Colors Enum is " + OpenNETCF.Enum.GetName(typeof(Colors), 3));
            		MessageBox.Show("The 4th value of the Styles Enum is " + OpenNETCF.Enum.GetName(typeof(Styles), 3));
            	}
            }</code>
            </example>
            <seealso cref="M:System.Enum.GetName(System.Type,System.Object)">System.Enum.GetName Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>A string array of the names of the constants in enumType. The elements of the array are sorted by the values of the enumerated constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <example>The follow example shows how to enumerate the members of the System.DayOfWeek enumeration by adding them to a ComboBox:-
            <code>[Visual Basic]
            Dim thisDOW As New DayOfWeek
            For Each thisDOW In OpenNETCF.Enum.GetValues(Type.GetType("System.DayOfWeek"))
            	ComboBox1.Items.Add(thisDOW)
            Next</code>
            <code>[C#]
            foreach(DayOfWeek thisdow in OpenNETCF.Enum.GetValues(typeof(DayOfWeek)))
            {
            	comboBox1.Items.Add(thisdow);
            }</code></example>
            <seealso cref="M:System.Enum.GetNames(System.Type)">System.Enum.GetNames Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of the specified enumeration.&gt;
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>The underlying <see cref="T:System.Type"/> of <paramref>enumType</paramref>.</returns>
            <seealso cref="M:System.Enum.GetUnderlyingType(System.Type)">System.Enum.GetUnderlyingType Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An System.Array of the values of the constants in enumType. The elements of the array are sorted by the values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <seealso cref="M:System.Enum.GetValues(System.Type)">System.Enum.GetValues Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.IsDefined(System.Type,System.Object)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value or name of a constant in enumType.</param>
            <returns><b>true</b> if a constant in <paramref>enumType</paramref> has a value equal to value; otherwise, <b>false</b>.</returns>
            <seealso cref="M:System.Enum.IsDefined(System.Type,System.Object)">System.Enum.IsDefined Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:OpenNETCF.Enum2.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException">enumType is not an <see cref="T:System.Enum"/>.
             -or-  value is either an empty string ("") or only contains white space.
             -or-  value is a name, but not one of the named constants defined for the enumeration.</exception>
             <seealso cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">System.Enum.Parse Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.ToObject(System.Type,System.Object)">
            <summary>
            Returns an instance of the specified enumeration set to the specified value.
            </summary>
            <param name="enumType">An enumeration.</param>
            <param name="value">The value.</param>
            <returns>An enumeration object whose value is <paramref>value</paramref>.</returns>
            <seealso cref="M:System.Enum.ToObject(System.Type,System.Object)">System.Enum.ToObject Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum2.Format(System.Type,System.Object,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format. 
            </summary>
            <remarks>
            The valid format values are: 
            "G" or "g" - If value is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of value is returned.
            For example, suppose the only enumerated constant is named, Red, and its value is 1. If value is specified as 1, then this format returns "Red". However, if value is specified as 2, this format returns "2".
            "X" or "x" - Represents value in hexadecimal without a leading "0x". 
            "D" or "d" - Represents value in decimal form.
            "F" or "f" - Behaves identically to "G" or "g", except the FlagsAttribute is not required to be present on the Enum declaration. 
            "V" or "v" - If value is equal to a named enumerated constant, the value of that constant is returned; otherwise, the decimal equivalent of value is returned.
            </remarks>
            <param name="enumType">The enumeration type of the value to convert.</param>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of value.</returns>
        </member>
        <member name="T:OpenNETCF.Environment2">
            <summary>
            Extends the functionality of <see cref="T:System.Environment"/>
            </summary>
            <seealso cref="T:System.Environment">System.Environment Class</seealso>
        </member>
        <member name="M:OpenNETCF.Environment2.GetFolderPath(OpenNETCF.Environment2.SpecialFolder)">
            <summary>
            Gets the path to the system special folder identified by the specified enumeration.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").
            A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
            <seealso cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">System.Environment.GetFolderPath Method</seealso>
        </member>
        <member name="M:OpenNETCF.Environment2.GetLogicalDrives">
            <summary>
            Returns an array of string containing the names of the logical drives on the current computer.
            </summary>
            <returns>An array of string where each element contains the name of a logical drive.</returns>
        </member>
        <member name="P:OpenNETCF.Environment2.NewLine">
            <summary>
            Gets the newline string defined for this environment.
            </summary>
            <value>A string containing "\r\n".</value>
            <remarks>The property value is a constant customized specifically for the current platform.
            This value is automatically appended to text when using WriteLine methods, such as <see cref="M:T:System.Console.WriteLine(System.String)">Console.WriteLine</see>.</remarks>
            <seealso cref="P:System.Environment.NewLine">System.Environment.NewLine Property</seealso>
        </member>
        <member name="P:OpenNETCF.Environment2.SystemDirectory">
            <summary>
            Gets the fully qualified path of the system directory.
            </summary>
            <value>A string containing a directory path.</value>
            <remarks>An example of the value returned is the string "\Windows".</remarks>
            <seealso cref="P:System.Environment.SystemDirectory">System.Environment.SystemDirectory Property</seealso>
        </member>
        <member name="P:OpenNETCF.Environment2.MachineName">
            <summary>
            Gets the name of this local device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment2.UserName">
            <summary>
            Gets the user name of the person who started the current thread.
            </summary>
            <remarks>Supported only on Windows Mobile platforms.</remarks>
        </member>
        <member name="P:OpenNETCF.Environment2.SdfVersion">
            <summary>
            Gets a <see cref="T:System.Version"/> object that contains the version of the Smart Device Framework in use. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment2.WorkingSet">
            <summary>
            Gets the amount of physical memory mapped to the process context.
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment2.OSVersion">
            <summary>
            Gets an <see cref="T:System.OperatingSystem"/> object that contains the current platform identifier and version number. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment2.TickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment2.Version">
            <summary>
            Gets a <see cref="T:System.Version"/> object that describes the major, minor, build, and revision numbers of the common language runtime.
            </summary>
        </member>
        <member name="T:OpenNETCF.Environment2.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
            <remarks>Not all platforms support all of these constants.</remarks>
            <seealso cref="T:System.Environment.SpecialFolder">System.Environment.SpecialFolder Enumeration</seealso>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Programs">
            <summary>
            The directory that contains the user's program groups.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Personal">
            <summary>
            The directory that serves as a common repository for documents.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.MyDocuments">
            <summary>
            The "My Documents" folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Favorites">
            <summary>
            The directory that serves as a common repository for the user's favorite items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Startup">
            <summary>
            The directory that corresponds to the user's Startup program group.
            The system starts these programs whenever a user starts Windows CE.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Recent">
            <summary>
            The directory that contains the user's most recently used documents.
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.StartMenu">
            <summary>
            The directory that contains the Start menu items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.MyMusic">
            <summary>
            The "My Music" folder.
            <para><b>Supported only on Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.DesktopDirectory">
            <summary>
            The directory used to physically store file objects on the desktop.
            Do not confuse this directory with the desktop folder itself, which is a virtual folder.
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Fonts">
            <summary>
            The Fonts folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.ApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific data for the current user.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.Windows">
            <summary>
            The Windows folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.ProgramFiles">
            <summary>
            The program files directory.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment2.SpecialFolder.MyPictures">
            <summary>
            The "My Pictures" folder.
            <para><b>Supported only on Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileHelper">
            <summary>
            Provides additional file related functionality.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileHelper.MaxPath">
            <summary>
            Maximum length of Filepath string (in characters)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileHelper.InvalidHandle">
            <summary>
            Represents an invalid native operating system handle.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all text from the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all text from the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string array.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            <seealso cref="T:System.IO.FileAttributes"/>
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
            <exception cref="T:System.ArgumentException">path is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes"><seealso cref="T:System.IO.FileAttributes"/>The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTimeUtc">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTime">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,OpenNETCF.IO.FileCreateDisposition,System.Int32)">
            <summary>
            Wrapper around the CreateFile API
            </summary>
            <param name="fileName">Path to the file or CE port name</param>
            <param name="desiredFileAccess">Specifies the type of access to the object. An application can obtain read access, write access, read-write (All) access.</param>
            <param name="shareMode">Specifies how the object can be shared.</param>
            <param name="creationDisposition">Specifies which action to take on files that exist, and which action to take when files do not exist.</param>
            <param name="flagsAndAttributes">Specifies the file attributes and flags for the file.</param>
            <returns>Handle to the created file</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function writes data to a file.
            </summary>
            <remarks> WriteFile starts writing data to the file at the position indicated by the file pointer. After the write operation has been completed, the file pointer is adjusted by the number of bytes actually written.</remarks>
            <param name="hFile">Handle to the file to be written to. The file handle must have been created with GENERIC_WRITE access to the file.</param>
            <param name="lpBuffer">Buffer containing the data to be written to the file.</param>
            <param name="nNumberOfBytesToWrite">Number of bytes to write to the file.</param>
            <param name="lpNumberOfBytesWritten">Number of bytes written by this function call. WriteFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function reads data from a file, starting at the position indicated by the file pointer. After the read operation has been completed, the file pointer is adjusted by the number of bytes actually read.
            </summary>
            <param name="hFile">Handle to the file to be read. The file handle must have been created with GENERIC_READ access to the file. This parameter cannot be a socket handle.</param>
            <param name="lpBuffer">Buffer that receives the data read from the file.</param>
            <param name="nNumberOfBytesToRead">Number of bytes to be read from the file.</param>
            <param name="lpNumberOfBytesRead">number of bytes read. ReadFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.CloseHandle(System.IntPtr)">
            <summary>
            This function closes an open object handle
            </summary>
            <param name="hObject">Object Handle, Could be any of the following Objects:- Communications device, Mutex, Database, Process, Event, Socket, File or Thread</param>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemWatcher">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
            <remarks>
            The FileSystemWatcher requires the system to have aygshell.dll. Also, this class is not thread-safe. 
            </remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is created.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.PhysicalAddressPointer">
            <summary>
            This class is used to access memory mapped addresses
            You can cause serious problems using this class without knowing what you're doing!
            We reiterate the statement in our license that OpenNETCF provides absolutely no warranty on this code and you use it at your own risk
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.#ctor(System.UInt32,System.UInt32)">
            <summary>
            An accessor class to a physical memory address.
            </summary>
            <param name="physicalAddress">Physical Address to map</param>
            <param name="size">Minimum size of the desired allocation</param>
            <remarks>The physical address does not need to be aligned as the PhysicalAddressPointer will handle alignment
            The size value will aligned to the next multiple of 4k internally, so the actual allocation may be larger than the requested value</remarks>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.#ctor(System.UInt32,System.Int32)">
            <summary>
            An accessor class to a physical memory address.
            </summary>
            <param name="physicalAddress">Physical Address to map</param>
            <param name="size">Minimum size of the desired allocation</param>
            <remarks>The physical address does not need to be aligned as the PhysicalAddressPointer will handle alignment
            The size value will aligned to the next multiple of 4k internally, so the actual allocation may be larger than the requested value</remarks>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteBytes(System.Byte[])">
            <summary>
            Write an array of bytes to the mapped physical address
            </summary>
            <param name="bytes">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt32(System.Int32)">
            <summary>
            Write a 32-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write a 32-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
            <param name="offset">offset to start writing the data</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt16(System.Int16)">
            <summary>
            Write a 16-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteByte(System.Byte)">
            <summary>
            Write an 8-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadBytes(System.Int32)">
            <summary>
            Read a series of bytes from the mapped address
            </summary>
            <param name="length">number of bytes to read</param>
            <returns>read data</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt32">
            <summary>
            Read a 32-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt32(System.Int32)">
            <summary>
            Read a 32-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt16">
            <summary>
            Read a 16-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadByte">
            <summary>
            Read an 8-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.op_Explicit(OpenNETCF.IO.PhysicalAddressPointer)~System.IntPtr">
            <summary>
            Gets an IntPtr for the base of the PhysicalAddressPointer
            </summary>
            <param name="pap">PhysicalAddressPointer to get the address of</param>
            <returns>IntPtr of the base virtual address</returns>
        </member>
        <member name="T:OpenNETCF.IO.StreamInterfaceDriver">
            <summary>
            Use this abstract base class to create wrappers around Stream Interface
            Drivers that are not supported by the CF
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.StreamInterfaceDriver.m_hPort">
            <summary>
            Internal native handle to the open port
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.#ctor(System.String)">
            <summary>
            Create an instance of the StreamInterfaceDriver class
            </summary>
            <param name="portName">Name of port (prefix and index) to open</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.#ctor">
            <summary>
            Create an instance of the StreamInterfaceDriver class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Open(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Open the driver
            </summary>
            <param name="access">File Access (Read, Write or Both)</param>
            <param name="share">Share Mode (Read, Write or both)</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Read(System.Int32)">
            <summary>
            Read data from the driver
            </summary>
            <param name="bytesToRead">The number of bytes requested.</param>
            <returns>A byte array returned by the driver</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Write(System.Byte[])">
            <summary>
            Write data to the driver
            </summary>
            <param name="data">Data to write</param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Write(System.Byte[],System.Int32)">
            <summary>
            Write data to the driver
            </summary>
            <param name="data">Data to write</param>
            <param name="bytesToWrite">Number of bytes from passed in buffer to write</param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.Byte[],System.Byte[],System.Int32@)">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
            <param name="outData">Data returned by the IOCTL</param>
            <param name="bytesReturned">Data returned by the call</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            This function moves the file pointer of an open file
            <seealso cref="M:System.IO.File.Move(System.String,System.String)"/>
            </summary>
            <param name="distance">Bytes to move - a positive number moves forward, a negative moves backward</param>
            <param name="seekFrom">Starting position from where distance is measured</param>
            <returns>New file position</returns>
            <remarks>The current file position can be queried using seekFrom(0, MoveMethod.CurrentPosition)</remarks>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Close">
            <summary>
            Close the driver
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.Byte[])">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
            <param name="inSize"></param>
            <param name="bytesReturned"></param>
            <param name="outData"></param>
            <param name="outSize"></param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.Void*,System.Int32,System.Void*,System.Int32,System.Int32@)">
            <summary>
            Call a device specific IOControl
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl``2(System.UInt32,``0,``1@,System.Int32@)">
            <summary>
            Call a device specific IOControl
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl``1(System.UInt32,``0)">
            <summary>
            Call a device specific IOControl
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl``1(System.UInt32,``0@,System.Int32@)">
            <summary>
            Call a device specific IOControl
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32)">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.PortName">
            <summary>
            Gets or Sets the Port Name
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.Handle">
            <summary>
            Gets the underlying native port Handle
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.IsOpen">
            <summary>
            Returns true if the port is open, otherwise returns false
            </summary>
        </member>
        <member name="T:OpenNETCF.Complex">
            <summary>
            Represents a complex number of the format real + (imaginary * sqrt(-1))
            </summary>
        </member>
        <member name="F:OpenNETCF.Complex.real">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Complex.imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Math2">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
            <seealso cref="T:System.Math"/>
        </member>
        <member name="M:OpenNETCF.Math2.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Math2.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Math2.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Math2.BigMul(System.Int32,System.Int32)">
            <summary>
            Produces the full product of two 32-bit numbers.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Math2.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, p.
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="T:OpenNETCF.Math2.Constants">
            <summary>
            Mathematical constants.
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.h">
            <summary>
            Planck's Constant (Js)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.L">
            <summary>
            Avogadro's Constant (1/mol)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.k">
            <summary>
            Boltzmann's Constant (J/K)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.m">
            <summary>
            Atomic Mass Constant (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.G">
            <summary>
            Newtonian Constant of Gravitation (m3 kg^-1 s^-2)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.mSube">
            <summary>
            Electron mass (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.mSubp">
            <summary>
            Proton mass (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.eV">
            <summary>
            Electron Volt (J)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.F">
            <summary>
            Faraday Constant (C/mol)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.R">
            <summary>
            Molar Gas Constant (J /(mol*K))
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.Rinf">
            <summary>
            Rydberg Constant (1 / m)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.sigma">
            <summary>
            Stefan-Boltzman Constant (W m^-2 K^-4)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.c">
            <summary>
            Speed of Light in vacuum (m/s)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.mu0">
            <summary>
            Magnetic constant (N A^-2)
            </summary>
        </member>
        <member name="P:OpenNETCF.Math2.Constants.e">
            <summary>
            Elementaty Charge (C)
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.SoundPlayer">
            <summary>
            Controls playback of a sound from a .wav file.
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Media.SoundPlayer"/> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Media.SoundPlayer"/> class, attaches the .wav file within the specified <see cref="P:OpenNETCF.Media.SoundPlayer.Stream"/>.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Media.SoundPlayer"/> class and attaches the specified .wav file.
            </summary>
            <param name="soundLocation">The location of a .wav file to load.</param>
            <remarks>The string passed to the soundLocation parameter must be a path to a .wav file.
            If the path is invalid, the <see cref="T:OpenNETCF.Media.SoundPlayer"/> object will still be constructed, but subsequent calls to a load or play method will fail.</remarks>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.Play">
            <summary>
            Plays the .wav file using a new thread.
            </summary>
            <remarks>The Play method plays the sound using a new thread.
            If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound.</remarks>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.PlaySync">
            <summary>
            Plays the .wav file using the UI thread.
            </summary>
            <remarks>The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete.
            After a .wav file is successfully loaded from a Stream or URL path, future calls to playback methods for the SoundPlayer object will not need to reload the .wav file until the path for the sound changes.
            If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound.</remarks>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.PlayLooping">
            <summary>
            Plays and loops the .wav file using a new thread and loads the .wav file first if it has not been loaded.
            </summary>
            <remarks>The PlayLooping method plays and loops the sound using a new thread.
            If the .wav file has not been specified or it fails to load, the PlayLooping method will play the default beep sound.</remarks>
        </member>
        <member name="M:OpenNETCF.Media.SoundPlayer.Stop">
            <summary>
            Stops playback of the sound if playback is occurring.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SoundPlayer.SoundLocation">
            <summary>
            Gets or sets the file path of the .wav file to load.
            </summary>
            <value>The file path from which to load a .wav file, or <see cref="F:System.String.Empty"/> if no file path is present.
            The default is <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:OpenNETCF.Media.SoundPlayer.Stream">
            <summary>
            Gets or sets the <see cref="P:OpenNETCF.Media.SoundPlayer.Stream"/> from which to load the .wav file.
            </summary>
            <remarks>This property is set to null when the <see cref="P:OpenNETCF.Media.SoundPlayer.SoundLocation"/> property is set to a new and valid sound location.</remarks>
        </member>
        <member name="P:OpenNETCF.Media.SoundPlayer.Tag">
            <summary>
            Stores additional data.
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.SystemSound">
            <summary>
            Represents a standard system sound.
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.SystemSound.Play">
            <summary>
            Play this sound.
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.SystemSound.SetVolume(System.Int32)">
            <summary>
            Set the volume for the default waveOut device (device ID = 0)
            </summary>
            <param name="Volume"></param>
        </member>
        <member name="M:OpenNETCF.Media.SystemSound.GetVolume">
            <summary>
            Get the current volume setting for the default waveOut device (device ID = 0)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Media.SystemSounds">
            <summary>
            Retrieves sounds associated with a set of Windows system sound event types.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SystemSounds.Beep">
            <summary>
            Gets the sound associated with the Beep program event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SystemSounds.Asterisk">
            <summary>
            Gets the sound associated with the Asterisk program event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SystemSounds.Exclamation">
            <summary>
            Gets the sound associated with the Exclamation program event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SystemSounds.Question">
            <summary>
            Gets the sound associated with the Question program event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.SystemSounds.Hand">
            <summary>
            Gets the sound associated with the Hand program event.
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveOpenHandler">
            <summary>
            Handles generic wave device Open event
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveCloseHandler">
            <summary>
            Handles generic wave device Close event
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveDoneHandler">
            <summary>
            Handles generic wave device Operation Complete event (Record/Play)
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveFinishedHandler">
            <summary>
            Handles wave device Recording Complete event
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.SoundFormats">
            <summary>
            Flags for the supported audio formats for recording and playback devices
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.InvalidFormat">
            <summary>
            Format is not valid
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono8bit11kHz">
            <summary>
            Mono, 8 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo8bit11kHz">
            <summary>
            Stereo, 8 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono16bit11kHz">
            <summary>
            Mono, 16 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo16bit11kHz">
            <summary>
            Stereo, 16 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono8bit22kHz">
            <summary>
            Mono, 8 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo8bit22kHz">
            <summary>
            Stereo, 8 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono16bit22kHz">
            <summary>
            Mono, 16 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo16bit22kHz">
            <summary>
            Stereo, 16 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono8bit44kHz">
            <summary>
            Mono, 8 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo8bit44kHz">
            <summary>
            Stereo, 8 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Mono16bit44kHz">
            <summary>
            Mono, 16 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.SoundFormats.Stereo16bit44kHz">
            <summary>
            Stereo, 16 bit, 44100 Hz
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.Audio">
            <summary>
            Base class for Player/Recorder
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.Player">
            <summary>
            Wave Audio player class. Supports PCM waveform playback from the stream
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.#ctor">
            <summary>
            Constructs Player object on the default wave device
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.#ctor(System.Int32)">
            <summary>
            Constructs Player object on the given wave device
            </summary>
            <param name="AudioDeviceID">Wave device ID</param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.Restart">
            <summary>
            Restart a paused wave file
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.Pause">
            <summary>
            Pause Play
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.Stop">
            <summary>
            Stop Play
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Player.Play(System.IO.Stream)">
            <summary>
            Plays waveform contained in the given stream. Stream is exepcted to contain full riff header
            </summary>
            <param name="playStream">Stream with the waveform</param>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Player.WaveOpen">
            <summary>
            Raised when the wave device is opened
            </summary>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Player.WaveClose">
            <summary>
            Raised when the wave device is closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Player.DonePlaying">
            <summary>
            Raised when the wave device has finished playback
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.WaveAudio.Player.NumDevices">
            <summary>
            Number of the output wave devices in the system
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.WaveAudio.Player.Volume">
            <summary>
            Gets or sets playback volume on the current wave device
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.WaveAudio.Player.Playing">
            <summary>
            True, if the player is currently playing. False otherwise
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.Recorder">
            <summary>
            Recorder class. Wraps low-level WAVE API for recording purposes
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.#ctor">
            <summary>
            Creates Recorder object and attaches it to the default wave device
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.#ctor(System.Int32)">
            <summary>
            Creates Recorder object and attaches it to the given wave device
            </summary>
            <param name="AudioDeviceID">Wave device ID</param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.SupportedRecordingFormats">
            <summary>
            A list of PCM wave formats supported by the default device
            </summary>
            <returns>SoundFormats collection</returns>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.SupportedRecordingFormats(System.Int32)">
            <summary>
            A list of PCM wave formats supported by the given device
            </summary>
            <param name="DeviceID">Wave device</param>
            <returns>SoundFormats collection</returns>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.Stop">
            <summary>
            Stop recording operation currently in progress. 
            Throws an error if no recording operation is in progress
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.RecordFor(System.IO.Stream,System.Int16)">
            <summary>
            Record sound data for specified number of seconds at 11025 sps and 1 channel
            The stream will be a properly formatted RIFF file
            </summary>
            <param name="st">Stream into which recorded samples are written</param>
            <param name="Seconds">Seconds of data to record</param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.RecordFor(System.IO.Stream,System.Int16,OpenNETCF.Media.WaveAudio.WaveFormat2)">
            <summary>
            Record sound data for specified number of seconds using given wave format
            The stream will be a properly formatted RIFF file
            </summary>
            <param name="st">Stream into which recorded samples are written</param>
            <param name="Seconds">Seconds of data to record</param>
            <param name="format">Sound format to record in.</param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.Recorder.GetNewRecordBuffer(System.Int32)">
            <summary>
            Creates a recording buffer
            </summary>
            <param name="dwBufferSize"></param>
            <returns>new buffer as WaveHeader</returns>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Recorder.WaveOpen">
            <summary>
            Handles the event that is fired when wave device is successfully opened
            </summary>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Recorder.WaveClose">
            <summary>
            Handles the event that is fired when wave device is successfully closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Media.WaveAudio.Recorder.DoneRecording">
            <summary>
            Handles the event that is fired when recording is stopped (on timer or by calling <see cref="M:OpenNETCF.Media.WaveAudio.Recorder.Stop">Stop</see> method
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.WaveAudio.Recorder.Recording">
            <summary>
            Whether the Recorder is presently recording
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.WaveAudio.Recorder.NumDevices">
            <summary>
            Number of wave input devices in the system
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveHeader">
            <summary>
            Internal wrapper around WAVEHDR
            Facilitates asynchronous operations
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates WaveHeader and fills it with wave data
            </summary>
            <param name="data">wave data bytes</param>
            <param name="datalength">length of Wave data</param>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveHeader.#ctor(System.Int32)">
            <summary>
            Constructor for WaveHeader class
            Allocates a buffer of required size
            </summary>
            <param name="BufferSize"></param>
        </member>
        <member name="T:OpenNETCF.Reflection.Assembly2">
            <summary>
            Contains helper functions for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Assembly"/>
        </member>
        <member name="M:OpenNETCF.Reflection.Assembly2.GetEntryAssembly">
            <summary>
            Gets the process executable.
            </summary>
            <returns>The <see cref="T:System.Reflection.Assembly"/> that is the process executable.</returns>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.AdvancedMarshaler">
            <summary>
            AdvancedMarshaler class implementation.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.AdvancedMarshaler.DeserializeFromByteArray(System.Byte[])">
            <summary>
            Copy bytes from a user array to the internal data array
            and then call the internal Deserialize routine
            </summary>
            <param name="b">The byte array to be copied to the 
            internal array and then deserialized</param>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.MarshallingMethods">
            <summary>
            MarshallingMethods class implementation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.CustomMarshalAsAttribute">
            <summary>
            CustomMarshalAsAttribute implementaion.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.CriticalHandle">
            <summary>
            Represents a wrapper class for handle resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the CriticalHandle class with the specified invalid handle value.
            </summary>
            <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.CriticalHandle.handle">
            <summary>
            Specifies the handle to be wrapped.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.Close">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
            <summary>
            Sets the handle to the specified pre-existing handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
            <summary>
            Marks a handle as invalid.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.Dispose">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.CriticalHandle.Finalize">
            <summary>
            Frees all resources associated with the handle.
            </summary>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.CriticalHandle.IsClosed">
            <summary>
            Gets a value indicating whether the handle is closed.
            </summary>
            <value>true if the handle is closed; otherwise, false.</value>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.CriticalHandle.IsInvalid">
            <summary>
            When overridden in a derived class, gets a value indicating whether the handle value is invalid.
            </summary>
            <value>true if the handle is valid; otherwise, false.</value>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.ComTypes.FILETIME">
            <summary>
            This structure is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601.
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
            <summary>
            Specifies the low 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
            <summary>
            Specifies the high 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.Marshal2">
            <summary>
            Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code. 
            </summary>
            <seealso cref="T:System.Runtime.InteropServices.Marshal"/>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Reads an IntPtr from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the IntPtr is located.</param>
            <returns>The IntPtr read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt32(System.IntPtr,System.Int32)">
            <summary>
            Reads a 32-bit unsigned integer from unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to read.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before reading.</param>
            <returns>The 32-bit unsigned integer read from the ptr parameter.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringUni(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a string from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the string is located.</param>
            <param name="len">Length in characters.</param>
            <returns>The string read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAnsi(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Allocates a managed System.String, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <param name="ofs"></param>
            <param name="len">The byte count of the input string to copy.</param>
            <returns>A managed System.String that holds a copy of the native ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAnsi(System.IntPtr)">
            <summary>
            Copies all characters up to the first null from an unmanaged ANSI string to a managed System.String. Widens each ANSI character to Unicode.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <returns>A managed <see cref="T:System.String"/> object that holds a copy of the unmanaged ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAuto(System.IntPtr)">
            <summary>
            Allocates a managed <see cref="T:System.String"/> and copies all characters up to the first null character from a string stored in unmanaged memory into it.
            </summary>
            <param name="ptr">The address of the first character.</param>
            <returns>A managed string that holds a copy of the unmanaged string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadChar(System.IntPtr,System.Int32)">
            <summary>
            Reads a single char from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the char is located.</param>
            <returns>The char read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadByteArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a byte array from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the byte array is located.</param>
            <param name="len">The length of the byte array to read.</param>
            <returns>The byte array read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadBool(System.IntPtr,System.Int32)">
            <summary>
            Reads a bool from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the bool is located.</param>
            <returns>The bool read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an IntPtr value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the IntPtr from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt32(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Writes a UInt32 value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt16(System.IntPtr,System.Int32,System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory, converting into ANSI format as it copies.
            </summary>
            <param name="s">A managed string to be copied. </param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.StringToHGlobalUni(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory.
            </summary>
            <param name="s">A managed string to be copied.</param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteChar(System.IntPtr,System.Int32,System.Char)">
            <summary>
            Writes a single char value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the char from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteByteArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Writes a byte array to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the byte array from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt64(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteBool(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes a bool value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the bool from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Time_tToDateTime(System.UInt32)">
            <summary>
            Converts a time_t value to a DateTime value.
            </summary>
            <param name="time_t">The time_t value to convert.</param>
            <returns>A DateTime value equivalent to the time_t suppled.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.lstrlenW(System.IntPtr)">
            <summary>
            Returns the length of the string at the pointer
            </summary>
            <param name="ptr">The pointer to the string to measure.</param>
            <returns>The length of the string at the pointer.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.GetHINSTANCE(System.Reflection.Module)">
            <summary>
            Returns the instance handle (HINSTANCE) for the specified module.
            </summary>
            <param name="m">The <see cref="T:System.Reflection.Module"/> whose HINSTANCE is desired.</param>
            <returns>The HINSTANCE for m; -1 if the module does not have an HINSTANCE.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.SetMemory(System.IntPtr,System.Byte,System.Int32)">
            <summary>
            Sets a region of unmanaged memory to a specified value
            </summary>
            <param name="destination">IntPtr address of the start of the region to set</param>
            <param name="value">The value to set for each byte in the reagion</param>
            <param name="length">Number of bytes to set</param>
            <exception cref="T:System.ArgumentException">Thrown if writing to destination for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.SetMemory(System.IntPtr,System.Byte,System.Int32,System.Boolean)">
            <summary>
            Sets a region of unmanaged memory to a specified value
            </summary>
            <param name="destination">IntPtr address of the start of the region to set</param>
            <param name="value">The value to set for each byte in the reagion</param>
            <param name="length">Number of bytes to set</param>
            <param name="boundsCheck">when true the function verifies that the requiested write operation is safe</param>
            <exception cref="T:System.ArgumentException">Thrown if writing to destination for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Copy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to another unmanaged memory pointer
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy</param>
            <exception cref="T:System.ArgumentException">Thrown if either the requested write or read for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Copy(System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Copies data from an unmanaged memory pointer to another unmanaged memory pointer
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy</param>
            <param name="boundsCheck">When true the function verifies that the requiested write and read operations are safe</param>
            <exception cref="T:System.ArgumentException">Thrown if either the requested write or read for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.IsSafeToWrite(System.IntPtr,System.Int32)">
            <summary>
            Checks to determine if a write to an unmanaged memory pointer for a specied number of bytes is a safe operation
            </summary>
            <param name="destination">Unmanaged memory pointer to check</param>
            <param name="length">Number of bytes to check</param>
            <returns>Returns true if a write of the specifed length is safe, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.IsSafeToRead(System.IntPtr,System.Int32)">
            <summary>
            Checks to determine if a read from an unmanaged memory pointer for a specied number of bytes is a safe operation
            </summary>
            <param name="source">Unmanaged memory pointer to check</param>
            <param name="length">Number of bytes to check</param>
            <returns>Returns true if a read from the specifed length is safe, otherwise false</returns>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.SafeHandle">
            <summary>
            Represents a wrapper class for operating system handles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.SafeHandle.handle">
            <summary>
            Specifies the handle to be wrapped.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the SafeHandle class with the specified invalid handle value.
            </summary>
            <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
            <param name="ownsHandle">true to reliably let SafeHandle release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Close">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
            <summary>
            Returns the value of the <see cref="F:OpenNETCF.Runtime.InteropServices.SafeHandle.handle"/> field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
            <summary>
            Sets the handle to the specified pre-existing handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
            <summary>
            Marks a handle as invalid.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Dispose">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Finalize">
            <summary>
            Frees all resources associated with the handle.
            </summary>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.SafeHandle.IsClosed">
            <summary>
            Gets a value indicating whether the handle is closed.
            </summary>
            <value>true if the handle is closed; otherwise, false.</value>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.SafeHandle.IsInvalid">
            <summary>
            When overridden in a derived class, gets a value indicating whether the handle value is invalid.
            </summary>
            <value>true if the handle is valid; otherwise, false.</value>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
            <summary>
            Represents the base class from which all asymmetric key exchange deformatters derive.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
            <summary>
            Initializes a new instance of AsymmetricKeyExchangeDeformatter.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, extracts secret information from the encrypted key exchange data.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            When overridden in a derived class, sets the private key to use for decrypting the secret information.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
            <summary>
            When overridden in a derived class, gets or sets the parameters for the asymmetric key exchange.
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter">
            <summary>
            Represents the base class from which all asymmetric key exchange formatters derive.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
            <summary>
            Initializes a new instance of AsymmetricKeyExchangeFormatter
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, creates the encrypted key exchange data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
            <summary>
            When overridden in a derived class, creates the encrypted key exchange data.
            </summary>
            <param name="data"></param>
            <param name="symAlgType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            When overridden in a derived class, sets the public key to use for encrypting the secret information.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
            <summary>
            When overridden in a derived class, gets the parameters for the asymmetric key exchange.
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.DeriveBytes">
            <summary>
            Represents the abstract base class from which all classes that derive byte sequences of a specified length inherit.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.DeriveBytes.#ctor">
            <summary>
            Initializes a new instance of the DeriveBytes class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
            <summary>
            When overridden in a derived class, returns pseudo-random key bytes.
            </summary>
            <param name="cb">The number of pseudo-random key bytes to generate</param>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.DeriveBytes.Reset">
            <summary>
            When overridden in a derived class, resets the state of the operation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.HMACSHA1">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using the SHA1 hash function.
            </summary>
            <devnotes>
            Based on comments and commented-out code in the original implemenation of this class
            I'm not certain it even functions.  I'm no crypto expert, so I don't know how to test it
            - ctacke
            </devnotes>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.KeyedHashAlgorithm">
            <summary>
            Represents the abstract class from which all implementations of keyed hash algorithms must derive
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.KeyedHashAlgorithm.#ctor">
            <summary>
            Initializes a new instance of KeyedHashAlgorithm
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.KeyedHashAlgorithm.Key">
            <summary>
            Gets or sets the key to be used in the hash algorithm
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.HMACSHA1.Initialize">
            <summary>
            Initializes an implementation of HMACSHA1
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.HMACSHA1.#ctor">
            <summary>
            Initializes a new instance of the HMACSHA1 class
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the HMACSHA1 class
            </summary>
            <param name="sessKey"></param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.HMACSHA1.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the input data
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.HMACSHA1.Key">
            <summary>
            Gets or sets the key to be used in the hash algorithm
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.HMACSHA1.Hash">
            <summary>
            Gets the value of the computed hash code
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.HMACSHA1.HashSize">
            <summary>
            Gets the size of the computed hash code in bits
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Context.CpAcquireContext(System.String,OpenNETCF.Security.Cryptography.Internal.ContextFlag)">
            <summary>
            MissingMethodException. call AcquireContext instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Context.ContextAddRef(System.IntPtr)">
            <summary>
            INVALID_PARAMETER. no need to ever call this
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Hash.DuplicateHash(System.IntPtr)">
            <summary>
            INVALID_PARAMETER
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Key.SetPaddingMode(System.IntPtr,System.Security.Cryptography.PaddingMode)">
            <summary>
            BAD_DATA
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Key.DuplicateKey(System.IntPtr)">
            <summary>
            INVALID_PARAMETER
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Mem.CryptMemAlloc(System.Int32)">
            <summary>
            The CryptMemAlloc function allocates memory for a buffer. 
            It is used by all Crypt32.lib functions that return allocated buffers.
            </summary>
            <param name="cbSize">Number of bytes to be allocated. </param>
            <returns>Returns a pointer to the buffer allocated. 
            If the function fails, NULL is returned. </returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Mem.CryptMemFree(System.IntPtr)">
            <summary>
            The CryptMemFree function frees memory allocated by 
            CryptMemAlloc or CryptMemRealloc.
            </summary>
            <param name="pv">Pointer to the buffer to be freed. </param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Mem.CryptMemRealloc(System.IntPtr,System.Int32)">
            <summary>
            The CryptMemRealloc function frees the memory currently allocated for a buffer 
            and allocates memory for a new buffer.
            </summary>
            <param name="pv">Pointer to a currently allocated buffer. </param>
            <param name="cbSize">Number of bytes to be allocated. </param>
            <returns>Returns a pointer to the buffer allocated. 
            If the function fails, NULL is returned. </returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Prov.SetProviderEx(System.String,OpenNETCF.Security.Cryptography.Internal.ProvType,OpenNETCF.Security.Cryptography.Internal.ProvDefaultFlag)">
            <summary>
            INVALID_PARAMETER. call SetProvider instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Prov.GetDefaultProvider(OpenNETCF.Security.Cryptography.Internal.ProvType,OpenNETCF.Security.Cryptography.Internal.ProvDefaultFlag)">
            <summary>
            INVALID_PARAMETER. call Context.AcquireContext with minimal values instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.Internal.Prov.EnumProviderTypes">
            <summary>
            works by calling EnumProviders. otherwise INVALID_PARAMETER
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.MACTripleDES">
            <summary>
            Computes a Message Authentication Code (MAC) using TripleDES for the input data CryptoStream
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.MACTripleDES.Initialize">
            <summary>
            Initializes an implementation of MACTripleDES
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.MACTripleDES.#ctor">
            <summary>
            Initializes a new instance of the MACTripleDES class
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the MACTripleDES class
            </summary>
            <param name="desKey"></param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.MACTripleDES.ComputeHash(System.Byte[])">
            <summary>
            Overloaded. Computes the hash value for the input data
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.MACTripleDES.Key">
            <summary>
            Gets or sets the key to be used in the hash algorithm
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.MACTripleDES.Hash">
            <summary>
            Gets the value of the computed hash code
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.MACTripleDES.HashSize">
            <summary>
            Gets the size of the computed hash code in bits
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.PasswordDeriveBytes">
            <summary>
            Derives a key from a password
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the PasswordDeriveBytes class
            </summary>
            <param name="password"></param>
            <param name="salt"></param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
            <summary>
            Initializes a new instance of the PasswordDeriveBytes class
            </summary>
            <param name="password"></param>
            <param name="salt"></param>
            <param name="hashName"></param>
            <param name="iterations"></param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
            <summary>
            Derives a cryptographic key from the PasswordDeriveBytes object.
            </summary>
            <remarks>
            If the keySize parameter is set to 0, the default key size for the specified algorithm is used.
            </remarks>
            <param name="algName">The algorithm name for which to derive the key. </param>
            <param name="algHashName">The hash algorithm name to use to derive the key. </param>
            <param name="keySize">The size of the key to derive (in bits). </param>
            <param name="IV">The initialization vector (IV) to use to derive the key.</param>
            <returns>The derived key.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
            <summary>
            Returns pseudo-random key bytes.
            </summary>
            <param name="cb">The number of pseudo-random key bytes to generate.</param>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.Reset">
            <summary>
            Resets the state of the operation.
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.HashName">
            <summary>
            Gets or sets the name of the hash algorithm for the operation
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.IterationCount">
            <summary>
            Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.Salt">
            <summary>
            Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.DataProtectionScope">
            <summary>
            Specifies the scope of the data protection to be applied by 
            the <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> method
            </summary>
            <remarks>
            This enumeration is used with the <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> and <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> methods to protect 
            data through encryption.
            </remarks>
        </member>
        <member name="F:OpenNETCF.Security.Cryptography.DataProtectionScope.CurrentUser">
            <summary>
            Specifies that the protected data is associated with the current user. 
            Only threads running under the current user context can unprotect the data.
            </summary>
        </member>
        <member name="F:OpenNETCF.Security.Cryptography.DataProtectionScope.LocalMachine">
            <summary>
            Specifies that the protected data is associated with the machine context. 
            Any process running under Admin credentials on the computer can unprotect data. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.ProtectedData">
            <summary>
            Contains methods for protecting and unprotecting data. This class cannot be inherited.
            </summary>
            <remarks>
            The class consists of two wrappers for the unmanaged Data Protection API (DPAPI) methods, 
            <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> and <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/>. 
            These two methods can be used to protect and unprotect data such as passwords, keys, 
            and connection strings.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)">
            <summary>
            Protects the <c>userData</c> parameter and returns a byte array.
            </summary>
            <param name="userData">Byte array containing data to be protected.</param>
            <param name="optionalEntropy">Additional byte array used to encrypt the data.</param>
            <param name="scope">Value from the <see cref="T:OpenNETCF.Security.Cryptography.DataProtectionScope"/> enumeration.</param>
            <returns>A byte array representing the encrypted data.</returns>
            <remarks>
            This method can be used to protect data such as passwords, keys, or connection strings. 
            The <c>optionalEntropy</c> parameter enables you to use additional information to protect the data.
            This information must also be used when unprotecting the data using the <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)">
            <summary>
            Unprotects the <c>encryptedData</c> parameter and returns a byte array.
            </summary>
            <param name="encryptedData">Byte array containing data encrypted with the <see cref="M:OpenNETCF.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],OpenNETCF.Security.Cryptography.DataProtectionScope)"/> method</param>
            <param name="optionalEntropy">Additional byte array that was used to encrypt the data.</param>
            <param name="scope">Value from the <see cref="T:OpenNETCF.Security.Cryptography.DataProtectionScope"/> enumeration</param>
            <returns>A byte array representing the unprotected data.</returns>
            <remarks>
            This method can be used to unprotect data that was encrypted using the Protect method. 
            The <c>optionalEntropy</c> parameter, if used during encryption, must be supplied to unencrypt the data.
            </remarks>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
            <summary>
            Decrypts the PKCS #1 key exchange data
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
            <summary>
            Initializes a new instance of the RSAPKCS1KeyExchangeDeformatter class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the RSAPKCS1KeyExchangeDeformatter class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the encrypted key exchange data.
            </summary>
            <param name="rgbData">The key exchange data within which the secret information is hidden</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the private key to use for decrypting the secret information.
            </summary>
            <param name="key">The instance of the RSA algorithm that holds the private key.</param>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
            <summary>
            Gets the parameters for the PKCS #1 key exchange.
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
            <summary>
            Gets or sets the random number generator algorithm to use in the creation of the key exchange.
            </summary>
        </member>
        <member name="T:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
            <summary>
            Creates the PKCS#1 key exchange data using RSA.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
            <summary>
            Initializes a new instance of the RSAPKCS1KeyExchangeFormatter class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the RSAPKCS1KeyExchangeFormatter class.
            </summary>
            <param name="key">The instance of the RSA algorithm that holds the public key</param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
            <summary>
            Creates the encrypted key exchange data
            </summary>
            <param name="rgbData">The secret information to be passed in the key exchange</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
            <summary>
            Creates the encrypted key exchange data
            </summary>
            <param name="rgbData">The secret information to be passed in the key exchange</param>
            <param name="symAlgType">This parameter is not used in the current version</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the public key to use for encrypting the key exchange data
            </summary>
            <param name="key">The instance of the RSA algorithm that holds the public key</param>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
            <summary>
            Gets or sets the random number generator algorithm to use in the creation of the key exchange.
            </summary>
        </member>
        <member name="P:OpenNETCF.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
            <summary>
            Gets the parameters for the PKCS #1 key exchange
            </summary>
            <value>An XML string containing the parameters of the PKCS #1 key exchange operation</value>
        </member>
        <member name="T:OpenNETCF.Threading.EventResetMode">
            <summary>
            Indicates whether an <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> is reset automatically or manually.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.EventResetMode.AutoReset">
            <summary>
            When signaled, the <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> resets automatically after releasing a single thread.
            If no threads are waiting, the EventWaitHandle remains signaled until a thread blocks, and resets after releasing the thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.EventResetMode.ManualReset">
            <summary>
            When signaled, the <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> releases all waiting threads, and remains signaled until it is manually reset.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.EventWaitHandle">
            <summary>
            Represents a thread synchronization event.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.OpenExisting(System.String)">
            <summary>
            Opens an existing named synchronization event.
            </summary>
            <param name="name">The name of a system event.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object that represents the named system event.</returns>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Reset">
            <summary>
            Sets the state of the event to nonsignaled, causing threads to block.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Set">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait 
            handle is initially signaled, and whether it resets automatically or manually.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An EventResetMode value that determines whether the event resets automatically or manually.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode,System.String)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, and the name of a system synchronization event.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An Threading.EventResetMode value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode,System.String,System.Boolean@)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, the name of a system synchronization event, and a bool variable whose value after the call indicates whether the named system event was created.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An Threading.EventResetMode value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
            <param name="createdNew">When this method returns, contains true if the calling thread was granted initial ownership of the named system event; otherwise, false. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, <see cref="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)"/> never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">Not Supported - Just pass false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely</param>
            <param name="exitContext">Unsupported in the Compact Framework.  This parameter is for compatibility and is ignored.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.IntPtr[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.IntPtr[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely</param>
            <param name="exitContext">Unsupported in the Compact Framework.  This parameter is for compatibility and is ignored.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan"/> to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="timeout">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">Not Supported - Just pass false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Close">
            <summary>
            When overridden in a derived class, releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Set(System.Int32)">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <param name="data">Data that can be read by the event recipient</param>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Pulse">
            <summary>
            Provides a single operation that sets to signaled the state of the specified event object and then resets it to nonsignaled after releasing the appropriate number of waiting threads.
            </summary>
            <remarks>
            For a manual-reset event object, all waiting threads that can be released immediately are released. The function then resets the event object's state to nonsignaled and returns. 
            For an auto-reset event object, the function resets the state to nonsignaled and returns after releasing a single waiting thread, even if multiple threads are waiting. 
            If no threads are waiting, or if no thread can be released immediately, PulseEvent simply sets the event object's state to nonsignaled and returns. 
            For a thread using the multiple-object wait functions to wait for all specified objects to be signaled, PulseEvent can set the event object's state to signaled and reset it to nonsignaled without causing the wait function to return. This happens if not all of the specified objects are simultaneously signaled. 
            </remarks>
            <returns>true on success, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.GetData">
            <summary>
            Gets the data associated (provided with a call to Set) with this event.
            </summary>
            <returns>The associated data</returns>
        </member>
        <member name="T:OpenNETCF.Threading.NamedMutex">
            <summary>
            A synchronization primitive than can also be used for interprocess synchronization.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean,System.String,System.Boolean@)">
            <summary>
            Initializes a new instance of the Mutex2 class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, will indicate whether the calling thread was granted initial ownership of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
            <param name="name">The name of the Mutex.
            If the value is a null reference (Nothing in Visual Basic), the Mutex is unnamed.</param>
            <param name="createdNew">When this method returns, contains a Boolean that is true if the calling thread was granted initial ownership of the mutex; otherwise, false.
            This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the Mutex2 class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
            <param name="name">The name of the Mutex.
            If the value is a null reference (Nothing in Visual Basic), the Mutex is unnamed.</param>
            <exception cref="T:System.ApplicationException">Failed to create mutex.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.NamedMutex"/> class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor">
            <summary>
            Initializes a new instance of the Mutex2 class with default properties.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.OpenExisting(System.String)">
            <summary>
            Opens an existing named mutex.
            </summary>
            <param name="name">The name of a system-wide named mutex object.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.NamedMutex"/> object that represents a named system mutex.</returns>
            <remarks>The OpenExisting method attempts to open an existing named mutex.
            If the system mutex does not exist, this method throws an exception instead of creating the system object.
            Two calls to this method with the same value for name do not necessarily return the same <see cref="T:OpenNETCF.Threading.NamedMutex"/> object, even though they represent the same named system mutex.</remarks>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named mutex does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.ReleaseMutex">
            <summary>
            Releases the <see cref="T:OpenNETCF.Threading.NamedMutex"/> once.
            </summary>
            <exception cref="T:System.ApplicationException">The calling thread does not own the mutex.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne">
            <summary>
            Blocks the current thread until the current <see cref="T:OpenNETCF.Threading.NamedMutex"/> receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, <see cref="M:OpenNETCF.Threading.NamedMutex.WaitOne"/> never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:OpenNETCF.Threading.NamedMutex"/> receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a TimeSpan to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="aTs">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.Close">
            <summary>
            Releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="T:OpenNETCF.Threading.NativeMethods">
            <summary>
            Contains native API calls for Threading related functionality.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.SafeThreadHandle">
            <summary>
            This class is used a wrapper for the handle owned by a <c>ThreadEx</c> class
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
            <summary>
            Provides common functionality that supports safe Win32 handle types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"/> class.
            </summary>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="P:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
            <summary>
            Gets a value indicating whether a handle is invalid.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SafeThreadHandle.#ctor(OpenNETCF.Threading.SafeThreadHandle.CreateHandleDelegate)">
            <summary>
            Constructor for a SafeThreadHandle
            </summary>
            <param name="createHandleFunction"></param>
        </member>
        <member name="M:OpenNETCF.Threading.SafeThreadHandle.Open">
            <summary>
            Opens the instance of the SafeHandle by calling the <c>CreateHandleDelegate</c>
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.Semaphore">
            <summary>
            Limits the number of threads that can access a resource, or a particular type of resource, concurrently.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, and optionally reserving some entries for the calling thread.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, optionally reserving some entries for the calling thread, and optionally specifying the name of a system semaphore object.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="name">The name of a system-wide named semaphore object.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, optionally reserving some entries for the calling thread, optionally specifying the name of a system semaphore object, and specifying an out parameter that indicates whether a new system object was created.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="name">The name of a system-wide named semaphore object.</param>
            <param name="createdNew"> When this method returns, contains true if a new system object was created; otherwise false. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.OpenExisting(System.String)">
            <summary>
            Opens an existing named semaphore.
            </summary>
            <param name="name">The name of a system semaphore.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.Semaphore"/> object that represents a named system semaphore.</returns>
            <remarks>The OpenExisting method attempts to open only existing named semaphores.
            If a system semaphore with the specified name does not exist, this method throws an exception instead of creating the system semaphore.
            It is possible to create multiple <see cref="T:OpenNETCF.Threading.Semaphore"/> objects that represent the same named system semaphore.
            Two calls to this method with the same value for name do not necessarily return the same <see cref="T:OpenNETCF.Threading.Semaphore"/> object, even though the objects returned both represent the same named system semaphore.</remarks>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named semaphore does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Release">
            <summary>
            Exits the semaphore, returning the previous count.
            </summary>
            <returns>An integer value representing the count on the semaphore before the Overload:Semaphore.Release method was called.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Release(System.Int32)">
            <summary>
            Exits the semaphore, returning the previous count.
            </summary>
            <param name="releaseCount">releaseCount: The number of times to exit the semaphore.</param>
            <returns>An integer value representing the count on the semaphore before the Overload:Semaphore.Release method was called.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">releaseCount is less than 1.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, WaitHandle.WaitOne() never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a TimeSpan to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="aTs">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Close">
            <summary>
            Releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="T:OpenNETCF.Threading.SemaphoreFullException">
            <summary>
            The exception that is thrown when the <see cref="M:OpenNETCF.Threading.Semaphore.Release"/> method is called on a semaphore whose count is already at the maximum.
            </summary>
            <remarks>The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.
            When the count is zero, subsequent requests block until other threads release the semaphore.
            When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.
            If a programming error causes a thread to call the <see cref="M:OpenNETCF.Threading.Semaphore.Release"/> method at this point, a <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> is thrown.</remarks>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:OpenNETCF.Threading.Thread2">
            <summary>
            Creates and controls a thread, sets its priority, and gets its status.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Sleep(System.Int32)">
            <summary>
            Blocks the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for the specified span of time.
            </summary>
            <param name="timeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.AllocateDataSlot">
            <summary>
            Allocates an unnamed data slot on all the threads.
            </summary>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.AllocateNamedDataSlot(System.String)">
            <summary>
            Allocates a named data slot on all threads.
            </summary>
            <param name="name">The name of the data slot to be allocated.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.FreeNamedDataSlot(System.String)">
            <summary>
            Eliminates the association between a name and a slot, for all threads in the process.
            </summary>
            <param name="name">The name of the data slot to be freed.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.GetData(System.LocalDataStoreSlot)">
            <summary>
            Retrieves the value from the specified slot on the current thread.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> from which to get the value.</param>
            <returns>The value retrieved</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.GetNamedDataSlot(System.String)">
            <summary>
            Looks up a named data slot.
            </summary>
            <param name="name">The name of the local data slot.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/> allocated for this thread.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.SetData(System.LocalDataStoreSlot,System.Object)">
            <summary>
            Sets the data in the specified slot on the currently running thread, for that thread's current domain.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> in which to set the value.</param>
            <param name="data">The value to be set.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.op_Implicit(OpenNETCF.Threading.Thread2)~System.Threading.Thread">
            <summary>
            Returns a <see cref="T:System.Threading.Thread"/> equivalent for the Thread2 instance
            </summary>
            <param name="thread2">The Thread2 to convert</param>
            <returns>A <see cref="T:System.Threading.Thread"/></returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread2 class.
            </summary>
            <param name="start">A <see cref="T:System.Threading.ThreadStart"/> delegate that references the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Start">
            <summary>
            Causes the operating system to change the state of the current instance to <see cref="F:OpenNETCF.Threading.ThreadState.Running"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Suspend">
            <summary>
            Either suspends the thread, or if the thread is already suspended, has no effect.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Resume">
            <summary>
            Resumes a thread that has been suspended.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Abort(System.Object)">
            <summary>
            Raises a <see cref="T:System.Threading.ThreadAbortException"/> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Abort">
            <summary>
            Raises a <see cref="T:System.Threading.ThreadAbortException"/> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <returns><b>true</b> if the thread has terminated;</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="timeout"></param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>timeout</i> parameter has elapsed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join(System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>millisecondsTimeout</i> parameter has elapsed.</returns>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.Name">
            <summary>
            Gets or sets the name of the thread.
            </summary>
            <value>A string containing the name of the thread, or a null reference (Nothing in Visual Basic) if no name was set.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.ManagedThreadId">
            <summary>
            Gets a unique identifier for the current managed thread
            </summary>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread
            </summary>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <value><b>true</b> if this thread has been started and has not terminated normally or aborted; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <value>One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is Normal.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.RealTimeQuantum">
            <summary>
            Gets or sets a Thread2's quantum in milliseconds.  Use zero for "run to completion". Unless modified by the OEM, the system default is 100ms
            </summary>
            <remarks>
            <b>WARNING:</b> Adjusting a thread quantum with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.RealTimePriority">
            <summary>
            Gets or sets a priority value outside of application priority space
            </summary>
            <remarks>
            <b>WARNING:</b> Adjusting a thread priority with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.  Do <u>not</u> use this Property for normal Priority settings.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.State">
            <summary>
            Returns the Thread2 instance's current <see cref="T:OpenNETCF.Threading.ThreadState"/>
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.ThreadState">
            <summary>
            Specifies the execution states of a <see cref="T:OpenNETCF.Threading.Thread2"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Unstarted">
            <summary>
            Thread is unstarted.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Running">
            <summary>
            Thread is running.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.WaitSleepJoin">
            <summary>
            Thread is waiting in a Join.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.SuspendRequested">
            <summary>
            Suspend has been called but not acted upon.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Suspended">
            <summary>
            Thread is suspended.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Stopped">
            <summary>
            Thread has either terminated or been Aborted.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">
            <summary>
            The exception that is thrown when an attempt is made to open a system mutex or semaphore that does not exist.
            </summary>
            <remarks>Instances of the Mutex class and the Semaphore class can represent named system synchronization objects.
            When you use the <see cref="M:OpenNETCF.Threading.NamedMutex.OpenExisting(System.String)"/> method or the <see cref="M:OpenNETCF.Threading.Semaphore.OpenExisting(System.String)"/> method to open a named system object that does not exist, a <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> is thrown.</remarks>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:OpenNETCF.Timers.ElapsedEventArgs">
            <summary>
            Provides data for the Elapsed event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Timers.ElapsedEventArgs.SignalTime">
            <summary>
            Gets the time the Elapsed event was raised.
            </summary>
        </member>
        <member name="T:OpenNETCF.Timers.ElapsedEventHandler">
            <summary>
            Represents the method that will handle the Elapsed event of a Timer.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Timers.Timer2">
            <summary>
            This precirsion timer can be used to generate recurring events in an application.  It is dependent on platform support of the Multimedia Timer, which is <b>not</b> in Windows mobile
            </summary>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.TimerCallback">
            <summary>
            When overridden and UseCallback is true, this method will run when the timer Interval expires
            </summary>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.#ctor">
            <summary>
            Initializes a new instance of the Timer class with an interval of 100ms and a resolution of 10ms
            </summary>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Timer class with a resolution of 10ms
            </summary>
            <param name="interval">The Interval for the Timer</param>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Timer class
            </summary>
            <param name="interval">The Interval for the Timer</param>
            <param name="resolution">The resolution for the Timer</param>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.Start">
            <summary>
            Starts raising the Elapsed event by setting Enabled to true
            </summary>
            <remarks>
            If Enabled is set to true and AutoReset is set to false, the Timer raises the Elapsed event only once, the first time he interval elapses. When Enabled is true and AutoReset is true, the Timer continues to raise the Elapsed event on the specified interval.
            You can also start timing by setting Enabled to true.
            <blockquote><b>Note</b>If AutoReset is false, the Start method must be called in order to start the count again.</blockquote>
            </remarks>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.Stop">
            <summary>
            Stops raising the Elapsed event by setting Enabled to false.
            </summary>
        </member>
        <member name="M:OpenNETCF.Timers.Timer2.Dispose(System.Boolean)">
            <summary>
            This member overrides Component.Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:OpenNETCF.Timers.Timer2.Elapsed">
            <summary>
            Occurs when the interval elapses.
            </summary>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.UseCallback">
            <summary>
            When set, the overridden TimerCallback will be executed
            </summary>
            <remarks>if this is set, the TimerCallback <b>must</b> be overridden</remarks>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.AutoReset">
            <summary>
            Gets or sets a value indicating whether the Timer should raise the Elapsed event each time the specified interval elapses or only after the first time it elapses
            </summary>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.Enabled">
            <summary>
            Gets or sets a value indicating whether the Timer should raise the Elapsed event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.Interval">
            <summary>
            Gets or sets the interval at which to either raise the Elapsed event or run the TimerCallback method
            </summary>
            <remarks>Default Interval is 100ms</remarks>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.Resolution">
            <summary>
            Resolution of the timer event, in milliseconds. The resolution increases with smaller values; a resolution of zero indicates periodic events should occur with the greatest possible accuracy. To reduce system overhead, however, you should use the maximum value appropriate for your application
            </summary>
            <remarks>Default value = 10ms</remarks>
        </member>
        <member name="P:OpenNETCF.Timers.Timer2.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed
            </summary>
            <remarks>
            When SynchronizingObject is a null reference (Nothing in Visual Basic), the method that handles the Elapsed event is called on a thread from the system-thread pool. For more information on system-thread pools, see ThreadPool.
            When the Elapsed event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting SynchronizingObject to a Windows Forms component, which causes the method that handles the Elapsed event to be called on the same thread that the component was created on.
            If the Timer is used inside Visual Studio in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the Timer. For example, if you place a Timer on a designer for Form1 (which inherits from Form), the SynchronizingObject property of Timer is set to the instance of Form1.
            </remarks>
        </member>
        <member name="T:OpenNETCF.ToolHelp.ProcessEntry">
            <summary>
            Wrapper around the ToolHelp ProcessEntry information
            </summary>
            <remarks>
            This class requires the toolhelp32.dll
            </remarks>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.ToString">
            <summary>
            Get the short name of the current process
            </summary>
            <returns>The current process name</returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.Kill">
            <summary>
            Kill the Process
            </summary>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.GetProcesses">
            <summary>
            Rerieves an array of all running processes
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.BaseAddress">
            <summary>
            Base address for the process
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.ThreadCount">
            <summary>
            Number of execution threads started by the process.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.ProcessID">
            <summary>
            Identifier of the process. The contents of this member can be used by Win32 API elements. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.ExeFile">
            <summary>
            Null-terminated string that contains the path and file name of the executable file for the process. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.PROCESSENTRY32.ProcessID">
            <summary>
            Identifier of the process. The contents of this member can be used by Win32 API elements.
            </summary>
        </member>
        <member name="T:OpenNETCF.ToolHelp.ThreadEntry">
            <summary>
            Wrapper around the ToolHelp ProcessEntry information
            </summary>
            <remarks>
            This class requires the toolhelp32.dll
            </remarks>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.ToString">
            <summary>
            Get the thread ID
            </summary>
            <returns>The current Thread ID</returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.Terminate">
            <summary>
            Terminates the currently referenced thread (based on its Thread ID)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.GetThreads">
            <summary>
            Retrieves an array of all running threads
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.GetThreads(System.UInt32)">
            <summary>
            Retrieves an array of all running threads for a specified process
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.Suspend">
            <summary>
            Either suspends the thread, or if the thread is already suspended, has no effect.
            </summary>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.Resume">
            <summary>
            Resumes a thread that has been suspended.
            </summary>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.SetPriority(System.Threading.ThreadPriority)">
            <summary>
            Sets a value indicating the scheduling priority of a thread.
            </summary>
            <param name="newPriority">One of the <see cref="T:System.Threading.ThreadPriority"/> values.</param> 
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.SetRealtimePriority(System.Int32)">
            <summary>
            Gets or sets a priority value outside of application priority space
            </summary>
            <param name="newPriority">The new Priority, from 0 to 255</param>
            <remarks>
            <b>WARNING:</b> Adjusting a thread priority with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.  Do <u>not</u> use this Property for normal Priority settings.
            </remarks>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ThreadEntry.SetRealtimeQuantum(System.Int32)">
            <summary>
            Gets or sets a the thread's quantum in milliseconds.  Use zero for "run to completion". Unless modified by the OEM, the system default is 100ms
            </summary>
            <param name="newQuantum">The new thread quantum</param>
            <remarks>
            <b>WARNING:</b> Adjusting a thread quantum with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.
            </remarks>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.Usage">
            <summary>
            Number of references to the thread. A thread exists as long as its usage count is nonzero. As soon as its usage count becomes zero, a thread terminates.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.ThreadID">
            <summary>
            Identifier of the thread. This identifier is compatible with the thread identifier returned by the CreateProcess function.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.OwnerProcessID">
            <summary>
            Identifier of the process that created the thread. The contents of this member can be used by Win32 API elements. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.BasePriority">
            <summary>
            Initial priority level assigned to a thread, which can be a value from 0 to 255.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.DeltaPriority">
            <summary>
            Change in the priority level of a thread. This value is a signed delta from the base priority level assigned to the thread.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ThreadEntry.CurrentProcessID">
            <summary>
            Process identifier where the thread is executing.
            </summary>
        </member>
        <member name="T:OpenNETCF.TrigonometricLUT">
            <summary>
            Trigonometric Look-up Table.
            </summary>
        </member>
        <member name="M:OpenNETCF.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            This function returns the address of the specified exported DLL function.
            </summary>
            <param name="hModule">Handle to the DLL module that contains the function.
            The <see cref="M:OpenNETCF.NativeMethods.LoadLibrary(System.String)"/> or <see cref="M:OpenNETCF.NativeMethods.GetModuleHandle(System.String)"/> function returns this handle.</param>
            <param name="procName">string containing the function name, or specifies the function's ordinal value.
            If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.NativeMethods.GetModuleHandle(System.String)">
            <summary>
            This function returns a module handle for the specified module if the file is mapped into the address space of the calling process.
            </summary>
            <param name="moduleName">string that contains the name of the module, which must be a DLL file.</param>
            <returns>A handle to the specified module indicates success. IntPtr.Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.NativeMethods.IsBadCodePtr(System.IntPtr)">
            <summary>
            This function determines whether the calling process has read access to the memory at the specified address.
            </summary>
            <param name="fn">Pointer to an address in memory.</param>
            <returns>Zero indicates that the calling process has read access to the specified memory.
            Nonzero indicates that the calling process does not have read access to the specified memory.</returns>
        </member>
        <member name="T:OpenNETCF.NativeMethods.ProcessorArchitecture">
            <summary>
            Processor Architecture values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.WinAPI.Core.GetSystemInfo(OpenNETCF.WinAPI.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Intel">
            <summary>
            Processor is Intel x86 based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.MIPS">
            <summary>
            Processor is MIPS based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Alpha">
            <summary>
            Processor is Alpha based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.PPC">
            <summary>
            Processor is Power PC based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.SHX">
            <summary>
            Processor is SH3, SH4 etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.ARM">
            <summary>
            Processor is ARM based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.IA64">
            <summary>
            Processor is Intel 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Alpha64">
            <summary>
            Processor is Alpha 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Unknown">
            <summary>
            Unknown processor architecture.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.ProcessorType">
            <summary>
            Processor type values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.Win32.Core.GetSystemInfo(OpenNETCF.Win32.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_386">
            <summary>
            Processor is Intel 80386.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_486">
            <summary>
            Processor is Intel 80486.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_Pentium">
            <summary>
            Processor is Intel Pentium (80586).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_PentiumII">
            <summary>
            Processor is Intel Pentium II (80686).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_IA64">
            <summary>
            Processor is Intel 64bit (IA64).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.MIPS_R4000">
            <summary>
            Processor is MIPS R4000.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Alpha_21064">
            <summary>
            Processor is Alpha 21064.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_403">
            <summary>
            Processor is Power PC 403.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_601">
            <summary>
            Processor is Power PC 601.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_603">
            <summary>
            Processor is Power PC 603.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_604">
            <summary>
            Processor is Power PC 604.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_620">
            <summary>
            Processor is Power PC 620.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH3">
            <summary>
            Processor is Hitachi SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH3E">
            <summary>
            Processor is Hitachi SH3E.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH4">
            <summary>
            Processor is Hitachi SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Motorola_821">
            <summary>
            Processor is Motorola 821.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.SHx_SH3">
            <summary>
            Processor is SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.SHx_SH4">
            <summary>
            Processor is SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.StrongARM">
            <summary>
            Processor is StrongARM.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM720">
            <summary>
            Processor is ARM 720.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM820">
            <summary>
            Processor is ARM 820.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM920">
            <summary>
            Processor is ARM 920.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM_7TDMI">
            <summary>
            Processor is ARM 7 TDMI.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.SystemInfo">
            <summary>
            This structure contains information about the current computer system. This includes the processor type, page size, memory addresses, and OEM identifier.
            </summary>
            <seealso cref="M:OpenNETCF.NativeMethods.GetSystemInfo(OpenNETCF.NativeMethods.SystemInfo@)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorArchitecture">
            <summary>
            The system's processor architecture.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.PageSize">
            <summary>
            The page size and the granularity of page protection and commitment.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.MinimumApplicationAddress">
            <summary>
            Pointer to the lowest memory address accessible to applications and dynamic-link libraries (DLLs). 
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.MaximumApplicationAddress">
            <summary>
            Pointer to the highest memory address accessible to applications and DLLs.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ActiveProcessorMask">
            <summary>
            Specifies a mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31. 
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.NumberOfProcessors">
            <summary>
            Specifies the number of processors in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorType">
            <summary>
            Specifies the type of processor in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.AllocationGranularity">
            <summary>
            Specifies the granularity with which virtual memory is allocated.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorLevel">
            <summary>
            Specifies the system’s architecture-dependent processor level.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorRevision">
            <summary>
            Specifies an architecture-dependent processor revision.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.MemoryStatus">
            <summary>
            This structure contains information about current memory availability. The GlobalMemoryStatus function uses this structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.MemoryLoad">
            <summary>
            Specifies a number between 0 and 100 that gives a general idea of current memory utilization, in which 0 indicates no memory use and 100 indicates full memory use.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalPhysical">
            <summary>
            Indicates the total number of bytes of physical memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailablePhysical">
            <summary>
            Indicates the number of bytes of physical memory available.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalPageFile">
            <summary>
            Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailablePageFile">
            <summary>
            Indicates the number of bytes available in the paging file.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalVirtual">
            <summary>
            Indicates the total number of bytes that can be described in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailableVirtual">
            <summary>
            Indicates the number of bytes of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.FormatMessageFlags">
            <summary>
            Specifies aspects of the formatting process and how to interpret the lpSource parameter.
            </summary>
            <remarks>The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer.
            The low-order byte can also specify the maximum width of a formatted output line.</remarks>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.AllocateBuffer">
            <summary>
            The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.IgnoreInserts">
            <summary>
            Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromString">
            <summary>
            Specifies that lpSource is a pointer to a null-terminated message definition.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromHModule">
            <summary>
            Specifies that lpSource is a module handle containing the message-table resource(s) to search.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromSystem">
            <summary>
            Specifies that the function should search the system message-table resource(s) for the requested message.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.ArgumentArray">
            <summary>
            Specifies that the Arguments parameter is not a va_list structure, but instead is just a pointer to an array of 32-bit values that represent the arguments.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.MaxWidthMask">
            <summary>
            Use the <b>MaxWidthMask</b> constant and bitwise Boolean operations to set and retrieve this maximum width value.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.KeyStateFlags">
            <summary>
            KeyStateFlags for Keyboard methods
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Toggled">
            <summary>
            Key is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AsyncDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.PrevDown">
            <summary>
            Key was previously down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Down">
            <summary>
            Key is currently down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyCtrl">
            <summary>
            Left or right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyShift">
            <summary>
            Left or right SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyAlt">
            <summary>
            Left or right ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Capital">
            <summary>
            VK_CAPITAL is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftCtrl">
            <summary>
            Left CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftShift">
            <summary>
            Left SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftAlt">
            <summary>
            Left ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftWin">
            <summary>
            Left Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightCtrl">
            <summary>
            Right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightShift">
            <summary>
            Right SHIFT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightAlt">
            <summary>
            Right ALT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightWin">
            <summary>
            Right Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Dead">
            <summary>
            Corresponding character is dead character.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.NoCharacter">
            <summary>
            No characters in pCharacterBuffer to translate.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Language1">
            <summary>
            Use for language specific shifts.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.NumLock">
            <summary>
            NumLock toggled state.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.RegistryHelper">
            <summary>
            Contains methods for working with the system registry.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.SaveRamBasedRegistry(System.String)">
            <summary>
            This function saves a copy of the current Windows CE RAM–based registry to a specified file.
            </summary>
            <param name="destinationPath">Specifies the name of the file to which the registry is saved</param>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.RestoreRamBasedRegistry(System.String)">
            <summary>
            This function putrs the OS in a state that it will load the specified registry on the next boot.
            </summary>
            <param name="sourcePath">Path to the source registry file generated by a call to <see cref="M:OpenNETCF.Win32.RegistryHelper.SaveRamBasedRegistry(System.String)"/></param>
            <remarks>The device <b>will</b> be soft reset when this overload of the function is called</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.RestoreRamBasedRegistry(System.String,System.Boolean)">
            <summary>
            This function putrs the OS in a state that it will load the specified registry on the next boot.
            </summary>
            <param name="sourcePath">Path to the source registry file generated by a call to <see cref="M:OpenNETCF.Win32.RegistryHelper.SaveRamBasedRegistry(System.String)"/></param>
            <param name="performReset">If true, the device will soft reset when the method is called to complete the update</param>
            <remarks>The device *must* be soft reset for the registry to actually be restored</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.SaveHiveBasedKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            This function saves the specified key and all of its subkeys and values to a new file. If the specified key is not a predefined ROOT, it backs up to the ROOT of the keyToSave and saves there.
            </summary>
            <param name="keyToSave">Specifies a handle to the key where the save operation is to begin, or any of the following predefined reserved handle values:
            <list type="Root Keys">
            <item><see cref="F:Microsoft.Win32.Registry.LocalMachine"/></item>
            <item><see cref="F:Microsoft.Win32.Registry.CurrentUser"/></item>
            <item><see cref="F:Microsoft.Win32.Registry.ClassesRoot"/></item>
            <item><see cref="F:Microsoft.Win32.Registry.Users"/></item>
            </list>
            </param>
            <param name="destinationPath">Specifies the name of the file to which the registry key will be saved</param>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.RestoreHiveBasedKey(System.String)">
            <summary>
            This function replaces the file backing a registry key and all its subkeys with another file, so that when the OS is next started, the key and subkeys will have the values stored in the new file.
            </summary>
            <param name="sourcePath">Path to the source registry file generated by a call to <see cref="M:OpenNETCF.Win32.RegistryHelper.SaveRamBasedRegistry(System.String)"/></param>
            <remarks>The device <b>will</b> be soft reset when this overload of the function is called</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.RestoreHiveBasedKey(System.String,System.Boolean)">
            <summary>
            This function replaces the file backing a registry key and all its subkeys with another file, so that when the OS is next started, the key and subkeys will have the values stored in the new file.
            </summary>
            <param name="sourcePath">Path to the source registry file generated by a call to <see cref="M:OpenNETCF.Win32.RegistryHelper.SaveRamBasedRegistry(System.String)"/></param>
            <param name="performReset">If true, the device will soft reset when the method is called to complete the update</param>
            <remarks>The device *must* be soft reset for the registry to actually be restored</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryHelper.CreateVolatileSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a new volatile subkey for the specified registry key.
            <para>Requires Windows CE 5.0</para>
            </summary>
            <param name="key">Existing parent key.</param>
            <param name="name">The name or path of the subkey to create.</param>
            <returns>New RegistryKey create as a volatile key.</returns>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeFileHandle">
            <summary>
            Represents a wrapper class for file handles.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeFileHandle"/> class.
            </summary>
            <param name="preexistingHandle">The pre-existing handle to use.</param>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeFileHandle.ReleaseHandle">
            <summary>
            Executes the code required to free a handle.
            </summary>
            <returns>true if the handle is released successfully; false if a catastrophic failure occurs.</returns>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
            <summary>
            Provides common functionality that supports safe Win32 handle types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"/> class.
            </summary>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="P:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
            <summary>
            Gets a value indicating whether a handle is invalid.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeWaitHandle">
            <summary>
            Represents a wrapper class for wait handles.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeWaitHandle"/> class.
            </summary>
            <param name="existingHandle">The pre-existing handle to use.</param>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle">
            <summary>
            Executes the code required to free a handle.
            </summary>
            <returns>true if the handle is released successfully; false if a catastrophic failure occurs.</returns>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Alias">
            <summary>
            <b>name</b> is a WIN.INI [sounds] entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.FileName">
            <summary>
            <b>name</b> is a file name
            </summary>
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Resource">
            <summary>
            <b>name</b> is a resource name or atom
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Sync">
            <summary>   
            Play synchronously (default)   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Async">
            <summary>   
             Play asynchronously   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.NoDefault">
            <summary>   
            Silence not default, if sound not found   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Memory">
            <summary>   
            <b>name</b> points to a memory file   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.Loop">
            <summary>   
            Loop the sound until next sndPlaySound   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.NoStop">
            <summary>   
            Don't stop any currently playing sound   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Media.WaveAudio.NativeMethods.SoundFlags.NoWait">
            <summary>   
            Don't wait if the driver is busy   
            </summary>   
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveFormat2">
            <summary>
            This class defines the format of waveform-audio data. 
            Only format information common to all waveform-audio data formats is included in this class. 
            For formats that require additional information, this class is included 
            as the first member in another class, along with the additional information
            </summary>
            <remarks>Equivalent to native <b>WAVEFORMATEX</b> structure.</remarks>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveFormat2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveFormat2.#ctor(System.Byte[])">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveFormat2.FromStream(System.IO.Stream)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Media.WaveAudio.WaveFormat2.GetBytes">
            <summary>
            Get bytes
            </summary>
            <returns>byte array representation of this instance</returns>
        </member>
        <member name="T:OpenNETCF.Media.WaveAudio.WaveInCaps">
            <summary>
            Class for getting audio device capabilities.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SystemTime">
            <summary>   
            This structure represents a date and time using individual members for the month, day, year, weekday, hour, minute, second, and millisecond.   
            </summary>
            <remarks>Wraps the native <b>SYSTEMTIME</b> structure.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wYearOffset">
            <summary>
            Offset within structure to Year value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMonthOffset">
            <summary>
            Offset within structure to Month value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOfWeekOffset">
            <summary>
            Offset within structure to DayOfWeek value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOffset">
            <summary>
            Offset within structure to Day value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wHourOffset">
            <summary>
            Offset within structure to Hour value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMinuteOffset">
            <summary>
            Offset within structure to Minute value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wSecondOffset">
            <summary>
            Offset within structure to Second value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMillisecondsOffset">
            <summary>
            Offset within structure to Millisecond value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.Empty">
            <summary>
            Represents an empty SystemTime structure.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[])">
            <summary>
            Construct a SystemTime from a byte array
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a SystemTime from a portion of a byte array.
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param>   
            <param name="offset">Offset (in bytes) to SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new SystemTime object with the specified parameters.                          /// Initializes a new SYSTEMTIME object with the specified parameters. 
            <param name="year">Specifies the current year.</param>
            <param name="month">Specifies the current month; January = 1, February = 2, and so on</param>
            <param name="day">Specifies the current day of the month.</param>
            <param name="hour">Specifies the current hour.</param>
            <param name="minute">Specifies the current minute.</param>
            <param name="second">Specifies the current second.</param>  
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToByteArray">
            <summary>
            Method to extract marshal-compatible 'structure' from the class.   
            </summary>   
            <returns>Byte Array containing the SystemTime data.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.DateTime)">
            <summary>
            Create a new SystemTime instance from an existing DateTime instance.
            </summary>
            <param name="dt">DateTime to create SystemTime from.</param>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor">
            <summary>
            Create a new empty SystemTime instance.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.DateTime">
            <summary>
            Converts a SystemTime structure to a DateTime object.
            </summary>
            <param name="st">A SystemTime structure.</param>
            <returns>Equivalent date in the form of a <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(System.Int64)~OpenNETCF.Win32.SystemTime">
            <summary>
            Converts a 64bit FileTime value to a SystemTime structure.
            </summary>
            <param name="FileTime">FileTime.</param>
            <returns>A SystemTime structure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Int64">
            <summary>
            Converts a SystemTime structure to the equivalent FileTime 64bit integer.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromFileTime(System.Int64)">
            <summary>
            Returns a SystemTime equivalent to the specified operating system file timestamp.
            </summary>
            <param name="fileTime">A Windows file time.</param>
            <returns>A SystemTime value representing the date and time of fileTime.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToFileTime">
            <summary>
            Converts the value of this instance to the format of a local operating system file time.
            </summary>
            <returns>The value of this SystemTime in the format of a local operating system file time.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Byte[]">
            <summary>
            Converts a SystemTime structure to the equivalent binary data.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromDateTime(System.DateTime)">
            <summary>   
            Creates a new instance of SystemTime from an existing System.DateTime object   
            </summary>   
            <param name="dt">DateTime object to copy.</param>   
            <returns>SystemTime class matching the DateTime object.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToDateTime">
            <summary>   
            Returns a <see cref="T:System.DateTime"/> object with the same Date and time as this instance.   
            </summary>   
            <returns>A <see cref="T:System.DateTime"/> copy of the SystemTime object.</returns>   
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Year">
            <summary>   
            Gets the year component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Month">
            <summary>   
            Gets the month component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.DayOfWeek">
            <summary>   
            The Day of the week. Sunday = 0, Monday = 1, and so on.   
            </summary>   
            <remarks>Because the numbering scheme matches the System.DayOfWeek enumeration,   
            it is possible to cast this field to DayOfWeek.</remarks> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Day">
            <summary>   
            Gets the day of the month represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Hour">
            <summary>   
            Gets the hour component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Minute">
            <summary>   
            Gets the minute component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Second">
            <summary>   
            Gets the seconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Milliseconds">
            <summary>   
            Gets the milliseconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="T:OpenNETCF.Collections.Generic.SynchronizedCollection`1">
            <summary>
            Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenNETCF.Collections.Generic.SynchronizedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the SynchronizedCollection(T) class. 
            </summary>
        </member>
        <member name="T:OpenNETCF.FFTReal">
            <summary>
            An implementation of the Fast Fourier Transform based on the work of Laurent de Soras
            </summary>
        </member>
        <member name="M:OpenNETCF.FFTReal.Compute(System.Double[])">
            <summary>
            Compute an FFT on a 2^n-length data set
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.FFTReal.ComputeInverse(OpenNETCF.Complex[])">
            <summary>
            Compute an inverse FFT on a 2^n-length data set of complex numbers
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with a comma (',') FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Char)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
            <param name="fieldDelimiter">char that separates fields in a row</param>
            <param name="path">Fully-qualified path to the delimited text file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
            <param name="fieldDelimiter">string that separates fields in a row</param>
            <param name="path">Fully-qualified path to the delimited text file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Char,System.Char)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="path">Fully-qualified path to the delimited text file</param>
            <param name="fieldDelimiter">char that separates fields in a row</param>
            <param name="rowDelimiter">char that separates rows in the file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="path">Fully-qualified path to the delimited text file</param>
            <param name="fieldDelimiter">char that separates fields in a row</param>
            <param name="rowDelimiter">char that separates rows in the file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="fieldDelimiter">string that separates fields in a row</param>
            <param name="rowDelimiter">string that separates rows in the file</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="path">Fully-qualified path to the delimited text file</param>
            <param name="append">
            Determines whether data is to be appended to the file. If the file exists
            and append is false, the file is overwritten. If the file exists and append
            is true, the data is appended to the file. Otherwise, a new file is created.
            </param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.NextRow">
            <summary>
            Writes a RowDelimiter to the output file
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.Object[])">
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
            <param name="values">values to write</param>
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.String[])">
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
            <param name="values">values to write</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.Collections.IEnumerable)">
            <summary>
            Writes any IEnumerable list to a single row in the target file.  
            If each element in the list is also IEnumerable then each element becomes a row in the target file
            </summary>
            <param name="valueList"></param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.String)">
            <summary>
            Writes the value followed by the currently set FieldDelimiter to the output file
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with
             the writer.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Flush">
            <summary>
            Causes any buffered data to be flushed to the target file
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Dispose">
            <summary>
             Releases the unmanaged resources used by the DelimitedTextWriter
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DelimitedTextWriter.FieldDelimiter">
            <summary>
            Gets or sets the string that separates fields in a row
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DelimitedTextWriter.RowDelimiter">
            <summary>
            Gets or sets the string that separates rows in the file
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemMonitor">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
            <remarks>
            The FileSystemMonitor is thread-safe and does not depend on aygshell.dll being present in the system, 
            therefore, it is safe to use this for file system notifications when no GUI is present. 
            </remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemMonitor.#ctor">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemMonitor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemMonitor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemMonitor.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:OpenNETCF.IO.FileSystemMonitor"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemMonitor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.IO.FileSystemMonitor"/> and optionally releases the managed resources.
            </summary>
            <param name="finalizing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemMonitor.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemMonitor.Path"/> is created.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemMonitor.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemMonitor.Path"/> is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemMonitor.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemMonitor.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemMonitor.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemMonitor.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemMonitor.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemMonitor.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemMonitor.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemMonitor.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.Media.Tone">
            <summary>
            Represents a note for the SoundPlayer to play.
            </summary>
            <remarks>
            Internally this class stores data as the MIDINote value, which is a whole number. Due to mathematical rounding, if you set a 
            specific frequency, you may not get the exact same frequency back on a read.  Instead you will get the frequency associated with the nearest
            MIDI note to the frequency.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Media.Tone.GetFrequency(System.Int32)">
            <summary>
            
            </summary>
            <param name="midiNote"></param>
            <returns></returns>
            <remarks>
            freq = 440 * 2^((n-69)/12)
            </remarks>
        </member>
        <member name="M:OpenNETCF.Media.Tone.GetNote(System.Single)">
            <summary>
            
            </summary>
            <param name="frequency"></param>
            <returns></returns>
            <remarks>
            n = 69 + 12*log(freq/440)/log(2)
            </remarks>
        </member>
        <member name="P:OpenNETCF.Media.Tone.Frequency">
            <summary>
            frequency in Hertz
            </summary> 
        </member>
        <member name="P:OpenNETCF.Media.Tone.MIDINote">
            <summary>
            MIDI note value
            </summary>
        </member>
        <member name="P:OpenNETCF.Media.Tone.Duration">
            <summary>
            Duration in tenths of a second
            </summary>
        </member>
        <member name="T:OpenNETCF.Reflection.Device">
            <summary>
            A static (<b>Shared</b> in Visual Basic) class designed to help
            determine whether a Win32 library exists and if so, whether the 
            library exports a specific entry point. 
            </summary>
            <example>
            <code lang="VB">
            If Device.Win32Library("coredll").HasMethod("FindWindow") Then
                NativeMethods.FindWindow("MyWindowName", String.Empty)
            End If
            </code>
            <code lang="C#">
            if (Device.Win32Library("coredll").HasMethod("FindWindow")
            {
                NativeMethods.FindWindow("MyWindowName", String.Empty);
            }
            </code>
            </example>
        </member>
        <member name="M:OpenNETCF.Reflection.Device.Win32Library(System.String)">
            <summary>
            Creates an instance of the NativeLibrary class.
            </summary>
            <remarks>The returned instance will always be non-null. 
            To determine the existence of the library, check the 
            <see cref="P:OpenNETCF.Reflection.NativeLibrary.Exists"/> property.</remarks>
            <param name="library">The name of the Win32 library. The 
            file extension is optional.</param>
        </member>
        <member name="M:OpenNETCF.Reflection.NativeLibrary.HasMethod(System.String)">
            <summary>
            Indicates whether the Win32 library exports the specified entry point.
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Reflection.NativeLibrary.Exists">
            <summary>
            Indicates whether the library exists or not.
            </summary>
        </member>
        <member name="P:OpenNETCF.Reflection.NativeLibrary.Name">
            <summary>
            The name of the Win32 library.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.Monitor2">
            <summary>
            Enhanced alternative to the <see cref="T:System.Threading.Monitor"/> class.
            Provides a mechanism that synchronizes access to objects.
            </summary>
            <seealso cref="T:System.Threading.Monitor"/>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.currentOwner">
            <summary>
            The owner of the monitor, or null if it's not owned
            by any thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.lockCount">
            <summary>
            Number of levels of locking (0 for an unowned
            monitor, 1 after a single call to Enter, etc).
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.stateLock">
            <summary>
            Object to be used as a monitor for state changing.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.waitPulseEvent">
            <summary>
            AutoResetEvent used to implement Wait/Pulse/PulseAll.
            Initially not signalled, so that a call to Wait will
            block until the first pulse.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.waitCounter">
            <summary>
            Number of threads waiting on this monitor.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.enterExitEvent">
            <summary>
            Event used for Enter/Exit. Initially signalled
            to allow the first thread to come in.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.#ctor">
            <summary>
            Creates a new monitor, not owned by any thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Enter">
            <summary>
            Enters the monitor (locks it), blocking until the
            lock is held. If the monitor is already held by the current thread,
            its lock count is incremented.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.TryEnter">
            <summary>
            Attempts to enter the monitor (locking it) but does not block
            if the monitor is already owned.
            </summary>
            <returns>Whether or not the current thread now owns the monitor.
            </returns>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Exit">
            <summary>
            Releases a level of locking, unlocking the monitor itself
            if the lock count becomes 0.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Pulse">
            <summary>
            Pulses the monitor once - a single waiting thread will be released
            and continue its execution after the current thread has exited the
            monitor. Unlike Pulse on the normal framework, no guarantee is
            made about which thread is woken.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the 
            current thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.PulseAll">
            <summary>
            Pulses the monitor such that all waiting threads are woken up.
            All threads will then try to regain the lock on this monitor.
            No order for regaining the lock is specified.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Wait">
            <summary>
            Relinquishes the lock on this monitor (whatever the lock count is)
            and waits for the monitor to be pulsed. After the monitor has been 
            pulsed, the thread blocks again until it has regained the lock (at 
            which point it will have the same lock count as it had before), and 
            then the method returns.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.SynchronizationLockException">
            <summary>
            Exception thrown by <see cref="T:OpenNETCF.Threading.Monitor2"/> when threading rules
            are violated (usually due to an operation being
            invoked on a monitor not owned by the current thread).
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SynchronizationLockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SynchronizationLockException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.CreateInMemoryMap">
            <summary>
            Creates an unnamed MemoryMappedFile instance using an in-memory map as the backing object with a maximum size of <b>DefaultInMemoryMapSize</b>
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.CreateInMemoryMap(System.String)">
            <summary>
            Creates a named MemoryMappedFile instance using an in-memory map as the backing object with a maximum size of <b>DefaultInMemoryMapSize</b>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.CreateInMemoryMap(System.String,System.Int64)">
            <summary>
            Creates a named MemoryMappedFile instance using an in-memory map as the backing object
            </summary>
            <param name="name"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.CreateWithFileBacking(System.String,System.Boolean,System.Int64)">
            <summary>
            Creates a MemoryMappedFile instance using a file system file as the backing object
            </summary>
            <param name="backingFile"></param>
            <param name="failIfFileExists"></param>
            <param name="maxSize">A positive number or the UseFileSizeForMaximumMapSize constant</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.Close">
            <summary>
            Closes and releases all resources associated with the stream
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.Flush">
            <summary>
            Flushes all pending writes
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Moves the current stream position pointer
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the MemoryMappedFile
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the MemoryMappedFile
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.SetLength(System.Int64)">
            <summary>
            Throws a NotSupportedException
            </summary>
            <param name="value">Not Supported</param>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.EndRead(System.IAsyncResult)">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.MemoryMappedFile.EndWrite(System.IAsyncResult)">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.Name">
            <summary>
            The name of the MemoryMapped file provided during construction
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.Length">
            <summary>
            Gets the maximum length of the MemoryMappedFile
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.Position">
            <summary>
            Gets or sets the current position within the MemoryMappedFile stream
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.CanRead">
            <summary>
            Always returns <b>true</b> for MemoryMappedFiles
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.CanSeek">
            <summary>
            Always returns <b>true</b> for MemoryMappedFiles
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.CanTimeout">
            <summary>
            Always returns <b>false</b> for MemoryMappedFiles
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.CanWrite">
            <summary>
            Always returns <b>true</b> for MemoryMappedFiles
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.WriteTimeout">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.MemoryMappedFile.ReadTimeout">
            <summary>
            Throws a NotSupportedException
            </summary>
        </member>
        <member name="T:OpenNETCF.ToolHelp.ModuleEntry">
            <summary>
            Wrapper around the ToolHelp ModuleEntry information
            </summary>
            <remarks>
            This class requires the toolhelp32.dll
            </remarks>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ModuleEntry.GetModules(System.UInt32)">
            <summary>
            Retrieves an array of all running threads for a specified process
            </summary>
            <returns>Any array of ModuleEntry classes</returns>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ModuleEntry.Name">
            <summary>
            The module name
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ModuleEntry.Path">
            <summary>
            The module path
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ModuleEntry.BaseAddress">
            <summary>
            The base address of the module in the context of the owning process. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ModuleEntry.Size">
            <summary>
            The size of the module, in bytes. 
            </summary>
        </member>
    </members>
</doc>
