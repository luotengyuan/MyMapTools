<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.Windows.Forms.AnimateCtl">
            <summary>
            Animates an image.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.IWin32Window">
             <summary>
             Provides an interface to expose Win32 HWND handles.
             </summary>
             <remarks>This interface is implemented on objects that expose Win32 HWND handles.
             The resultant handle can be used with Win32 API calls.
             <para>Unlike the desktop .NET Framework this interface is not implemented in the base <see cref="T:System.Windows.Forms.Control"/> class.
             However you can implement it on any class which derives from <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.Forms.Form"/>.
             The <see cref="P:OpenNETCF.Windows.Forms.IWin32Window.Handle"/> property can then be passed to native API functions such as those contained in the <see cref="T:OpenNETCF.Win32.Win32Window"/> class.</para></remarks>
             <example>
             <code>
             [VB]
             Imports OpenNETCF.Windows.Forms
             Imports OpenNETCF.Win32
             
             Public Class MyControl
            		Inherits System.Windows.Forms.Control
            		Implements IWin32Window
            		
            		Overridable ReadOnly Property Handle() As System.IntPtr
            			Get
            				Me.Capture = True
            				Dim thishandle As IntPtr
            				thishandle = Win32Window.GetCapture()
            				Me.Capture = False
            
            				Handle = thishandle
            			End Get
            		End Property
            		
             End Class
             </code>
             <code>
             [C#]
             using OpenNETCF.Windows.Forms;
             using OpenNETCF.Win32;
             
             public class MyControl : Control, IWin32Window
             {
            		
            		public IntPtr Handle
            		{
            			get
            			{
            				this.Capture = true;
            				IntPtr thishandle = Win32Window.GetCapture();
            				this.Capture = false;
            				
            				return thishandle;
            			}
            		}
             }</code>
             </example>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.IWin32Window.Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._bitmap">
            <summary>
            The bitmap to animate.  Can be a GIF or BMP
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._frameCount">
            <summary>
            The number of frames in the image
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._frameWidth">
            <summary>
            The width of a frame
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._frameHeight">
            <summary>
            The Height of the frame
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl.animating">
            <summary>
            Value to see if the control is animating
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._currentFrame">
            <summary>
            Number of frames available
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._loopCount">
            <summary>
            Number of times to loop the animation
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._loopCounter">
            <summary>
            Number of times the animation as looped
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl._delayInterval">
            <summary>
            Delay interval for the animation
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl.fTimer">
            <summary>
            The timer for the animation
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl.drawDirection">
            <summary>
            The direction of the animiation
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl.autoStartAnimation">
            <summary>
            Whether the animiation should autostart
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override the painBackground to avoid flickering
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.StartAnimation">
            <summary>
            Begin animating the image
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.StopAnimation">
            <summary>
            Stops the current animation
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.DrawFrame(System.Drawing.Graphics)">
            <summary>
            Draw the frame
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.Draw(System.Int32,System.Drawing.Graphics)">
            <summary>
            Draw the image
            </summary>
            <param name="iframe"></param>
            <param name="g"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.BackgroundImageColor(System.Drawing.Image)">
            <summary>
            Gets the background color to make transparent
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.ResizeControl">
            <summary>
            Resize the animation control
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.AnimateCtl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.AnimateCtl.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Animates an image.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.AnimDrawDirection">
            <summary>
            The direction of the sequence of images in the image file.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.DrawDirection">
            <summary>
            The direction of the sequence of images in the image file.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.Image">
            <summary>
            The image to animate.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.Height">
            <summary>
            Gets or sets the Height of the control
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.Width">
            <summary>
            Gets or sets the width of the control
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.FrameWidth">
            <summary>
            Gets or sets  the width of the frame to animate
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.FrameHeight">
            <summary>
            Gets or sets  the height of the frame to animate
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.DelayInterval">
            <summary>
            Gets or sets the delay interval for the control
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.LoopCount">
            <summary>
            Gets or sets  the amount of times to loop the animation. -1 to loop infinitly.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.AnimateCtl.AutoStartAnimation">
            <summary>
            Gets or sets whether the animation should auto start.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Application2">
            <summary>
            Provides static (Shared in Visual Basic) methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Run(System.Boolean)">
            <summary>
            Begins running a standard application message loop on the current thread, without a form.  
            </summary>
            <param name="runAsSingletonApp">When <b>true</b>, if an existing instance of the app is already running, the current application instance will simply exit</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Run(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Begins running a standard application message loop on the current thread, and makes the specified form visible.
            </summary>
            <param name="mainForm">Form on which main message loop runs</param>
            <param name="runAsSingletonApp">When <b>true</b>, if an existing instance of the app is already running, the current application instance will simply exit and the already running app will come to the fore</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Run(System.Windows.Forms.Form,System.Boolean,System.Boolean)">
            <summary>
            Begins running a standard application message loop on the current thread, and makes the specified form visible.
            </summary>
            <param name="mainForm">Form on which main message loop runs</param>
            <param name="runAsSingletonApp">When <b>true</b>, if an existing instance of the app is already running, the current application instance will simply exit and the already running app will come to the fore</param>
            <param name="displayMainForm">When set to true, the main form will be automatically displayed, else the app will be responsible for showing the Form</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Run">
            <summary>
            Begins running a standard application message loop on the current thread, without a form
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Run(System.Windows.Forms.Form)">
            <summary>
            Begins running a standard application message loop on the current thread, and makes the specified form visible.
            <seealso cref="T:System.Windows.Forms.Form"/>
            </summary>
            <param name="mainForm">Form on which main message loop runs</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.Exit">
            <summary>
            Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.DoEvents">
            <summary>
            Processes all Windows messages currently in the message queue.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.AddMessageFilter(OpenNETCF.Windows.Forms.IMessageFilter)">
            <summary>
            Adds a message filter to monitor Windows messages as they are routed to their destinations
            <seealso cref="T:OpenNETCF.Windows.Forms.IMessageFilter"/>
            </summary>
            <param name="value">The implementation of the IMessageFilter interface you want to install</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Application2.RemoveMessageFilter(OpenNETCF.Windows.Forms.IMessageFilter)">
            <summary>
            Removes a message filter from the message pump of the application
            <seealso cref="T:OpenNETCF.Windows.Forms.IMessageFilter"/>
            </summary>
            <param name="value">The implementation of the IMessageFilter to remove from the application.</param>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.Application2.ThreadExit">
            <summary>
            Occurs when Application2.Run exits
            <seealso cref="M:OpenNETCF.Windows.Forms.Application2.Exit"/>
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.Application2.ApplicationExit">
            <summary>
            Occurs when the application is about to shut down.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Application2.MessageLoop">
            <summary>
            Gets a value indicating whether a message loop exists on this thread. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Application2.StartupPath">
            <summary>
            Gets the path for the currently executing assembly file, not including the executable name.
            </summary>
            <value>The path for the executable file that started the application.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Application2.ExecutablePath">
            <summary>
            Gets the path for the executable file that started the application, including the executable name.
            </summary>
            <value>The path and executable name for the executable file that started the application.</value>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.BatteryChargeStatus">
            <summary>
            Defines identifiers that indicate the current battery charge level or charging state information.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.High">
            <summary>
            Indicates a high level of battery charge.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.Low">
            <summary>
            Indicates a low level of battery charge.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.Critical">
            <summary>
            Indicates a critically low level of battery charge.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.Charging">
            <summary>
            Indicates a battery is charging.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.NoSystemBattery">
            <summary>
            Indicates that no battery is present.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChargeStatus.Unknown">
            <summary>
            Indicates an unknown battery condition.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.BatteryChemistry">
            <summary>
            Identifies the chemistry of the devices main battery.
            </summary>
            <remarks>This enumeration is used by the <see cref="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryChemistry"/> property.</remarks>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.Alkaline">
            <summary>
            Alkaline battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.NiCad">
            <summary>
            Nickel Cadmium battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.NiMH">
            <summary>
            Nickel Metal Hydride battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.Lion">
            <summary>
            Lithium Ion battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.LiPoly">
            <summary>
            Lithium Polymer battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.ZincAir">
            <summary>
            Zinc Air battery.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryChemistry.Unknown">
            <summary>
            Battery chemistry is unknown.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.BatteryLife">
             <summary>
             Represents a control that indicates the percentage of remaining battery life.
             </summary>
             <remarks>This control will not work as expected on the emulator since, in the current release, battery life is not emulated.</remarks>
             <example>
             <code>
             [C#]
             public class Form1 : System.Windows.Forms.Form
             {
            	private OpenNETCF.Windows.Forms.BatteryLife batteryLife1;
            	private System.Windows.Forms.Button button1;
            
            	public Form1()
            	{
            		batteryLife1 = new OpenNETCF.Windows.Forms.BatteryLife();
            		button1 = new System.Windows.Forms.Button();
            		button1.Click += new System.EventHandler(button1_Click);
            	}
            
            	private void button1_Click(object sender, EventArgs e)
            	{
            		// Call the UpdateBatteryLife method when the percentage bar should be refreshed with the latest battery life status.
            		batteryLife1.UpdateBatteryLife();
            	}
             }
             </code>
             </example>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.#ctor">
            <summary>
            Initializes a new instance of the BatteryLife class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.Finalize">
            <summary>
            Allows an instance of the BatteryLife class to attempt to free resources and perform other cleanup operations.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.Dispose">
            <summary>
            Releases all resources used by the BatteryLife instance.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the BatteryLife instance and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A PaintEventArgs that contains information about the control to paint.</param>
            <remarks>
            <b>Notes to Inheritors:</b> With the the hope of preventing noticeable flicker, this method has be overridden to do nothing. Therefore, all painting should be done in the OnPaint method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.UpdateBatteryLife">
            <summary>
            Updates the display that represents the percentage of remaining battery life.
            </summary>
            <remarks>In addition to updating the display this method also refreshes the value of the PowerStatus property.</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryLife.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
             <summary>
             Represents a control that indicates the percentage of remaining battery life.
             </summary>
             <remarks>This control will not work as expected on the emulator since, in the current release, battery life is not emulated.</remarks>
             <example>
             <code>
             [C#]
             public class Form1 : System.Windows.Forms.Form
             {
            	private OpenNETCF.Windows.Forms.BatteryLife batteryLife1;
            	private System.Windows.Forms.Button button1;
            
            	public Form1()
            	{
            		batteryLife1 = new OpenNETCF.Windows.Forms.BatteryLife();
            		button1 = new System.Windows.Forms.Button();
            		button1.Click += new System.EventHandler(button1_Click);
            	}
            
            	private void button1_Click(object sender, EventArgs e)
            	{
            		// Call the UpdateBatteryLife method when the percentage bar should be refreshed with the latest battery life status.
            		batteryLife1.UpdateBatteryLife();
            	}
             }
             </code>
             </example>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryLife.BorderColor">
            <summary>
            Gets or sets the color of the border for the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color" /> value that represents the border color of the control. The default is Color.Black.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryLife.PercentageBarColor">
            <summary>
            Gets or sets the color used to display the percentage of remaining battery life.
            </summary>
            <value>A <see cref="T:System.Drawing.Color" /> value that represents the color used to display the percentage of remaining battery life. The default is SystemColors.Highlight.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryLife.PowerStatus">
            <summary>
            Gets the system power status information.
            </summary>
            <value>A <see cref="T:OpenNETCF.Windows.Forms.PowerStatus" /> that represents the system power status information.</value>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.BatteryMonitor">
             <summary>
             Represents a component that monitors the battery level.
             </summary>
             <example>
             <code>
             [C#]
             public class Form1 : System.Windows.Forms.Form
             {
            	private System.ComponentModel.IContainer components = null;
            	private OpenNETCF.Windows.Forms.BatteryMonitor batteryMonitor1;
            
            	public Form1()
            	{
            		batteryMonitor1 = new OpenNETCF.Windows.Forms.BatteryMonitor(components);
            		batteryMonitor1.PrimaryBatteryLifeTrigger = 75;
            		batteryMonitor1.PrimaryBatteryLifeNotification += new System.EventHandler(batteryMonitor1_PrimaryBatteryLifeNotification);
            		batteryMonitor1.Enabled = true;
            	}
            
            	protected override void Dispose(bool disposing)
            	{
            		if ((disposing) &amp;&amp; (components != null))
            		{
            			components.Dispose();
            		}
            		base.Dispose(disposing);
            	}
            
            	private void batteryMonitor1_PrimaryBatteryLifeNotification(object sender, EventArgs e)
            	{
            		// Do something here.
            	}
             }
             </code>
             </example>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.BatteryMonitor.DefaultBatteryLifePercent">
            <summary>
            Specifies the default value for the PrimaryBatteryLifeTrigger property.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.#ctor">
            <summary>
            Initializes a new instance of the BatteryMonitor class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the BatteryMonitor class with the specified container.
            </summary>
            <param name="container">An IContainer that represents the container for the BatteryMonitor.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.Finalize">
            <summary>
            Allows an instance of the BatteryMonitor class to attempt to free resources and perform other cleanup operations.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.Dispose">
            <summary>
            Releases all resources used by the BatteryMonitor instance.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the BatteryMonitor instance and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.OnPrimaryBatteryLifeNotification(System.EventArgs)">
            <summary>
            Raises the PrimaryBatteryLifeNotification event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.BatteryMonitor.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            The event handler used to determine if notifications should be sent to subscribers.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryMonitor.Enabled">
            <summary>
            Gets or sets a value that represents whether the power notification events will be raised.
            </summary>
            <value>A <see cref="T:System.Boolean" /> value that represents whether the power notification events will be raised. The default is <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryMonitor.Interval">
            <summary>
            Gets or sets a value that represents how often the system power is queried, in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32" /> value that represents how often the system power is queried, in milliseconds. The default is 1000 (1 second).</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.BatteryMonitor.PrimaryBatteryLifeTrigger">
            <summary>
            Gets or sets a value that represents the percentage at which the PrimaryBatteryLifeNotification event should be raised.
            </summary>
            <value>A <see cref="T:System.Int32" /> value that represents the percentage at which the PrimaryBatteryLifeNotification event should be raised. The default is the value of the DefaultBatteryLifePercent constant.</value>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.BatteryMonitor.PrimaryBatteryLifeNotification">
            <summary>
            Occurs when the primary battery life percentage is equal to the value of the PrimaryBatteryLifeTrigger property.
            </summary>
            <remarks>
            The Enabled property will be set to <b>false</b> when this event is raised. This prevents 
            event handlers from being called multiple times while the trigger is satisfied. To receive 
            further power notifications the Enabled property must once again be set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Button2">
            <summary>
            Represents a button control.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ButtonBase2">
            <summary>
            Implements the basic functionality common to button controls.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.#ctor">
            <summary>
            Initializes the base information for a class derived from ButtonBase2.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ButtonBase2 and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.DisposeDoubleBuffer">
            <summary>
            Clean up the objects used to represent the double buffer for the presentation of the control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.DrawDoubleBuffer(System.Drawing.Graphics)">
            <summary>
            Draws the contents of the buffer to the control if the presentation was double buffered.
            </summary>
            <param name="controlGraphics">A <see cref="T:System.Drawing.Graphics"/> object representing the drawing surface of the control in which to output the contents of the buffer.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.GetPresentationMedium(System.Drawing.Graphics)">
            <summary>
            Gets a reference to the proper drawing medium used to update the presentation of the control.
            </summary>
            <param name="controlGraphics">A <see cref="T:System.Drawing.Graphics"/> object representing the drawing surface of the control.</param>
            <returns>A <see cref="T:System.Drawing.Graphics"/> object that should be used to update the presentation of the control.</returns>
            <remarks>
            The <see cref="T:System.Drawing.Graphics"/> object returned from this method will either be a reference to the buffer, if the DoubleBuffered property is set to <b>true</b>, or the reference to the drawing surface of the control that was provided as the argument.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.IsSequentialPaintingComplete(System.Int32)">
            <summary>
            Determines if the specified sequential painting token was the last one registered.
            </summary>
            <param name="sequentialPaintingToken">A <see cref="T:System.Int32"/> that specifies the sequential painting token to compare with the last registered token.</param>
            <returns>A <see cref="T:System.Boolean"/> that is set to <b>true</b> if the specified sequential painting token was the last one registered; otherwise, <b>false</b>.</returns>
            <remarks>
            A control can register for sequential painting by calling the RegisterSequentialPainting method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.NotifyPaintingComplete(System.Int32,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Indicates that a certain class (generation) in the control hierarchy has completed updating the presentation.
            </summary>
            <param name="sequentialPaintingToken">A <see cref="T:System.Int32"/> that specifies the sequential painting token of the class (generation) that has completed updating the presentation.</param>
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that references the original paint argument passed to the OnPaint method.</param>
            <remarks>
            If the sequential painting token argument represents the last token registered, this method will raise the Paint event, using the double buffer <see cref="T:System.Drawing.Graphics"/> object if the DoubleBuffered property is set to <b>true</b>, and will also draw the contents of the buffer to the control, if applicable.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.OnPaint(System.Windows.Forms.PaintEventArgs)">
             <summary>
             Raises the Paint event.
             </summary>
             <param name="e">A PaintEventArgs that contains the event data.</param>
             <remarks>
             <b>Notes to Inheritors:</b> See the example section for the recommended pattern to ensure that double buffering and structured paint sequencing are both accommodated.
             </remarks>
             <example>
             <code>
             [C#]
             namespace MyCompanyName.TechnologyName
             {
               public class Button : OpenNETCF.Windows.Forms.ButtonBase2
               {
                 private readonly int sequentialPaintingToken = Int32.MinValue;
            
                 public Button()
                 {
                   // Note: The RegisterSequentialPainting method should only be called if the OnPaint method, 
                   // in this class, is to be overridden.
                   // Register in the sequential painting process so that, primarily, if this class is the most 
                   // derived class in the hierarchy that needs to update the presentation of the control, the 
                   // Paint event may be delayed until all classes in the hierarchy have had a chance to update 
                   // the presentation.
                   this.sequentialPaintingToken = base.RegisterSequentialPainting();
            
                   // Note: Double buffering does not need to be enabled for sequential painting to take place.
                   // Request that the presentation be buffered before being drawn to the control.
                   base.DoubleBuffered = true;
                 }
            
                 protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
                 {
                   // Call the base classes OnPaint method to ensure that all appropriate base painting has been 
                   // done prior to performing the presentation contribution of this class.
                   base.OnPaint(e);
            
                   // Get a reference to the proper Graphics object used to update the presentation of the control.
                   Graphics presentation = base.GetPresentationMedium(e.Graphics);
            
                   // ...
                   // presentation.FillRectangle(Brush, X, Y, Width, Height);
                   // ...
            
                   // Indicate that this class is done updating the presentation. If the sequential paint token 
                   // for this class was the last one registered, then the Paint event will be triggered, and, 
                   // if the presentation was double buffered, the contents of the buffer will be drawn to the 
                   // control.
                   base.NotifyPaintingComplete(this.sequentialPaintingToken, e);
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A PaintEventArgs that contains information about the control to paint.</param>
            <remarks>
            <b>Notes to Inheritors:</b> With the the hope of preventing noticeable flicker, this method has be overridden to do nothing. Therefore, all painting should be done in the OnPaint method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.RaisePaintEvent(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Explicitly raises the Paint event with double buffer awareness.
            </summary>
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that references the original paint argument passed to the OnPaint method.</param>
            <remarks>
            If the DoubleBuffered property is set to <b>true</b>, the double buffer <see cref="T:System.Drawing.Graphics"/> object will be passed through the event.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.RegisterSequentialPainting">
            <summary>
            Registers the caller in the sequential painting process by generating a token that the caller can use to identify its sequencing order.
            </summary>
            <returns>A <see cref="T:System.Int32"/> that represents a sequential painting token.</returns>
            <remarks>
            The token generated by this method should be stored by the caller and passed back to this class when calling methods such as NotifyPaintingComplete or IsSequentialPaintingComplete.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ResetImage">
            <summary>
            Resets the Image property to its default value.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ResetImageAlign">
            <summary>
            Resets the ImageAlign property to its default value.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ResetTextAlign">
            <summary>
            Resets the TextAlign property to its default value.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ShouldSerializeImage">
            <summary>
            Indicates whether the Image property should be persisted.
            </summary>
            <returns><b>true</b> if the property value has changed from its default; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ShouldSerializeImageAlign">
            <summary>
            Indicates whether the ImageAlign property should be persisted.
            </summary>
            <returns><b>true</b> if the property value has changed from its default; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.ShouldSerializeTextAlign">
            <summary>
            Indicates whether the TextAlign property should be persisted.
            </summary>
            <returns><b>true</b> if the property value has changed from its default; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.UpdateDoubleBuffer">
            <summary>
            Creates, or recreates, the objects used to represent the double buffer for the presentation of the control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ButtonBase2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Implements the basic functionality common to button controls.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> that represents the image to display in the background of the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.Image">
            <summary>
            Gets or sets the image that is displayed on the control.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> displayed on the control. The default value is a null reference (Nothing in Visual Basic).</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.ImageAlign">
            <summary>
            Gets or sets the alignment of the image on the control.
            </summary>
            <value>One of the <see cref="T:OpenNETCF.Drawing.ContentAlignment2"/> values. The default value is MiddleCenter.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.ImageIndex">
            <summary>
            Gets or sets the image list index value of the image displayed on the control.
            </summary>
            <value>A zero-based index, which represents the image position in a <see cref="T:System.Windows.Forms.ImageList"/>. The default is -1.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.ImageList">
            <summary>
            Gets or sets the image list that contains the image displayed on the control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.ImageList"/>. The default value is a null reference (Nothing in Visual Basic).</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.IsDisposed">
            <summary>
            Gets a value indicating whether the control has been disposed.
            </summary>
            <value><b>true</b> if the control has been disposed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.TextAlign">
            <summary>
            Gets or sets the alignment of the text on the control.
            </summary>
            <value>One of the <see cref="T:OpenNETCF.Drawing.ContentAlignment2"/> values. The default value is MiddleCenter.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.DoubleBuffer">
            <summary>
            Gets the object used to represent the double buffer for the presentation of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Graphics"/> object used to double buffer the presentation of the control.</value>
            <remarks>
            The DoubleBuffered property must be set to <b>true</b> for this property to return a valid object. If the DoubleBuffered property is set to <b>false</b>, the default, then this property will return a null reference (Nothing in Visual Basic).
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.DoubleBuffered">
            <summary>
            Gets or sets a value indicating whether the presentation of the control is double buffered.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is set to <b>true</b> if the presentation of the control is double buffered; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>
            See the example section of the OnPaint method for the recommended pattern to ensure that double buffering is accommodated.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ButtonBase2.IsDefault">
            <summary>
            Gets or sets a value indicating whether the button control is the default button.
            </summary>
            <value><b>true</b> if the button control is the default button; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.IButtonControl">
            <summary>
            Allows a control to act like a button on a form.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)">
            <summary>
            Notifies a control that it is the default button so that its appearance and behavior are adjusted accordingly.
            </summary>
            <param name="value"><b>true</b> if the control should behave as a default button; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.IButtonControl.PerformClick">
            <summary>
            Generates a Click event for the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.IButtonControl.DialogResult">
            <summary>
            Gets or sets the value returned to the parent form when the button is clicked.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</value>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.#ctor">
            <summary>
            Initializes a new instance of the Button2 class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.GetLocationFromContentAlignment(OpenNETCF.Drawing.ContentAlignment2,System.Drawing.SizeF,System.Drawing.Rectangle)">
            <summary>
            Determines the location at which the content should be displayed, on the control, based on the indicated alignment value.
            </summary>
            <param name="alignment">The <see cref="T:OpenNETCF.Drawing.ContentAlignment2"/> that represents how the content should be positioned on the control.</param>
            <param name="contentSize">The <see cref="T:System.Drawing.SizeF"/> containing the width and height of the content to display on the control.</param>
            <param name="clipRect">The <see cref="T:System.Drawing.Rectangle"/> that represents the allotted area in which the content may be displayed.</param>
            <returns>A <see cref="T:System.Drawing.Point"/> containing the x and y coordinates at which the content should be displayed.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.NotifyDefault(System.Boolean)">
            <summary>
            Notifies the button whether it is the default button so that it can adjust its appearance accordingly.
            </summary>
            <param name="value"><b>true</b> if the button is to have the appearance of the default button; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the KeyPress event.
            </summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the LostFocus event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
            <remarks>
            <b>Notes to Inheritors:</b> See the example section, in the <see cref="T:OpenNETCF.Windows.Forms.ButtonBase2"/> control documentation, for the recommended pattern to ensure that double buffering and structured paint sequencing are both accommodated.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.PerformClick">
            <summary>
            Generates a Click event for a button.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Button2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents a button control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.ShowFocusBorder">
            <summary>
            Determines if the control will show a border when it has focus
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.ActiveBackColor">
            <summary>
            Gets or sets the background color for the control in an active state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the active background color of the control. The default is SystemColors.ControlText.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.ActiveBackgroundImage">
            <summary>
            Gets or sets the background image displayed for the control in an active state.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> that represents the active image to display in the background of the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.ActiveBorderColor">
            <summary>
            Gets or sets the color of the border for the control in an active state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the border color of the control. The default is Color.Black.</value>
            <remarks>
            This property is only valid when the BorderStyle property is set to FixedSingle.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.ActiveForeColor">
            <summary>
            Gets or sets the foreground color for the control in an active state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the active foreground color of the control. The default is SystemColors.Control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.BorderColor">
            <summary>
            Gets or sets the color of the border for the control in an enabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the border color of the control. The default is Color.Black.</value>
            <remarks>
            This property is only valid when the BorderStyle property is set to FixedSingle.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.BorderStyle">
            <summary>
            Gets or sets the style of the border for the control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default is FixedSingle.</value>
            <remarks>
            It is recommended that applications targeting the broad Windows platform use the Fixed3D value, and applications targeting either the Pocket PC or Smartphone platform use the default, FixedSingle.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.DialogResult">
            <summary>
            Gets or sets a value that is returned to the parent form when the button is activated.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values. The default value is None.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.DisabledBackColor">
            <summary>
            Gets or sets the background color for the control in a disabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the disabled background color of the control. The default is SystemColors.Control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.DisabledBackgroundImage">
            <summary>
            Gets or sets the background image displayed for the control in a disabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> that represents the disabled image to display in the background of the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.DisabledBorderColor">
            <summary>
            Gets or sets the color of the border for the control in a disabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the disabled border color of the control.</value>
            <remarks>
            This property is only valid when the BorderStyle property is set to FixedSingle.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.DisabledForeColor">
            <summary>
            Gets or sets the foreground color for the control in a disabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the disabled foreground color of the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Button2.TransparentImage">
            <summary>
            Gets or sets a value indicating whether the foreground image for the control contains transparency.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is set to <b>true</b> if the foreground image of the control contains transparency; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <remarks>
            The color of the top-left pixel in the foreground image is used as the transparency key.
            </remarks>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.CharacterCasing">
            <summary>
            Specifies the case of characters in a <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> control. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.CharacterCasing.Normal">
            <summary>
            The case of characters is left unchanged. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.CharacterCasing.Upper">
            <summary>
            Converts all characters to uppercase.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.CharacterCasing.Lower">
            <summary>
            Converts all characters to lowercase.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.CheckBox2">
            <summary>
            Represents an enhanced CheckBox with similar functionality that's available in the .NET Framework.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.#ctor">
            <summary>
            Initializes a new instance of the CheckBox2 class
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.CheckBox.CheckStateChanged event.  
            </summary>
            <param name="e">A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Scales a controls location, size, padding and margin.
            </summary>
            <param name="factor"></param>
            <param name="specified"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the PaintEvent.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the LostFocus event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the ParentChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.CheckBox2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the OnKeyPress event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the OnKeyUp event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.DrawFocusRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            New for v2.1.  Draws a focus rectangle similar to WM5 functionality.
            </summary>
            <param name="checkRect"></param>
            <param name="textRect"></param>
            <version>2.1</version>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CheckBox2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents an enhanced CheckBox with similar functionality that's available in the .NET Framework.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.CheckBox2.CheckStateChanged">
            <summary>
            Occurs when the value of the CheckBox.CheckState property changes.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.CheckAlign">
            <summary>
            Gets or sets the alignment of the checkBox.
            </summary>
            <exception cref="T:System.NotSupportedException">CheckBox2 does not support ContentAlignment.TopCenter.</exception>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.CheckState">
            <summary>
            Gets or sets the state of the check box.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.BorderStyle">
            <summary>
            Gets or sets the border style color of the control. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.Checked">
            <summary>
            Gets or set a value indicating whether the check box is in the checked state.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.AutoCheck">
            <summary>
             Gets or set a value indicating whether the Checked or CheckState values and the check box's appearance are automatically changed when the check box is clicked.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.ForeColor">
            <summary>
            Gets or sets the color of the text of the control. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.CheckBoxColor">
            <summary>
            Gets or sets the color of the checkbox itself in the control. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.BackColor">
            <summary>
            Gets or sets the background color for the control.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CheckBox2.DrawFocusedRectangle">
            <summary>
            New in v2.1. Gets or Sets the value indicating if the focused rectangle should be drawn.
            </summary>
            <version>2.1</version>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Clipboard2">
            <summary>
            Provides methods to place data on and retrieve data from the system clipboard.
            </summary>
            <remarks>For a list of predefined formats to use with the Clipboard class, see the <see cref="T:System.Windows.Forms.DataFormats"/> class.
            <para>Call <see cref="M:OpenNETCF.Windows.Forms.Clipboard2.SetDataObject(System.Object)"/> to put data on the clipboard.</para>
            <para>Place data on the clipboard in multiple formats to maximize the possibility that a target application, whose format requirements you might not know, can successfully retrieve the data.</para>
            <para>Call <see cref="M:OpenNETCF.Windows.Forms.Clipboard2.GetDataObject"/> to retrieve data from the clipboard.
            The data is returned as an object that implements the <see cref="T:System.Windows.Forms.IDataObject"/> interface.
            Use the methods specified by <see cref="T:System.Windows.Forms.IDataObject"/> and fields in <see cref="T:System.Windows.Forms.DataFormats"/> to extract the data from the object. 
            If you do not know the format of the data you retrieved, call the <see cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)"/> method of the <see cref="T:System.Windows.Forms.IDataObject"/> interface to get a list of all formats that data is stored in.
            Then call the <see cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)"/> method of the <see cref="T:System.Windows.Forms.IDataObject"/> interface, and specify a format that your application can use.</para>
            <para>All Windows applications share the system clipboard, so the contents are subject to change when you switch to another application.</para>.
            Supports only Unicode text and Image (Bitmap) formats.</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.Clear">
            <summary>
            Clears the contents of the Clipboard.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.ContainsData(System.String)">
            <summary>
            Determines if clipboard contains data in the specified format
            </summary>
            <param name="format">A clipboard format, see <see cref="T:System.Windows.Forms.DataFormats"/> for possible values.</param>
            <returns>True if clipboard contains specified format; otherwise False.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.ContainsImage">
            <summary>
            Determines if clipboard contains an Image.
            </summary>
            <returns>True if clipboard contains Image; otherwise False.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.ContainsText">
            <summary>
            Determines if clipboard contains Text.
            </summary>
            <returns>True if clipboard contains Text; otherwise False.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.GetData(System.String)">
            <summary>
            Retrieves data from the Clipboard in the specified format.
            </summary>
            <param name="format">Clipboard format, see <see cref="T:System.Windows.Forms.DataFormats"/> for possible values.</param>
            <returns>Returns the specified data or null if not present.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.SetImage(System.Drawing.Image)">
            <summary>
            Adds an <see cref="T:System.Drawing.Image"/> to the Clipboard in the <see cref="F:System.Windows.Forms.DataFormats.Bitmap"/> format.
            </summary>
            <param name="image">An Image that must be placed on clipboard.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.GetImage">
            <summary>
            Retrieves an image from the Clipboard.
            </summary>
            <returns>An Image from clipboard or null if doesn't contain Image.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.SetText(System.String)">
            <summary>
            Places specified text onto the clipboard.
            </summary>
            <param name="text">Text to be added to the clipboard</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.GetText">
            <summary>
            Retrieves data from the clipboard as text.
            </summary>
            <returns>Text representation of clipboard contents</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.SetDataObject(System.Object)">
            <summary>
            Places nonpersistent data on the system clipboard.
            </summary>
            <param name="data">The data to place on the clipboard.</param>
            <exception cref="T:System.ArgumentNullException">The value of data is null.</exception>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Clipboard2.GetDataObject">
            <summary>
            Retrieves the data that is currently on the system clipboard.
            </summary>
            <returns>An <see cref="T:System.Windows.Forms.IDataObject"/> that represents the data currently on the clipboard, or null if there is no data on the clipboard.</returns>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DataFormats2">
            <summary>
            Provides static, predefined <see cref="T:System.Windows.Forms.Clipboard"/> format names.
            Use them to identify the format of data that you store in an <see cref="T:System.Windows.Forms.IDataObject"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DataFormats2.Bitmap">
            <summary>
            Specifies a Windows bitmap format.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DataFormats2.Text">
            <summary>
            Specifies the standard ANSI text format.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DataFormats2.UnicodeText">
            <summary>
            Specifies the standard Windows Unicode text format.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DataFormats2.WaveAudio">
            <summary>
            Specifies the wave audio format, which Windows Forms does not directly use.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DataFormats2.GetFormat(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenNETCF.Windows.Forms.DataFormats2.Format"/> with the Windows Clipboard numeric ID and name for the specified ID.
            </summary>
            <param name="id">The format ID.</param>
            <returns>A <see cref="T:OpenNETCF.Windows.Forms.DataFormats2.Format"/> that has the Windows Clipboard numeric ID and the name of the format.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DataFormats2.GetFormat(System.String)">
            <summary>
            Returns a <see cref="T:OpenNETCF.Windows.Forms.DataFormats2.Format"/> with the Windows Clipboard numeric ID and name for the specified format.
            </summary>
            <param name="format">The format name.</param>
            <returns>A <see cref="T:OpenNETCF.Windows.Forms.DataFormats2.Format"/> that has the Windows Clipboard numeric ID and the name of the format.</returns>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DataFormats2.Format">
            <summary>
            Represents a clipboard format type.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DataFormats2.Format.#ctor(System.String,System.Int32)">
            <summary>
            Create a new instance of Format.
            </summary>
            <param name="name">Name of the format.</param>
            <param name="id">ID number of the format.</param>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DataFormats2.Format.Name">
            <summary>
            Gets the name of this format.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DataFormats2.Format.Id">
            <summary>
            Gets the ID number for this format.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ColorDialog">
            <summary>
            Represents a common dialog box that displays available colors along with controls that allow the user to define custom colors.
            </summary>
            <remarks>The method <see cref="M:OpenNETCF.Windows.Forms.ColorDialog.ShowDialog"/> must be invoked to create this specific common dialog box.
            Use <see cref="P:OpenNETCF.Windows.Forms.ColorDialog.Color"/> to retrieve the color selected by the user.
            <para>When you create an instance of ColorDialog, some of the read/write properties are set to initial values.
            For a list of these values, see the ColorDialog constructor.</para></remarks>
            <platform><frameworks><compact>true</compact></frameworks></platform>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ColorDialog.#ctor">
             <summary>
             Initializes a new instance of the <b>ColorDialog</b> class.
             </summary>
             <remarks>When you create an instance of ColorDialog, the following read/write properties are set to initial values.
             <list type="table"><listheader><term>Property</term><term>Initial Value</term></listheader>
             <item><term>AllowFullOpen</term><term>true</term></item> 
             <item><term>Color</term><term>Color.Black</term></item>
            	<item><term>CustomColors</term><term>A null reference (Nothing in Visual Basic)</term></item>
             <item><term>FullOpen</term><term>false</term></item></list>
            
             <para>You can change the value for any of these properties through a separate call to the property.</para></remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ColorDialog.Dispose">
            <summary>
            Free up resources used by the <see cref="T:OpenNETCF.Windows.Forms.ColorDialog"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ColorDialog.ShowDialog(OpenNETCF.Windows.Forms.IWin32Window)">
            <summary>
            Runs a common dialog box with the specified owner.
            </summary>
            <param name="owner">Any object that implements <see cref="T:OpenNETCF.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
            <returns><see cref="T:System.Windows.Forms.DialogResult">DialogResult.OK</see> if the user clicks <b>OK</b> in the dialog box; otherwise, <see cref="T:System.Windows.Forms.DialogResult">DialogResult.Cancel</see>.</returns>
            <remarks>This version of the ShowDialog method allows you to specify a specific form or control that will own the dialog box that is shown.</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ColorDialog.ShowDialog">
            <summary>
            Runs a common dialog box.
            </summary>
            <returns>DialogResult.OK if the user clicks <b>OK</b> in the dialog box; otherwise, DialogResult.Cancel.</returns>
            <example>The following example uses the ColorDialog and illustrates creating and showing a dialog box.
            This example assumes that the method is called from within an existing form, that has a TextBox and Button placed on it.
            <para>Note:   This example shows how to use one of the overloaded versions of ShowDialog.
            For other examples that might be available, see the individual overload topics.</para>
            <code>[VB]
            Protected Sub button1_Click(sender As Object, e As System.EventArgs)
            	Dim MyDialog As New ColorDialog()
            	' Keeps the user from selecting a custom color.
            	MyDialog.AllowFullOpen = False
            	' Sets the initial color select to the current text color,
            	MyDialog.Color = textBox1.ForeColor
            	' Update the text box color if the user clicks OK 
            	If (MyDialog.ShowDialog() = DialogResult.OK) Then
            		textBox1.ForeColor =  MyDialog.Color
            End Sub</code>
            <code>[C#]
            protected void button1_Click(object sender, System.EventArgs e)
            {
            	ColorDialog MyDialog = new ColorDialog();
            	// Keeps the user from selecting a custom color.
            	MyDialog.AllowFullOpen = false ;
            	// Sets the initial color select to the current text color.
            	MyDialog.Color = textBox1.ForeColor ;
            	// Update the text box color if the user clicks OK 
            	if (MyDialog.ShowDialog() == DialogResult.OK)
            		textBox1.ForeColor =  MyDialog.Color;
            }
            </code></example>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ColorDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>true if the dialog box was successfully run; otherwise, false.</returns>
            <remarks>This method is invoked when the user of a common dialog box calls <see cref="M:OpenNETCF.Windows.Forms.ColorDialog.ShowDialog"/>.</remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.AllowFullOpen">
             <summary>
             Gets or sets a value indicating whether the user can use the dialog box to define custom colors.
             </summary>
             <value>true if the user can define custom colors; otherwise, false. The default is true</value>
             <remarks>When set to false, the associated button in the dialog box is disabled and the user cannot access the custom colors control in the dialog box.
             Windows CE supports the button, Pocket PC does not and this property has no effect.</remarks>
             <example>[Visual Basic, C#] The following example illustrates the creation of new ColorDialog.
             This example assumes that the method is called from within an existing form, that has a TextBox and Button placed on it.
             <code>[Visual Basic] 
             Protected Sub button1_Click(sender As Object, e As System.EventArgs)
            			Dim MyDialog As New ColorDialog()
            			' Keeps the user from selecting a custom color.
            			MyDialog.AllowFullOpen = False
            			' Sets the initial color select to the current text color,
            			MyDialog.Color = textBox1.ForeColor
            			
            			' Update the text box color if the user clicks OK 
            			If (MyDialog.ShowDialog() = DialogResult.OK) Then
            					textBox1.ForeColor =  MyDialog.Color
            			End If
            
            	End Sub 'button1_Click</code>
            	<code>[C#] 
            protected void button1_Click(object sender, System.EventArgs e)
            {
            		ColorDialog MyDialog = new ColorDialog();
            		// Keeps the user from selecting a custom color.
            		MyDialog.AllowFullOpen = false ;
            		// Sets the initial color select to the current text color.
            		MyDialog.Color = textBox1.ForeColor ;
            
            		// Update the text box color if the user clicks OK 
            		if (MyDialog.ShowDialog() == DialogResult.OK)
            			textBox1.ForeColor =  MyDialog.Color;
            }</code>
            </example>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.AnyColor">
            <summary>
            Gets or sets a value indicating whether the dialog box displays all available colors in the set of basic colors.
            </summary>
            <value>true if the dialog box displays all available colors in the set of basic colors; otherwise, false.
            The default value is false.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.Color">
             <summary>
             Gets or sets the color selected by the user.
             </summary>
             <value>The color selected by the user.
             If a color is not selected, the default value is black.</value>
             <remarks>The color selected by the user in the dialog box at run time, as defined in <see cref="T:System.Drawing.Color"/> structure</remarks>
             <example>[Visual Basic, C#] The following example illustrates the creation of new ColorDialog.
             This example assumes that the method is called from within an existing form, that has a TextBox and Button placed on it.
             <code>[Visual Basic] 
             Protected Sub button1_Click(sender As Object, e As System.EventArgs)
            			Dim MyDialog As New ColorDialog()
            			' Keeps the user from selecting a custom color.
            			MyDialog.AllowFullOpen = False
            			' Sets the initial color select to the current text color,
            			MyDialog.Color = textBox1.ForeColor
            			
            			' Update the text box color if the user clicks OK 
            			If (MyDialog.ShowDialog() = DialogResult.OK) Then
            					textBox1.ForeColor =  MyDialog.Color
            			End If
            
            	End Sub 'button1_Click</code>
            	<code>[C#] 
            protected void button1_Click(object sender, System.EventArgs e)
            {
            		ColorDialog MyDialog = new ColorDialog();
            		// Keeps the user from selecting a custom color.
            		MyDialog.AllowFullOpen = false ;
            		// Sets the initial color select to the current text color.
            		MyDialog.Color = textBox1.ForeColor ;
            
            		// Update the text box color if the user clicks OK 
            		if (MyDialog.ShowDialog() == DialogResult.OK)
            			textBox1.ForeColor =  MyDialog.Color;
            }</code>
            </example>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.CustomColors">
            <summary>
            Gets or sets the set of custom colors shown in the dialog box.
            </summary>
            <value>A set of custom colors shown by the dialog box.
            The default value is a null reference (Nothing in Visual Basic).</value>
            <remarks>Users can create their own set of custom colors.
            These colors are contained in an Int32 composed of the ARGB component (alpha, red, green, and blue) values necessary to create the color.
            For more information on the structure of this data, see <see cref="P:OpenNETCF.Windows.Forms.ColorDialog.Color"/>.
            Custom colors can only be defined if <see cref="P:OpenNETCF.Windows.Forms.ColorDialog.AllowFullOpen"/> is set to true (Not supported on Pocket PC).</remarks>
            <example>[Visual Basic, C#] The following example shows how to add an array of type Int32 representing custom colors to CustomColors.
            This example assumes that the code is run from within a Form.
            <code>[Visual Basic] 
            Dim MyDialog = New ColorDialog()
            'Allows the user to select or edit a custom color.
            MyDialog.AllowFullOpen = True
            'Assigns an array of custom colors to the CustomColors property.
            MyDialog.CustomColors = New Integer() {6916092, 15195440, 16107657, 1836924, _
            	3758726, 12566463, 7526079, 7405793, 6945974, 241502, 2296476, 5130294, _
            	3102017, 7324121, 14993507, 11730944}
            'Sets the initial color select to the current text color,
            'so that if the user cancels out, the original color is restored.
            MyDialog.Color = Me.BackColor
            MyDialog.ShowDialog()
            Me.BackColor = MyDialog.Color</code>
            <code>[C#] 
            System.Windows.Forms.ColorDialog MyDialog = new ColorDialog();
            // Allows the user to select or edit a custom color.
            MyDialog.AllowFullOpen = true ;
            // Assigns an array of custom colors to the CustomColors property
            MyDialog.CustomColors = new int[] {6916092, 15195440, 16107657, 1836924,
            	3758726, 12566463, 7526079, 7405793, 6945974, 241502, 2296476, 5130294,
            	3102017, 7324121, 14993507, 11730944,};
            // Sets the initial color select to the current text color,
            // so that if the user cancels out, the original color is restored.
            MyDialog.Color = this.BackColor;
            MyDialog.ShowDialog();
            this.BackColor =  MyDialog.Color;</code>
            </example>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.FullOpen">
            <summary>
            Gets or sets a value indicating whether the controls used to create custom colors are visible when the dialog box is opened.
            </summary>
            <value>true if the custom color controls are available when the dialog box is opened; otherwise, false.
            The default value is false.</value>
            <remarks>By default, the custom color controls are not visible when the dialog box is first opened.
            You must click the Custom Colors button to display them.
            <para>Note:   If <see cref="P:OpenNETCF.Windows.Forms.ColorDialog.AllowFullOpen"/> is false, then <b>FullOpen</b> has no effect.</para></remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ColorDialog.SolidColorOnly">
            <summary>
            Gets or sets a value indicating whether the dialog box will restrict users to selecting solid colors only.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.OnParentChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.FindString(System.String)">
            <summary>
            Finds the first item in the combo box that starts with the specified string.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.FindString(System.String,System.Int32)">
            <summary>
            Finds the first item in the combo box that starts with the specified string.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.FindStringExact(System.String)">
            <summary>
            Finds the first item in the combo box that matches the specified string.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.FindStringExact(System.String,System.Int32)">
            <summary>
            Finds the first item after the specified index that matches the specified string.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ComboBox2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ComboBox2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ComboBox2.DropDownWidth">
            <summary>
            Gets or sets the width of the of the drop-down portion of a combo box.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ComboBox2.DroppedDown">
            <summary>
            Gets a value indicating whether the combo box is displaying its drop-down portion.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ComboBox2.DropDown">
            <summary>
            Show or hides the list of the combobox that has the DropDown or DropDownList
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Control2">
            <summary>
            Extends the standard <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
            <seealso cref="T:System.Windows.Forms.Control"/>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.Control2.childHandle">
            <summary>
            The child handle of the control
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.#ctor">
            <summary>
            Creates a new <see cref="T:OpenNETCF.Windows.Forms.Control2"/> object.
            </summary>		
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.InitCommonControls(System.Int32)">
            <summary>
            Calls InitCommonControlsEx for the specified classes.
            </summary>
            <param name="controlClasses">Mask of control class groups.</param>
            <remarks>Not desktop compatible</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.CreateControl">
            <summary>
            Forces the creation of the control, including the creation of the handle and any child controls.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Paint event.
            </summary>
            <param name="e">A System.Windows.Forms.PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.OnParentChanged(System.EventArgs)">
            <summary>
            Occurs when the control is associated with a new Parent.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the control to the specified location and size.
            </summary>
            <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top"/> property value of the control.</param>
            <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width"/> property value of the control.</param>
            <param name="height"> The new <see cref="P:System.Windows.Forms.Control.Height"/> property value of the control.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.DefWndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            It is an error to call this method when the <see cref="P:System.Windows.Forms.Control.Handle"/> property is 0.  
            </summary>
            <param name="m">A <see cref="T:Microsoft.WindowsCE.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.Windows.Forms.Control2"/> and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.InvokeRequiredForControl(System.Windows.Forms.Control)">
            <summary>
            Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on. 
            </summary>
            <param name="c">Control which must be checked that it's created on a different thread than the calling thread.</param>
            <returns>true if the control was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Control2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Extends the standard <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
            <seealso cref="T:System.Windows.Forms.Control"/>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.BorderStyle">
            <summary>
            Gets or sets the border style for the control.
            </summary>
            <value>One of the <see cref="P:OpenNETCF.Windows.Forms.Control2.BorderStyle"/> values.
            Fixed3D is interpreted the same as FixedSingle.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.Created">
            <summary>
            Gets a value indicating whether the control has been created.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.DesignMode">
            <summary>
            Gets a value indicating whether a control is being used on a design surface.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.RecreatingHandle">
            <summary>
            Gets a value indicating whether the control is currently re-creating its handle.
            </summary>
            <remarks>true if the control is currently re-creating its handle; otherwise, false.</remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Control2.ModifierKeys">
            <summary>
            Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Windows.Forms.Keys"/> values.
            The default is <see cref="F:System.Windows.Forms.Keys.None"/>.</value>
            <example>The following code example hides a button when the CTRL key is pressed while the button is clicked. This example requires that you have a Button named button1 on a Form.
            <code>[VB]
            Private Sub button1_Click(sender As Object, e As EventArgs) Handles button1.Click
               ' If the CTRL key is pressed when the 
               ' control is clicked, hide the control. 
               If Control.ModifierKeys = Keys.Control Then
                  CType(sender, Control).Hide()
               End If
            End Sub
            </code>
            <code>[C#]
            private void button1_Click(object sender, System.EventArgs e)
            {
              /* If the CTRL key is pressed when the 
                 * control is clicked, hide the control. */
              if(Control.ModifierKeys == Keys.Control)
              {
                 ((Control)sender).Hide();
              }
            }
            </code></example>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.CreateParams">
            <summary>
            Encapsulates the information needed when creating a control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.CreateParams.#ctor">
            <summary>
            Initializes a new instance of the CreateParams class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Caption">
            <summary>
            Gets or sets the control's initial text.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.ClassName">
            <summary>
            Gets or sets the name of the Windows class to derive the control from.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.ClassStyle">
            <summary>
            Gets or sets a bitwise combination of class style values.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Style">
            <summary>
            Gets or sets a bitwise combination of window style values.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Param">
            <summary>
            Gets or sets additional parameter information needed to create the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.ExStyle">
            <summary>
            Gets or sets a bitwise combination of extended window style values.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Height">
            <summary>
            Gets or sets the initial height of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Parent">
            <summary>
            Gets or sets the control's parent.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Width">
            <summary>
            Gets or sets the initial width of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.X">
            <summary>
            Gets or sets the initial left position of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.CreateParams.Y">
            <summary>
            Gets or sets the initial top position of the control.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.IMessageFilter">
            <summary>
            Defines a message filter interface.
            </summary>
            <remarks>This interface allows an application to capture a message before it is dispatched to a control or form.
            <para>A class that implements the IMessageFilter interface can be added to the application's message pump to filter out a message or perform other operations before the message is dispatched to a form or control. To add the message filter to an application's message pump, use the <see cref="M:OpenNETCF.Windows.Forms.ApplicationEx.AddMessageFilter(OpenNETCF.Windows.Forms.IMessageFilter)"/> method in the <see cref="T:OpenNETCF.Windows.Forms.ApplicationEx"/> class.</para></remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.IMessageFilter.PreFilterMessage(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched.
            </summary>
            <param name="m">The message to be dispatched. You cannot modify this message.</param>
            <returns>true to filter the message and stop it from being dispatched; false to allow the message to continue to the next filter or control.</returns>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Cursor2">
            <summary>
            Implements showing and hiding the cursor.  
            <example>
            using(new Cursor2())
            {
                //Do your long procudure
            }//cursor will automatically be hidden
            </example>
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.Cursor2._refCount">
            <summary>
            Reference count to see if the cursor should be hidden or not
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Cursor2.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Cursor2.Dispose">
            <summary>
            Hides the cursor if there are no more references
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DateTimePicker2">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.DateTimePicker"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DateTimePicker2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Windows.Forms.DateTimePicker2"/> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DateTimePicker2.OnCloseUp(System.EventArgs)">
            <summary>
            Raises the <see cref="E:OpenNETCF.Windows.Forms.DateTimePicker2.CloseUp"/> event.
            </summary>
            <param name="eventargs">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DateTimePicker2.OnDropDown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:OpenNETCF.Windows.Forms.DateTimePicker2.DropDown"/> event.
            </summary>
            <param name="eventargs">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DateTimePicker2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.DateTimePicker"/> control.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.DateTimePicker2.CloseUp">
            <summary>
            Occurs when the drop-down calendar is dismissed and disappears.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.DateTimePicker2.DropDown">
            <summary>
            Occurs when the drop-down calendar is shown.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.NativeWindow">
            <summary>
            Provides a low-level encapsulation of a window handle and a window procedure. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
            <summary>
            Assigns a handle to this window.   
            </summary>
            <param name="handle">The handle to assign to this window.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.CreateHandle(OpenNETCF.Windows.Forms.CreateParams)">
            <summary>
             Creates a window and its handle with the specified creation parameters.   
            </summary>
            <param name="cp">CreateParams that specifies the creation parameters for this window.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.ReleaseHandle">
            <summary>
            Releases the handle associated with this window. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.   
            </summary>
            <param name="m">A System.Windows.Forms.Message that is associated with the current Windows message.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.DefWndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. It is an error to call this method when the System.Windows.Forms.NativeWindow.Handle property is 0.  
            </summary>
            <param name="m">A System.Windows.Forms.Message that is associated with the current Windows message.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.DestroyHandle">
            <summary>
            Destroys the window and its handle.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
            <summary>
            Retrieves the window associated with the specified handle.  
            </summary>
            <param name="handle">A handle to a window.</param>
            <returns>The System.Windows.Forms.NativeWindow associated with the specified handle. This method returns null when the handle does not have an associated window.</returns>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DEVMODE">
            <summary>
            DEVMODE struct used with ChangeDisplaySettingsEx
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawDirection">
            <summary>
            The direction of the animiation in the AnimateCtl.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawDirection.Horizontal">
            <summary>
            The layout of the animation is horizontal
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawDirection.Vertical">
            <summary>
            The layout of the animation is vertical
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawItemEventArgs">
            <summary>
            Provides data for the DrawItem event.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,OpenNETCF.Windows.Forms.DrawItemState,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,OpenNETCF.Windows.Forms.DrawItemState)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DrawItemEventArgs.DrawBackground">
            <summary>
            Draws the background within the bounds specified in the DrawItemEventArgs constructor and with the appropriate color.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DrawItemEventArgs.DrawBackground(System.Drawing.Color)">
            <summary>
            Draws the background within the bounds specified in the DrawItemEventArgs constructor and with the appropriate color.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.DrawItemEventArgs.DrawFocusRectangle">
            <summary>
            Draws a focus rectangle.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.Bounds">
            <summary>
            Gets the rectangle that represents the bounds of the item that is being drawn.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.State">
            <summary>
            Gets the state of the item being drawn.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.Graphics">
            <summary>
            Gets the graphics surface to draw the item on.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.Index">
            <summary>
            Gets the index value of the item that is being drawn.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.Font">
            <summary>
            Gets the font assigned to the item being drawn.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.BackColor">
            <summary>
            Gets the background color of the item that is being drawn.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.DrawItemEventArgs.ForeColor">
            <summary>
            Gets the foreground color of the of the item being drawn.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawItemState">
            <summary>
            Specifies the state of an item that is being drawn.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawItemState.None">
            <summary>
            The item currently has no state.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawItemState.Selected">
            <summary>
            The item is selected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawItemState.Disabled">
            <summary>
            The item is disabled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawItemState.Focus">
            <summary>
            The item has focus.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawMode">
            <summary>
            Specifies how the elements of a control are drawn.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawMode.Normal">
            <summary>
            All the elements in a control are drawn by the operating system and are of the same size.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawMode.OwnerDrawFixed">
            <summary>
            All the elements in the control are drawn manually and are of the same size.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawStyle">
            <summary>
            Represents the form in which to render the bar portion of the ProgressBar2 control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawStyle.Solid">
            <summary>
            Use a solid color for the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.DrawStyle.Gradient">
            <summary>
            Use a gradient color for the progress bar.  <seealso cref="P:OpenNETCF.Windows.Forms.ProgressBar2.BarGradientColor"/>
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.KeyStateFlags">
            <summary>
            KeyStateFlags for Keyboard methods
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.Toggled">
            <summary>
            Key is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.AsyncDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.PrevDown">
            <summary>
            Key was previously down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.Down">
            <summary>
            Key is currently down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.AnyCtrl">
            <summary>
            Left or right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.AnyShift">
            <summary>
            Left or right SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.AnyAlt">
            <summary>
            Left or right ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.Capital">
            <summary>
            VK_CAPITAL is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.LeftCtrl">
            <summary>
            Left CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.LeftShift">
            <summary>
            Left SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.LeftAlt">
            <summary>
            Left ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.LeftWin">
            <summary>
            Left Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.RightCtrl">
            <summary>
            Right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.RightShift">
            <summary>
            Right SHIFT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.RightAlt">
            <summary>
            Right ALT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.RightWin">
            <summary>
            Right Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.Dead">
            <summary>
            Corresponding character is dead character.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.NoCharacter">
            <summary>
            No characters in pCharacterBuffer to translate.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.Language1">
            <summary>
            Use for language specific shifts.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.KeyStateFlags.NumLock">
            <summary>
            NumLock toggled state.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.GradientStyle">
            <summary>
            Represents the style in which to render the gradient progress bar.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.GradientStyle.Normal">
            <summary>
            Renders the gradient progress bar from top to bottom
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.GradientStyle.Middle">
            <summary>
            Renders the gradient progress bar from middle outwards
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.GroupBox">
            <summary>
            Represents a container control used to group other controls.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.#ctor">
            <summary>
            Initializes a new instance of the GroupBox class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A PaintEventArgs that contains information about the control to paint.</param>
            <remarks>
            <b>Notes to Inheritors:</b> With the the hope of preventing noticeable flicker, this method has be overridden to do nothing. Therefore, all painting should be done in the OnPaint method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.GroupBox.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents a container control used to group other controls.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.GroupBox.BorderStyle">
            <summary>
            Gets or sets the style of the border for the control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default is FixedSingle.</value>
            <remarks>
            It is recommended that applications targeting the broad Windows platform use the Fixed3D value, and applications targeting either the Pocket PC or Smartphone platform use the default, FixedSingle.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.GroupBox.Font">
            <summary>
            Gets or sets the font of the text displayed by the control.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/> of the text displayed by the control. The default is "Tahoma, 9pt, Bold".</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.GroupBox.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> used as the foreground color for the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.GroupBox.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
            <value>The <see cref="T:System.String"/> containing the text associated with the control.</value>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Help2">
            <summary>
            Encapsulates the PegHelp HTML Help engine.
            </summary>
            <remarks>You cannot create a new instance of the Help class.
            To provide Help to an application, call the static ShowHelp method.</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Help2.ShowHelp(System.Windows.Forms.Control,System.String)">
            <summary>
            Displays the contents of the Help file at the specified URL.
            </summary>
            <param name="parent">A <see cref="T:System.Windows.Forms.Control"/> that identifies the parent of the Help dialog box.</param>
            <param name="url">The path and name of the Help file.</param>
            <example>The following code example demonstrates the ShowHelp method.
            To run this example paste the following code in a form that contains a button named Button1.
            Ensure the button's click event is connected to the event-handling method in this example.
            <code>[Visual Basic] 
            ' Open the Help file for the application.  
            Private Sub Button1_Click(ByVal sender As System.Object, _
            	ByVal e As System.EventArgs) Handles Button1.Click
            	
            	Help.ShowHelp(TextBox1, "\windows\myapp.htm")
            End Sub</code>
            <code>[C#]
            // Open the Help file for the application.  
            private void Button1_Click(System.Object sender, System.EventArgs e)
            {
            	Help.ShowHelp(TextBox1, "\\windows\\myapp.htm");
            }</code></example>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Help2.ShowHelp(System.Windows.Forms.Control,System.String,OpenNETCF.Windows.Forms.HelpNavigator)">
            <summary>
            Displays the contents of the Help file found at the specified URL for a specific topic.
            </summary>
            <param name="parent">A <see cref="T:System.Windows.Forms.Control"/> that identifies the parent of the Help dialog box.</param>
            <param name="url">The path and name of the Help file.</param>
            <param name="navigator">One of the <see cref="T:OpenNETCF.Windows.Forms.HelpNavigator"/> values.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Help2.ShowHelp(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Displays the contents of the Help file found at the specified URL for a specific topic.
            </summary>
            <param name="parent">A <see cref="T:System.Windows.Forms.Control"/> that identifies the parent of the Help dialog box.</param>
            <param name="url">The path and name of the Help file.</param>
            <param name="topic">The topic to display Help for.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Help2.ShowHelp(System.Windows.Forms.Control,System.String,OpenNETCF.Windows.Forms.HelpNavigator,System.String)">
            <summary>
            Displays the contents of the Help file located at the URL supplied.
            </summary>
            <param name="parent">A <see cref="T:System.Windows.Forms.Control"/> that identifies the parent of the Help dialog box.</param>
            <param name="url">The path and name of the Help file.</param>
            <param name="command">One of the <see cref="T:OpenNETCF.Windows.Forms.HelpNavigator"/> values.</param>
            <param name="param">The anchor name of the topic to display</param>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.HelpNavigator">
            <summary>
            Specifies constants indicating which elements of the Help file to display.
            </summary>
            <seealso cref="T:System.Windows.Forms.HelpNavigator">System.Windows.Forms.HelpNavigator Enum</seealso>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.HelpNavigator.Find">
            <summary>
            Specifies that the search page of a specified URL is displayed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.HelpNavigator.TableOfContents">
            <summary>
            Specifies that the table of contents of the specfied URL is displayed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.HelpNavigator.Topic">
            <summary>
            Specifies that the topic referenced by the specified URL is displayed.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ImageViewer">
            <summary>
            Image viewer control to display various image formats.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.ZoomOut">
            <summary>
            Zooms in the image by the default 0.2 factor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.Zoom(System.Int32)">
            <summary>
            Zooms the image.
            </summary>
            <param name="zoomFactor">Zoom factor.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.ZoomIn">
            <summary>
            Zooms out the image by the default 0.2 factor.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ImageViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ImageViewer.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Image viewer control to display various image formats.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ImageViewer.Image">
            <summary>
            Gets or sets the image that the ImageViewer displays.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ImageViewer.Center">
            <summary>
            Gets or sets the value to specify if the image should be centered.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ItemCollection">
            <summary>
            Represents the collection of items in a ListBox2. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Add(OpenNETCF.Windows.Forms.ListItem)">
            <summary>
            Adds an item to the list of items for a ListBox2. 
            </summary>
            <param name="value">ListItem to add</param>
            <returns>Newly created ListItem</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Add(System.String)">
            <summary>
            Adds an item to the list of items for a ListBox2 
            </summary>
            <param name="value">string for text property</param>
            <returns>Newly created ListItem</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Remove(OpenNETCF.Windows.Forms.ListItem)">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="value">ListItem to remove</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Insert(System.Int32,OpenNETCF.Windows.Forms.ListItem)">
            <summary>
            Inserts an item into the list box at the specified index.  
            </summary>
            <param name="index">The zero-based index location where the item is inserted.</param>
            <param name="value">An object representing the item to insert.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Contains(OpenNETCF.Windows.Forms.ListItem)">
            <summary>
            Determines whether the specified item is located within the collection.  
            </summary>
            <param name="value">An object representing the item to locate in the collection.</param>
            <returns>true if the item is located within the collection; otherwise, false .</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.Clear">
            <summary>
            Removes all elements from the System.Collections.ArrayList.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ItemCollection.IndexOf(OpenNETCF.Windows.Forms.ListItem)">
            <summary>
            Returns the index within the collection of the specified item
            </summary>
            <param name="value">An object representing the item to locate in the collection.</param>
            <returns>The zero-based index where the item is located within the collection; otherwise, negative one (-1). </returns>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ItemCollection.Item(System.String)">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.KeyData">
            <summary>
            Data passed on by the KeyboardHook
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.KeyData.KeyCode">
            <summary>
            The key code
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.KeyData.ScanCode">
            <summary>
            The hardware scan code
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.KeyData.TimeStamp">
            <summary>
            The Environement.Tickcount time at which the key was intercepted
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.KeyHookEventHandler">
            <summary>
            Handler for KeyboardHook key events
            </summary>
            <param name="keyMessage">The key message (up, down, sysup or sysdown)</param>
            <param name="keyData">The key data associated with the event</param>
            <returns>Return <b>true</b> to pass the key data on to the next hook, <b>false</b> to prevent further system processing</returns>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.KeyboardHook">
            <summary>
            Used for system-wide hooking of keyboard events
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.KeyboardHook.#ctor">
            <summary>
            Creates an instance of a KeyboardHook
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.KeyboardHook.Dispose">
            <summary>
            Disposes the KeyboardHook
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.KeyboardHook.Finalize">
            <summary>
            Finalizes the KeyboardHook
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.KeyboardHook.KeyDetected">
            <summary>
            Fired when keyboard data is present in the system
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.KeyboardHook.Enabled">
            <summary>
            Gets or sets the state of the hook
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.KeyboardHook.PassOnKeys">
            <summary>
            Set to <b>false</b> to prevent the system from forwarding the key data to further hooks or the target control.  Defaults to <b>true</b>
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LinkLabel2">
            <summary>
            Represents a label control that displays as a hyperlink.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.#ctor">
            <summary>
            Initializes a new instance of the LinkLabel2 class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.AdjustControlSize">
            <summary>
            Adjusts the size of the control based on the AutoSize property.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.NotifyDefault(System.Boolean)">
            <summary>
            Notifies the link whether it is the default link so that it can adjust its appearance accordingly.
            </summary>
            <param name="value"><b>true</b> if the link is to have the appearance of the default link; otherwise, <b>false</b>.</param>
            <remarks>
            A LinkLabel2 control appears the same regardless of whether it is the default, so 
            calling this method will not change the appearance or behavior of the LinkLabel2.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the KeyPress event.
            </summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnLinkClicked(OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventArgs)">
            <summary>
            Raises the LinkClicked event.
            </summary>
            <param name="e">A LinkLabel2LinkClickedEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the LostFocus event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A PaintEventArgs that contains information about the control to paint.</param>
            <remarks>
            <b>Notes to Inheritors:</b> With the the hope of preventing noticeable flicker, this method has be overridden to do nothing. Therefore, all painting should be done in the OnPaint method.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.PerformClick">
            <summary>
            Generates a Click event for the link.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.ResetLinkBehavior">
            <summary>
            Resets the LinkBehavior property to its default value.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.ShouldSerializeLinkBehavior">
            <summary>
            Indicates whether the LinkBehavior property should be persisted.
            </summary>
            <returns><b>true</b> if the property value has changed from its default; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents a label control that displays as a hyperlink.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.ActiveLinkColor">
            <summary>
            Gets or sets the color of the text in an active state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the text in an active state. The default is Color.Red.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to display its contents.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is set to <b>true</b> if the control is automatically resized; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.DialogResult">
            <summary>
            Gets or sets a value that is returned to the parent form when the link is activated.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values. The default value is DialogResult.None.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.DisabledLinkColor">
            <summary>
            Gets or sets the color of the text in a disabled state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the text in a disabled state. The default is SystemColors.GrayText.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.Font">
            <summary>
            Gets or sets the font of the text displayed by the control.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/> of the text displayed by the control.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.LinkBehavior">
            <summary>
            Gets or sets a value that represents the behavior of the link.
            </summary>
            <value>A <see cref="T:OpenNETCF.Windows.Forms.LinkBehavior"/> value that represents the behavior of the link. The default is LinkBehavior.AlwaysUnderline.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.LinkColor">
            <summary>
            Gets or sets the color of the text in a normal state.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the text in a normal state. The default is Color.Blue.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.LinkData">
            <summary>
            Gets or sets the data associated with the link.
            </summary>
            <value>A <see cref="T:System.Object"/> that represents the data associated with the link. The default is a null reference (Nothing in Visual Basic).</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.LinkVisited">
            <summary>
            Gets or sets a value indicating whether the link should be displayed as though it were visited.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is set to <b>true</b> if the link should be displayed as though it were visited; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>
            This control does not automatically denote that a link is a visited link. 
            To display the link as a visited link, you can set the value of this property to <b>true</b> 
            in an event handler for the LinkClicked event.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2.VisitedLinkColor">
            <summary>
            Gets or sets the color used to indicate that the link has been previously visited.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color used to indicate that the link has been previously visited. The default is Color.Purple.</value>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.LinkLabel2.LinkClicked">
            <summary>
            Occurs when the link is clicked.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LinkBehavior">
            <summary>
            Specifies the behavior of a link in a <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LinkBehavior.AlwaysUnderline">
            <summary>
            The link always displays with underlined text.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LinkBehavior.NeverUnderline">
            <summary>
            The link text is never underlined. The link can still be distinguished from other text by use of the LinkColor property of the <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2"/> control.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventArgs">
            <summary>
            Provides data for the LinkClicked event of the <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the LinkLabel2LinkClickedEventArgs class, given the link data.
            </summary>
            <param name="data">The LinkData of the <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2"/> instance.</param>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventArgs.LinkData">
            <summary>
            Gets the data associated with the link.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventHandler">
            <summary>
            Represents the method that will handle the LinkClicked event of a <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:OpenNETCF.Windows.Forms.LinkLabel2LinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ListBox2">
            <summary>
            Represents a Owner-drawn list control, which displays a collection of items.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.OwnerDrawnList">
            <summary>
            Summary description for OwnerDrawnList.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.#ctor">
            <summary>
            Initializes a new instance of the OwnerDrawnList class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the SelectedIndexChanged event.  
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OnDrawItem(System.Object,OpenNETCF.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Raises the DrawItem event.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any items in the list.   
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.EnsureVisible(System.Int32)">
            <summary>
            Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.  
            </summary>
            <param name="index">The zero-based index of the item to scroll into view.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.BeginUpdate">
            <summary>
            Prevents the control from drawing until the EndUpdate method is called.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.EndUpdate">
            <summary>
            Resumes drawing of the list view control after drawing is suspended by the BeginUpdate method.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Raises the ListBox2.DataSourceChanged event.  
            </summary>
            <param name="e">The EventArgs that will be passed to any handlers
            of the DataSourceChanged event.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OnDisplayMemberChanged(System.EventArgs)">
            <summary>
            Raises the DataMemberChanged event.
            </summary>
            <param name="e">The EventArgs that will be passed to any handlers
            of the DataMemberChanged event.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Handles binding context changes
            </summary>
            <param name="e">The EventArgs that will be passed to any handlers
            of the BindingContextChanged event.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.BuildItemForRow(System.Object)">
            <summary>
            Adds item to the items collection.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.OwnerDrawnList.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Summary description for OwnerDrawnList.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.OwnerDrawnList.DataSourceChanged">
            <summary>
            Raised when the DataSource property changes.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.OwnerDrawnList.DisplayMemberChanged">
             <summary>
             Raised when the DataMember property changes.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.OwnerDrawnList.DrawItem">
            <summary>
            Occurs when the DrawItem has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.OwnerDrawnList.SelectedIndexChanged">
            <summary>
            Occurs when the SelectedIndex property has changed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.ShowScrollbar">
            <summary>
            Get/set the ShowScrollbar property.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.TopIndex">
            <summary>
            Gets or sets the index of the first visible item in the OwnerDrawnList. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.BaseItems">
            <summary>
            Gets the items of the List.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.ItemHeight">
            <summary>
            Gets or sets a ItemHeight
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.SelectedIndex">
            <summary>
            Gets or sets the zero-based index of the currently selected item in a OwnerDrawnList.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.Height">
            <summary>
            Gets or sets the height of the control.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.DrawMode">
            <summary>
            Gets or sets the drawing mode for the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.DataSource">
            <summary>
            Gets or sets the data source for this ListBox2 control.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.OwnerDrawnList.DisplayMember">
            <summary>
            Gets or sets a string that specifies the property of the data source whose contents you want to display.
            </summary>
            <value>A <see cref="T:System.String"/> specifying the name of a property of the object specified by the <see cref="P:OpenNETCF.Windows.Forms.OwnerDrawnList.DataSource"/> property.
            The default is an empty string ("").</value>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ListBox2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.Items">
            <summary>
            Gets the items of the ListBox2.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.BaseItems">
            <summary>
            Gets a items collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.EvenItemColor">
            <summary>
            Gets or sets the background color of the even item.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.LineColor">
            <summary>
            Gets or sets the color of the lines. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.ShowLines">
            <summary>
            Gets or sets text wrapping in the list items
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.WrapText">
            <summary>
            Gets or sets text wrapping in the list items
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.ImageList">
            <summary>
            Gets or sets the System.Windows.Forms.ImageList to use when displaying item's icons in the control.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListBox2.ItemHeight">
            <summary>
            Gets or sets the item height
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ListItem.#ctor">
            <summary>
            Initializes a new instance of the ListItem class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListItem class with specified item text.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ListItem.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ListItem class with specified item text and ImageIndex.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.Text">
            <summary>
            Gets or sets the text associated with this item.   
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.Font">
            <summary>
            Gets or sets the font associated with this item.   
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.ForeColor">
            <summary>
            Gets or sets the foreground color of the item's text.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.ImageList">
            <summary>
            Gets the <see cref="P:OpenNETCF.Windows.Forms.ListItem.ImageList"/> that contains the image displayed with the item.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.ImageIndex">
            <summary>
            Gets or sets the ImageIndex associated with this item.   
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ListItem.Tag">
            <summary>
            Gets or sets an object that contains data to associate with the item.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.MethodInvoker">
            <summary>
            Represents a delegate that can execute any method in managed code that is
            declared void and takes no parameters.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.MonthCalendar2">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.MonthCalendar"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.MonthCalendar2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Windows.Forms.MonthCalendar2"/> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.MonthCalendar2.OnDateSelected(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Raises the <see cref="E:OpenNETCF.Windows.Forms.MonthCalendar2.DateSelected"/> event.
            </summary>
            <param name="drevent">A <see cref="T:System.Windows.Forms.DateRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.MonthCalendar2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.MonthCalendar"/> control.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.MonthCalendar2.DateSelected">
            <summary>
            Occurs when the user makes an explicit date selection using the mouse.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardString(System.String)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardString(System.String,OpenNETCF.Windows.Forms.KeyStateFlags)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
            <param name="Flags"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardString(System.String,OpenNETCF.Windows.Forms.KeyStateFlags,System.IntPtr)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
            <param name="Flags"></param>
            <param name="hWnd"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardKey(System.Byte)">
            <summary>
            Send a key to the keyboard
            </summary>
            <param name="VirtualKey"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardKey(System.Byte,System.Boolean)">
            <summary>
            Send a key to the keyboard
            </summary>
            <param name="VirtualKey"></param>
            <param name="Silent"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NativeMethods.SendKeyboardKey(System.Byte,System.Boolean,OpenNETCF.Windows.Forms.NativeMethods.KeyActionState)">
            <summary>
            Simulates a keystroke that the system can use to generate a WM_KEYUP or WM_KEYDOWN message.
            </summary>
            <param name="VirtualKey">A System.Byte structure that contains a virtual-key code representing the key with which to perform an action.</param>
            <param name="Silent">A System.Boolean structure specifying true if a sound should be generated when the keystroke is simulated; otherwise, false.</param>
            <param name="State">A KeyActionState enumeration value indicating the action that should be performed with the specified virtual-key code.</param>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.NativeMethods.KeyActionState">
            <summary>
            Specifies an action, or state, that may occur, or should 
            occur, in relation to a keyboard key.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.NativeMethods.KeyActionState.Down">
            <summary>
            The key is in the down state.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.NativeMethods.KeyActionState.Up">
            <summary>
            The key is in the up state.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.NativeMethods.KeyActionState.Press">
            <summary>
            The key has been pressed down and then released.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.NotifyIcon">
            <summary>
            Specifies a component that creates an icon in the status area
            </summary>
            <remarks>Icons in the status area are short cuts to processes that are running in the background of a computer, such as a virus protection program or a volume control.
            These processes do not come with their own user interfaces.
            The <see cref="T:OpenNETCF.Windows.Forms.NotifyIcon"/> class provides a way to program in this functionality.
            The Icon property defines the icon that appears in the status area.
            Pop-up menus for an icon are addressed with the ContextMenu property.
            The <see cref="P:OpenNETCF.Windows.Forms.NotifyIcon.Text"/> property assigns ToolTip text (Tooltips are not supported by the Pocket PC interface).
            In order for the icon to show up in the status area, the <see cref="P:OpenNETCF.Windows.Forms.NotifyIcon.Visible"/> property must be set to true.</remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NotifyIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Windows.Forms.NotifyIcon"/> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.NotifyIcon.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.Windows.Forms.NotifyIcon"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.NotifyIcon.Icon">
            <summary>
            The <see cref="P:OpenNETCF.Windows.Forms.NotifyIcon.Icon"/> displayed by the NotifyIcon component.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.NotifyIcon.Text">
            <summary>
            Gets or sets the ToolTip text displayed when the mouse hovers over a status area icon.
            </summary>
            <remarks>The Pocket PC interface does not display tooptips.</remarks>
            <value>The ToolTip text displayed when the mouse hovers over a status area icon.</value>
            <exception cref="T:System.ArgumentException">ToolTip text must be less than 64 characters long.</exception>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.NotifyIcon.Visible">
            <summary>
            Gets or sets a value indicating whether the icon is visible in the status notification area of the taskbar.
            </summary>
            <value>true if the icon is visible in the status area; otherwise, false. The default value is false.</value>
            <remarks>Since the default value is false, in order for the icon to show up in the status area, you must set the Visible property to true.</remarks>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.NotifyIcon.Click">
            <summary>
            Occurs when the user clicks the icon in the status area.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.NotifyIcon.DoubleClick">
            <summary>
            Occurs when the user double-clicks the icon in the status notification area of the taskbar.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.NotifyIcon.MouseUp">
            <summary>
            Occurs when the user releases the mouse button while the pointer is over the icon in the status notification area of the taskbar.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.NotifyIcon.MouseDown">
            <summary>
            Occurs when the user presses the mouse button while the pointer is over the icon in the status notification area of the taskbar.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.DrawItemEventHandler">
            <summary>
            Represents the method that will handle the DrawItem.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.PictureBox2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.PictureBox2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.PictureBox2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.PictureBox2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PictureBox2.TransparentColor">
            <summary>
            Sets or gets transparent color for an Image. The default color is 255, 0, 255.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.PowerLineStatus">
            <summary>
            Power line status.
            </summary>
            <remarks>Used by <see cref="T:OpenNETCF.Windows.Forms.PowerStatus"/> class.</remarks>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.PowerLineStatus.Offline">
            <summary>
            AC power is offline.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.PowerLineStatus.Online">
            <summary>
            AC power is online.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.PowerLineStatus.BackupPower">
            <summary>
            Unit is on backup power.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.PowerLineStatus.Unknown">
            <summary>
            AC line status is unknown.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.PowerStatus">
            <summary>
            Indicates current system power status information.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.PowerLineStatus">
            <summary>
            AC power status.
            </summary>
            <value>One of the <see cref="P:OpenNETCF.Windows.Forms.PowerStatus.PowerLineStatus"/> values indicating the current system power status.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryChargeStatus">
            <summary>
            Gets the current battery charge status.
            </summary>
            <value>One of the <see cref="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryChargeStatus"/> values indicating the current battery charge level or charging status.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryLifePercent">
            <summary>
            Gets the approximate percentage of full battery time remaining.
            </summary>
            <value>The approximate percentage, from 0 to 100, of full battery time remaining, or 255 if the percentage is unknown.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryLifeRemaining">
            <summary>
            Gets the approximate number of seconds of battery time remaining.
            </summary>
            <value>The approximate number of seconds of battery life remaining, or -1 if the approximate remaining battery life is unknown.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryFullLifeTime">
            <summary>
            Gets the reported full charge lifetime of the primary battery power source in seconds.
            </summary>
            <value>The reported number of seconds of battery life available when the battery is fullly charged, or -1 if the battery life is unknown.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BackupBatteryChargeStatus">
            <summary>
            Gets the backup battery charge status.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BackupBatteryLifePercent">
            <summary>
            Percentage of full backup battery charge remaining. Must be in the range 0 to 100.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BackupBatteryLifeRemaining">
            <summary>
            Number of seconds of backup battery life remaining.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BackupBatteryFullLifeTime">
            <summary>
            Number of seconds of backup battery life when at full charge. Or -1 If unknown.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryVoltage">
            <summary>
            Amount of battery voltage in millivolts (mV).
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryCurrent">
            <summary>
            Amount of instantaneous current drain in milliamperes (mA).
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryAverageCurrent">
            <summary>
            Short-term average of device current drain (mA).
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryAverageInterval">
            <summary>
            Time constant in milliseconds (ms) of integration used in reporting <see cref="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryAverageCurrent"/>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatterymAHourComsumed">
            <summary>
            Long-term cumulative average discharge in milliamperes per hour (mAH).
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryTemperature">
            <summary>
            Battery temperature in degrees Celsius (°C).
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BackupBatteryVoltage">
            <summary>
            Backup battery voltage in mV.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.PowerStatus.BatteryChemistry">
            <summary>
            Chemistry of the devices main battery.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ProgressBar2">
            <summary>
            Represents a progress bar control similar to the windows progress bar control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.defaultSize">
            <summary>
            The default size of the control
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.orientation">
            <summary>
            The orientation of the control
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.gradientStyle">
            <summary>
            The Gradient mode that should be used
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.drawStyle">
            <summary>
            The draw style for the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.borderStyle">
            <summary>
            Border style of the control
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.maximum">
            <summary>
            The maximum value of the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.minimum">
            <summary>
            The minimum value of the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.currentValue">
            <summary>
            The current value of the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.step">
            <summary>
            Step to use when incrementing the value
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.barColor">
            <summary>
            The color of the bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.barGradientColor">
            <summary>
            The gradient color to use
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.borderColor">
            <summary>
            The border color of the control
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.showValueText">
            <summary>
            Whether to show the text or not
            </summary>
            <remarks>Shows the text in the control.</remarks>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.showPercentValueText">
            <summary>
            Whether to show the percentage or not
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.onePixBar">
            <summary>
            The on pixel bitmap that is cached with the gradient so it doesn't have to be regenerated all the time.  The image will be streched depending on the value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.borderPadding">
            <summary>
            The padding from the border of the control to the progress bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.offscreenBM">
            <summary>
            The offscreen bitmap to draw on
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.offscreenGX">
            <summary>
            The offscreen graphics component
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.PerformStep">
            <summary>
            Advances the current position of the progress bar by the amount of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property.
            </summary>
            <remarks>
            The PerformStep method increments the value of the progress bar by the amount specified by the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property. You can use the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property to specify the amount that each completed task in an operation changes the value of the progress bar. For example, if you are copying a group of files, you might want to set the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property to 1 and the value of the Maximum property to the total number of files to copy. When each file is copied, you can call the PerformStep method to increment the progress bar by the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property. If you want to have more flexible control of the value of the progress bar, you can use the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.Increment(System.Int32)">Increment</see> method or set the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property directly.
            The <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property specifies the current position of the ProgressBar. If, after calling the PerformStep method, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property is greater than the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Maximum">Maximum</see> property, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property remains at the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Maximum">Maximum</see> property. If, after calling the PerformStep method with a negative value specified in the value parameter, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property is less than the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Minimum">Value</see> property, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property remains at the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Minimum">Minimum</see> property.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.Increment(System.Int32)">
            <summary>
            Advances the current position of the progress bar by the specified amount.
            </summary>
            <remarks>The Increment method enables you to increment the value of the progress bar by a specific amount. This method of incrementing the progress bar is similar to using the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">Step</see> property with the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.PerformStep">PerformStep</see> method. The <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property specifies the current position of the ProgressBar. If, after calling the Increment method, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property is greater than the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Maximum">Maximum</see> property, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property remains at the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Maximum">Maximum</see> property. If, after calling the Increment method with a negative value specified in the value parameter, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property is less than the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Minimum">Minimum</see> property, the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property remains at the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Minimum">Minimum</see> property.</remarks>
            <param name="value">The amount by which to increment the progress bar's current position.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the PaintBackground event. (Inherited from <see cref="T:System.Windows.Forms.Control">Control</see>.)
            </summary>
            <param name="e">A PaintEventArgs that contains the event data. </param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event. (Inherited from <see cref="T:System.Windows.Forms.Control">Control</see>.)
            </summary>
            <param name="e">A PaintEventArgs that contains the event data. </param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event. (Inherited from <see cref="T:System.Windows.Forms.Control">Control</see>.)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the ParentChanged event. (Inherited from <see cref="T:System.Windows.Forms.Control">Control</see>.)
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.ProgressBar2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ProgressBar2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents a progress bar control similar to the windows progress bar control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.ShowPercentValueText">
            <summary>
            Gets or sets whether the current percentage of the progress bar should be shown.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.ShowValueText">
            <summary>
            Gets or sets whether the current value of the progress bar should be shown.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BarGradientColor">
            <summary>
            Gets or sets the gradient color of the progress bar
            </summary>
            <remarks>Only effective when DrawStyle is set to Gradient</remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BarColor">
            <summary>
            Gets or sets the color of the progress bar
            </summary>
            <value>The <see cref="T:System.Drawing.Color">Color</see> to set the bar of the ProgressBar2.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.DrawStyle">
            <summary>
            Gets or sets the style of the progress bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.GradientStyle">
            <summary>
            Gets or sets the gradient draw mode. Two values are either Normal which is gradient from left to right
            and Middle which starts from the middle out
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BorderStyle">
            <summary>
            Gets or sets the border style of the control
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BorderColor">
            <summary>
            Gets or sets the color of the control border
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BorderPadding">
            <summary>
            Gets or sets the space between the progress bar and the control border.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Step">
            <summary>
            Gets or sets the amount by which a call to the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.PerformStep">PerformStep</see> method increases the current position of the progress bar.
            </summary>
            <remarks>You can use the Step property to specify the amount that each completed task in an operation changes the value of the progress bar. For example, if you are copying a group of files, you might want to set the value of the Step property to 1 and the value of the Maximum property to the total number of files to copy. When each file is copied, you can call the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.PerformStep">PerformStep</see> method to increment the progress bar by the value of the Step property. If you want to have more flexible control of the value of the progress bar, you can use the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.Increment(System.Int32)">Increment</see> method or set the value of the <see cref="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">Value</see> property directly.</remarks>
            <value>The amount by which to increment the progress bar with each call to the <see cref="M:OpenNETCF.Windows.Forms.ProgressBar2.PerformStep">PerformStep</see> method. The default is 10.</value>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Value">
            <summary>
            Gets or sets the current position of the progress bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Minimum">
            <summary>
            Gets or sets the minimum value of the range of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Maximum">
            <summary>
            Gets or sets the maximum value of the range of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.BackColor">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.BackColor">Control.BackColor</see>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Text">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.ForeColor">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.ForeColor">Control.ForeColor</see>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.Font">
            <summary>
            Overridden. See <see cref="P:System.Windows.Forms.Control.Font">Control.Font</see>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.ProgressBar2.DesignMode">
            <summary>
            Gets whether the control is in design mode
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.HighWarnHandler">
            <summary>
            Used when a gauge value exceeds its high warn level.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LowWarnHandler">
            <summary>
            Used when a gauge value falls below its low warn level.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.MaxValueHandler">
            <summary>
            Used when a gauge value exceeds its max value.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.MinValueHandler">
            <summary>
            Used when a gauge value falls below its low value.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.RoundGauge">
            <summary>
            A representation of a dial gauge with indicator lamps
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.#ctor">
            <summary>
            Create a RoundGauge object
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.Refresh">
            <summary>
            Refreshes the control
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.BeginUpdate">
            <summary>
            Suspends control painting
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.EndUpdate">
            <summary>
            Resumes control painting
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaintBackground
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.OnResize(System.EventArgs)">
            <summary>
            Fired when the RoundGauge is resized
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.Dispose(System.Boolean)">
            <summary>
            Dispose of the current object instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.RoundGauge.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            A representation of a dial gauge with indicator lamps
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.RoundGauge.HighWarn">
            <summary>
            Fires when the RoundGauge Value exceeds the HighWarnValue
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.Value"/>
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.HighWarnValue"/>
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.RoundGauge.LowWarn">
            <summary>
            Fires when the RoundGauge Value falls below the LowWarnValue
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.Value"/>
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.LowWarnValue"/>
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.RoundGauge.GaugeMax">
            <summary>
            Fires when the RoundGauge Value exceeds the MaxValue
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.Value"/>
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.MaxValue"/>
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.RoundGauge.GaugeMin">
            <summary>
            Fires when the RoundGauge Value falls below the MinValue
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.Value"/>
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.MinValue"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.Lamps">
            <summary>
            The RoundGauge's collection of Lamps
            <seealso cref="P:OpenNETCF.Windows.Forms.RoundGauge.Lamps"/>
            <seealso cref="T:OpenNETCF.Windows.Forms.Lamp"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.NeedleWidth">
            <summary>
            Specifies the width of the gauge needle base.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.NeedleColor">
            <summary>
            The color of the Guage's needle
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.Diameter">
            <summary>
            Dimaeter of the RoundGauge face
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.Value">
            <summary>
            Value that the RoundGauge needle points to
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.ValueArc">
            <summary>
            The arc over which value ticks are drawn (in degrees)
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.TickLabelInterval">
            <summary>
            Specifies the number of ticks between TickLabels.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.ShowTickLabels">
            <summary>
            Specifies whether or not TickLabels will be displayed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.LineBezelSpacing">
            <summary>
            Specifies the gap between the ValueArc and the gauge bezel.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.ArcWidth">
            <summary>
            Specifies the thickness of the ValueArc line.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.TickInterval">
            <summary>
            Specifies the interval, based on Value, between individual Tick lines.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.TickLabelPadding">
            <summary>
            Specifies the gap between the Tick lines and the TickLabels.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.TickLength">
            <summary>
            Specifies the length of standard Tick lines.  Tick lines with a label are twice this value.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.MinValue">
            <summary>
            Specifies the minimum value displayed on the gauge.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.HighWarnValue">
            <summary>
            Specifies the lower limit of the HighWarn region.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.LowWarnValue">
            <summary>
            Specifies the upper limit of the LowWarn region.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.MaxValue">
            <summary>
            Specifies the maximum value displayed on the gauge.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.ValueDigits">
            <summary>
            Specifies the number of digits to display in the value label.  0 will hide the value label.  -1 sets it to autosize.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.BezelWidth">
            <summary>
            Specifies the thickness of the gauge bezel.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.BezelColor">
            <summary>
            Specifies the Color of the gauge bezel.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.LineColor">
            <summary>
            Specifies the Color of Ticks and the ValueArc between the LowWarn and HighWarn regions.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.LowWarnColor">
            <summary>
            Specifies the Color of the ValueArc in the LowWarn region.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.RoundGauge.HighWarnColor">
            <summary>
            Specifies the Color of the ValueArc in the HighWarn region.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.LampPosition">
            <summary>
            Position of Lamp relative to RoundGauge.
            <seealso cref="T:OpenNETCF.Windows.Forms.Lamp"/>
            <seealso cref="T:OpenNETCF.Windows.Forms.RoundGauge"/>
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LampPosition.UpperLeft">
            <summary>
            Upper Left
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LampPosition.UpperRight">
            <summary>
            Upper Right
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LampPosition.LowerLeft">
            <summary>
            Lower Left
            </summary>
        </member>
        <member name="F:OpenNETCF.Windows.Forms.LampPosition.LowerRight">
            <summary>
            Lower Right
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Lamp">
            <summary>
            Indicator Lamp class
            </summary>
            <seealso cref="T:OpenNETCF.Windows.Forms.RoundGauge"/>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Lamp.#ctor">
            <summary>
            Lamp constructor
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.Visible">
            <summary>
            Sets whether the lamp is Visible or not
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.Position">
            <summary>
            The position of the lamp relative to its parent RoundGauge
            <seealso cref="T:OpenNETCF.Windows.Forms.RoundGauge"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.State">
            <summary>
            The state (on or off) of the Lamp
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.OnColor">
            <summary>
            The lamp's color when its State is <b>true</b>
            <seealso cref="P:OpenNETCF.Windows.Forms.Lamp.State"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.OffColor">
            <summary>
            The lamp's color when its State is <b>false</b>
            <seealso cref="P:OpenNETCF.Windows.Forms.Lamp.State"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.BezelColor">
            <summary>
            The border (bezel) color of the lamp
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamp.BezelWidth">
            <summary>
            The border (bezel) width of the lamp
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Lamps">
            <summary>
            A Collection of Lamp classes
            </summary>
            <seealso cref="T:OpenNETCF.Windows.Forms.Lamp"/>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Lamps.Add(OpenNETCF.Windows.Forms.Lamp)">
            <summary>
            Adds a Lamp to the collection
            <seealso cref="T:OpenNETCF.Windows.Forms.Lamp"/>
            </summary>
            <param name="newLamp"></param>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Lamps.Item(System.Int32)">
            <summary>
            Retrieves the Lamp at a specific <b>index</b>
            <seealso cref="T:OpenNETCF.Windows.Forms.Lamp"/>
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.SendKeys">
            <summary>
            Provides methods for sending keystrokes to an application.
            </summary>
            <remarks>
            A quote from "http://msdn2.microsoft.com/library/k3w7761b.aspx":
            Each key is represented by one or more characters. To specify a single keyboard character, 
            use the character itself. For example, to represent the letter A, pass in the string "A" to 
            the method. To represent more than one character, append each additional character to the 
            one preceding it. To represent the letters A, B, and C, specify the parameter as "ABC".
            
            The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special 
            meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). 
            For example, to specify the plus sign, use "{+}". To specify brace characters, use "{{}" 
            and "{}}". Brackets ([ ]) have no special meaning to SendKeys, but you must enclose them 
            in braces.
            
            To specify that any combination of SHIFT (+), CTRL (^), and ALT (%) should be held down while several 
            other keys are pressed, enclose the code for those keys in parentheses. For example, to 
            specify to hold down SHIFT while E and C are pressed, use "+(EC)". To specify to hold down 
            SHIFT while E is pressed, followed by C without SHIFT, use "+EC".
            
            To specify repeating keys, use the form {key number}. You must put a space between key 
            and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} 
            means press H 10 times.
            </remarks>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SendKeys.Send(System.String)">
            <summary>
            Sends keystrokes to the active application.
            </summary>
            <param name="keys">The string of keystrokes to send.</param>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Signature">
            <summary>
            Captures a signature from the user.
            Can be saved to a control specific byte array or a Bitmap.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.#ctor">
            <summary>
            Constructor, creates the graphics object
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.ToBitmap">
            <summary>
            Converts the signature to a bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.GetSignatureEx">
            <summary>
            Returns the signature data consisting of points (x,y) coordinates
            </summary>
            <returns>Signature data</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.LoadSignatureEx(System.Byte[])">
            <summary>
            Loads a signature from the given bytes consisting of points (x,y) coordinates
            </summary>
            <param name="b">Signature data previously serialized with e.g. GetSignatureEx</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.Clear">
            <summary>
            Clears the signature area.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.Windows.Forms.Control
            and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draw the border of the signature box if it is required.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the PaintBackground event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.Signature.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.BorderColor">
            <summary>
            Gets or sets the color for the border.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.BackgroundImage">
            <summary>
            Gets or sets the background image to use when painting
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.BorderStyle"/> of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.ForeColor">
            <summary>
            Gets or sets the <see cref="P:OpenNETCF.Windows.Forms.Signature.ForeColor"/> of the control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.PenWidth">
            <summary>
            Gets or sets the width of the signature draw pen
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.Signature.DesignMode">
            <summary>
            Gets a value indicating whether a control is being used on a design surface.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.Point2">
            <summary>
            Internal class to facilitate pen width control
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.SmartList">
            <summary>
            Represents a Owner-drawn list control, which displays a collection of items which can be filtered using key press.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.OnFilteringStarted(System.EventArgs)">
            <summary>
            Raises the FilteringStarted event.  
            </summary>
            <param name="e"> An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.OnFilteringComplete(System.EventArgs)">
            <summary>
            Raises the FilteringStarted event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Represents a Owner-drawn list control, which displays a collection of items which can be filtered using key press.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.SmartList.FilteringStarted">
            <summary>
            Occurs when the filtering is started.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.SmartList.FilteringComplete">
            <summary>
            Occurs when the filtering is completed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.Items">
            <summary>
            Gets the items of the SmartList .
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.BaseItems">
            <summary>
            Gets a items collection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.FullKeyboard">
            <summary>
            Sets or gets the value indicating usage of QWERTY keyboard
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.AutoNumbering">
            <summary>
            Sets or gets AutoNumbering.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.KeyMappings">
            <summary>
            Gets or sets key mappings for filtering.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.EvenItemColor">
            <summary>
            Gets or sets the background color of the even item.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.LineColor">
            <summary>
            Gets or sets the color of the lines. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ShowLines">
            <summary>
            Gets or sets text wrapping in the list items
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.WrapText">
            <summary>
            Gets or sets text wrapping in the list items
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ImageList">
            <summary>
            Gets or sets the System.Windows.Forms.ImageList to use when displaying item's icons in the control.  
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ItemsMatchedCount">
            <summary>
            Gets a number of items found as a result of filtering.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ItemHeight">
            <summary>
            Gets or sets the item height
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.SmartList.ItemCollection">
            <summary>
            Represents the collection of items in a SmartList . 
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Add(OpenNETCF.Windows.Forms.SmartListItem)">
            <summary>
            Adds an item to the list of items for a SmartList . 
            </summary>
            <param name="value">SmartListItem to add</param>
            <returns>Newly created SmartListItem</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Add(System.String)">
            <summary>
            Adds an item to the list of items for a SmartList . 
            </summary>
            <param name="value">string for text property</param>
            <returns>Newly created SmartListItem</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Clear">
            <summary>
            Removes all elements from the System.Collections.ArrayList.  
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Remove(OpenNETCF.Windows.Forms.SmartListItem)">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="value">SmartListItem to remove</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Insert(System.Int32,OpenNETCF.Windows.Forms.SmartListItem)">
            <summary>
            Inserts an item into the list box at the specified index.  
            </summary>
            <param name="index">The zero-based index location where the item is inserted.</param>
            <param name="value">An object representing the item to insert.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Contains(OpenNETCF.Windows.Forms.SmartListItem)">
            <summary>
            Determines whether the specified item is located within the collection.  
            </summary>
            <param name="value">An object representing the item to locate in the collection.</param>
            <returns>true if the item is located within the collection; otherwise, false .</returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartList.ItemCollection.IndexOf(OpenNETCF.Windows.Forms.SmartListItem)">
            <summary>
            Returns the index within the collection of the specified item
            </summary>
            <param name="value">An object representing the item to locate in the collection.</param>
            <returns>The zero-based index where the item is located within the collection; otherwise, negative one (-1). </returns>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartList.ItemCollection.Item(System.String)">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.SmartListItem">
            <summary>
            Represents an item in a <see cref="T:OpenNETCF.Windows.Forms.SmartList"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartListItem.#ctor">
            <summary>
            Initializes a new instance of the SmartListItem class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SmartListItem class with specified item text.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.SmartListItem.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SmartListItem class with specified item text and ImageIndex.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartListItem.Text">
            <summary>
            Gets or sets the text associated with this item.   
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartListItem.Font">
            <summary>
            Gets or sets the font associated with this item.   
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartListItem.ForeColor">
            <summary>
            Gets or sets the foreground color of the item's text.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartListItem.ImageList">
            <summary>
            Gets the <see cref="P:OpenNETCF.Windows.Forms.SmartListItem.ImageList"/> that contains the image displayed with the item.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SmartListItem.ImageIndex">
            <summary>
            Gets or sets the ImageIndex associated with this item.   
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.StaticMethods.IsDesignMode(System.Windows.Forms.Control)">
            <summary>
            Determins whether the control is in design mode or not
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.StaticMethods.Scale(System.Drawing.Graphics)">
            <summary>
            Produces a number to use for scaling graphics
            </summary>
            <param name="g">Graphics object to use</param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.StaticMethods.IsDesignTime">
            <summary>
            Determine if this instance is running against .NET Framework
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.StaticMethods.IsRunTime">
            <summary>
            Determine if this instance is running against .NET Compact Framework
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.SystemInformation2">
            <summary>
            Provides information about the current system environment.
            </summary>
            <remarks>Enhances functionality available in <see cref="T:System.Windows.Forms.SystemInformation"/>.</remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.BorderSize">
            <summary>
            Gets the thickness, in pixels, of a flat-style window or system control border.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.CaptionHeight">
            <summary>
            Gets the height, in pixels, of the standard title bar area of a window.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.CursorSize">
            <summary>
            Gets the maximum size, in pixels, that a cursor can occupy.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.DebugOS">
            <summary>
            Gets a value indicating whether the debug version of Windows CE is installed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.DoubleClickSize">
            <summary>
            Gets the dimensions, in pixels, of the area within which the user must click twice for the operating system to consider the two clicks a double-click.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.DoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds allowed between mouse clicks for a double-click to be valid.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.FixedFrameBorderSize">
            <summary>
            Gets the thickness, in pixels, of the frame border of a window that has a caption and is not resizable.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.HorizontalScrollBarArrowWidth">
            <summary>
            Gets the width, in pixels, of the arrow bitmap on the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.HorizontalScrollBarHeight">
            <summary>
            Gets the default height, in pixels, of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.IconSize">
            <summary>
            Gets the dimensions, in pixels, of the Windows default program icon size.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.IconSpacingSize">
            <summary>
            Gets the size, in pixels, of the grid square used to arrange icons in a large-icon view.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.MenuHeight">
            <summary>
            Gets the height, in pixels, of one line of a menu.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.MonitorCount">
            <summary>
            Gets the number of display monitors.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.MonitorsSameDisplayFormat">
            <summary>
            Gets a value indicating whether all the display monitors are using the same pixel color format.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.MousePresent">
            <summary>
            Gets a value indicating whether a mouse is installed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.PowerStatus">
            <summary>
            Gets the current system power status.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.PrimaryMonitorSize">
            <summary>
            Gets the dimensions, in pixels, of the current video mode of the primary display.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.ScreenOrientation">
            <summary>
            Gets the orientation of the screen.
            </summary>
            <value>The orientation of the screen, in degrees.</value>
            <seealso cref="T:Microsoft.WindowsCE.Forms.SystemSettings"/>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.SmallIconSize">
            <summary>
            Gets the dimensions, in pixels, of a small icon.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.VerticalScrollBarArrowHeight">
            <summary>
            Gets the height, in pixels, of the arrow bitmap on the vertical scroll bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.VerticalScrollBarWidth">
            <summary>
            Gets the default width, in pixels, of the vertical scroll bar.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.VirtualScreen">
            <summary>
            Gets the bounds of the virtual screen.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.SystemInformation2.WorkingArea">
            <summary>
            Gets the size, in pixels, of the working area of the screen.
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.TextBox2">
            <summary>
            Enhances the <see cref="T:System.Windows.Forms.TextBox"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.AppendText(System.String)">
            <summary>
            Appends text to the current text of a text box.
            </summary>
            <param name="text">The text to append to the current contents of the text box.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.Cut">
            <summary>
            Moves the current selection in the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> to the Clipboard.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.Copy">
            <summary>
            Copies the current selection in the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> to the Clipboard.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.Paste">
            <summary>
            Replaces the current selection in the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> with the contents of the Clipboard.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.Clear">
            <summary>
            Clears all text from the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> control.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.ParentChanged event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.DefWndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            It is an error to call this method when the <see cref="P:System.Windows.Forms.Control.Handle"/> property is 0.  
            </summary>
            <param name="m">A <see cref="T:Microsoft.WindowsCE.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            The wndproc for the control.
            </summary>
            <param name="m">message sent by the system</param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OnCopy(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Copy event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OnCut(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Copy event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OnPaste(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Copy event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OnClear(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Copy event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.SelectInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the text in the textBox control
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="textLength"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.AdjustSelectionStartAndEnd(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Adjusts the selection
            </summary>
            <param name="selStart"></param>
            <param name="selLength"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="textLen"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.ClearUndo">
            <summary>
            Clears the Undo buffer
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.GetSelectionStartAndLength(System.Int32@,System.Int32@)">
            <summary>
            Gets the selection start and length
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.SetSelectedTextInternal(System.String,System.Boolean)">
            <summary>
            Sets the selected text while clearing the Undo if desired.
            </summary>
            <param name="text"></param>
            <param name="clearUndo"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.TextBox2.OpenNETCF#Windows#Forms#IWin32Window#get_Handle">
            <summary>
            Enhances the <see cref="T:System.Windows.Forms.TextBox"/> control.
            </summary>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.TextBox2.CharacterCasing">
            <summary>
            Gets or sets whether the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> control modifies the case of characters as they are typed.
            </summary>
            <value>One of the <see cref="P:OpenNETCF.Windows.Forms.TextBox2.CharacterCasing"/> enumeration values that specifies whether the <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> control modifies the case of characters.
            The default is <see cref="P:OpenNETCF.Windows.Forms.TextBox2.CharacterCasing">CharacterCasing.Normal</see>.</value>
            <remarks>You can use the <see cref="P:OpenNETCF.Windows.Forms.TextBox2.CharacterCasing"/> property to change the case of characters as required by your application.
            For example, you could change the case of all characters entered in a <see cref="T:OpenNETCF.Windows.Forms.TextBox2"/> control used for password entry to uppercase or lowercase to enforce a policy for passwords.</remarks>
        </member>
        <member name="P:OpenNETCF.Windows.Forms.TextBox2.Lines">
            <summary>
            Gets or sets the lines of text in a text box control.
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.TextBox2.Copying">
            <summary>
            Occurs when a WM_COPY message is sent to the textbox
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.TextBox2.Cutting">
            <summary>
            Occurs when a WM_CUT message is sent to the textbox
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.TextBox2.Clearing">
            <summary>
            Occures when a WM_CLEAR message is sent to the textbox
            </summary>
        </member>
        <member name="E:OpenNETCF.Windows.Forms.TextBox2.Pasting">
            <summary>
            Occurs when a WM_PASTE message is sent to the textbox
            </summary>
        </member>
        <member name="T:OpenNETCF.Windows.Forms.ThreadWindows">
            <summary>
            Enumerates all windows associated with a thread. In the future (for CF2.0), it should be based on the EnumThreadWindows function.
            </summary>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ThreadWindows.#ctor(System.IntPtr)">
            <summary>
            Creates a new <see cref="T:OpenNETCF.Windows.Forms.ThreadWindows"/> object for a specific window handle.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenNETCF.Windows.Forms.ThreadWindows.Enable(System.Boolean)">
            <summary>
            Enables/Disables thread windows except parent window.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:OpenNETCF.Win32.CB">
            <summary>
            ComboBox Messages.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETEDITSEL">
            <summary>
            An application sends a CB_GETEDITSEL message to get the starting and ending character positions of the current selection in the edit control of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.LIMITTEXT">
            <summary>
            An application sends a CB_LIMITTEXT message to limit the length of the text the user may type into the edit control of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETEDITSEL">
            <summary>
            An application sends a CB_SETEDITSEL message to select characters in the edit control of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.ADDSTRING">
            <summary>
            An application sends a CB_ADDSTRING message to add a string to the list box of a combo box. If the combo box does not have the CBS_SORT style, the string is added to the end of the list. Otherwise, the string is inserted into the list, and the list is sorted
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.DELETESTRING">
            <summary>
            An application sends a CB_DELETESTRING message to delete a string in the list box of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETCOUNT">
            <summary>
            An application sends a CB_GETCOUNT message to retrieve the number of items in the list box of a combo box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETCURSEL">
            <summary>
            An application sends a CB_GETCURSEL message to retrieve the index of the currently selected item, if any, in the list box of a combo box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETLBTEXT">
            <summary>
            An application sends a CB_GETLBTEXT message to retrieve a string from the list of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETLBTEXTLEN">
            <summary>
            An application sends a CB_GETLBTEXTLEN message to retrieve the length, in characters, of a string in the list of a combo box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.INSERTSTRING">
            <summary>
            An application sends a CB_INSERTSTRING message to insert a string into the list box of a combo box. Unlike the CB_ADDSTRING message, the CB_INSERTSTRING message does not cause a list with the CBS_SORT style to be sorted
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.RESETCONTENT">
            <summary>
            An application sends a CB_RESETCONTENT message to remove all items from the list box and edit control of a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.FINDSTRING">
            <summary>
            An application sends a CB_FINDSTRING message to search the list box of a combo box for an item beginning with the characters in a specified string
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SELECTSTRING">
            <summary>
            An application sends a CB_SELECTSTRING message to search the list of a combo box for an item that begins with the characters in a specified string. If a matching item is found, it is selected and copied to the edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETCURSEL">
            <summary>
            An application sends a CB_SETCURSEL message to select a string in the list of a combo box. If necessary, the list scrolls the string into view. The text in the edit control of the combo box changes to reflect the new selection, and any previous selection in the list is removed
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SHOWDROPDOWN">
            <summary>
            An application sends a CB_SHOWDROPDOWN message to show or hide the list box of a combo box that has the CBS_DROPDOWN or CBS_DROPDOWNLIST style
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETITEMDATA">
            <summary>
            An application sends a CB_GETITEMDATA message to a combo box to retrieve the application-supplied value associated with the specified item in the combo box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETITEMDATA">
            <summary>
            An application sends a CB_SETITEMDATA message to set the value associated with the specified item in a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETDROPPEDCONTROLRECT">
            <summary>
            An application sends a CB_GETDROPPEDCONTROLRECT message to retrieve the screen coordinates of a combo box in its dropped-down state
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETITEMHEIGHT">
            <summary>
            An application sends a CB_SETITEMHEIGHT message to set the height of list items or the selection field in a combo box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETITEMHEIGHT">
            <summary>
            An application sends a CB_GETITEMHEIGHT message to determine the height of list items or the selection field in a combo box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETEXTENDEDUI">
            <summary>
            An application sends a CB_SETEXTENDEDUI message to select either the default user interface or the extended user interface for a combo box that has the CBS_DROPDOWN or CBS_DROPDOWNLIST style
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETEXTENDEDUI">
            <summary>
            An application sends a CB_GETEXTENDEDUI message to determine whether a combo box has the default user interface or the extended user interface
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETDROPPEDSTATE">
            <summary>
            An application sends a CB_GETDROPPEDSTATE message to determine whether the list box of a combo box is dropped down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.FINDSTRINGEXACT">
            <summary>
            An application sends a CB_FINDSTRINGEXACT message to find the first list box string in a combo box that matches the string specified in the lParam parameter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETLOCALE">
            <summary>
            An application sends a CB_SETLOCALE message to set the current locale of the combo box. If the combo box has the CBS_SORT style and strings are added using CB_ADDSTRING, the locale of a combo box affects how list items are sorted.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETLOCALE">
            <summary>
            An application sends a CB_GETLOCALE message to retrieve the current locale of the combo box. The locale is used to determine the correct sorting order of displayed text for combo boxes with the CBS_SORT style and text added by using the CB_ADDSTRING message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETTOPINDEX">
            <summary>
            An application sends the CB_GETTOPINDEX message to retrieve the zero-based index of the first visible item in the list box portion of a combo box. Initially, the item with index 0 is at the top of the list box, but if the list box contents have been scrolled, another item may be at the top.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETTOPINDEX">
            <summary>
            An application sends the CB_SETTOPINDEX message to ensure that a particular item is visible in the list box of a combo box. The system scrolls the list box contents so that either the specified item appears at the top of the list box or the maximum scroll range has been reached.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETHORIZONTALEXTENT">
            <summary>
            An application sends the CB_GETHORIZONTALEXTENT message to retrieve from a combo box the width, in pixels, by which the list box can be scrolled horizontally (the scrollable width). This is applicable only if the list box has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETHORIZONTALEXTENT">
            <summary>
            An application sends the CB_SETHORIZONTALEXTENT message to set the width, in pixels, by which a list box can be scrolled horizontally (the scrollable width). If the width of the list box is smaller than this value, the horizontal scroll bar horizontally scrolls items in the list box. If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden or, if the combo box has the CBS_DISABLENOSCROLL style, disabled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.GETDROPPEDWIDTH">
            <summary>
            An application sends the CB_GETDROPPEDWIDTH message to retrieve the minimum allowable width, in pixels, of the list box of a combo box with the CBS_DROPDOWN or CBS_DROPDOWNLIST style
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.SETDROPPEDWIDTH">
            <summary>
            An application sends the CB_SETDROPPEDWIDTH message to set the maximum allowable width, in pixels, of the list box of a combo box with the CBS_DROPDOWN or CBS_DROPDOWNLIST style.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CB.INITSTORAGE">
            <summary>
            An application sends the CB_INITSTORAGE message before adding a large number of items to the list box portion of a combo box. This message allocates memory for storing list box items.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.CBS">
            <summary>
            Combobox control styles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.DROPDOWN">
            <summary>
            Similar to CBS_SIMPLE, except that the list box is not displayed unless the user selects an icon next to the edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.DROPDOWNLIST">
            <summary>
            Similar to CBS_DROPDOWN, except that the edit control is replaced by a static text item that displays the current selection in the list box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.AUTOHSCROLL">
            <summary>
            Automatically scrolls the text in an edit control to the right when the user types a character at the end of the line. If this style is not set, only text that fits within the rectangular boundary is allowed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.OEMCONVERT">
            <summary>
            character set and then back to the Windows character set. This ensures proper character conversion when the application calls the CharToOem function to convert a Windows string in the combo box to OEM characters. This style is most useful for combo boxes that contain file names and applies only to combo boxes created with the CBS_SIMPLE or CBS_DROPDOWN style.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.SORT">
            <summary>
            Automatically sorts strings added to the list box
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.HASSTRINGS">
            <summary>
            Specifies that an owner-drawn combo box contains items consisting of strings. The combo box maintains the memory and address for the strings so the application can use the CB_GETLBTEXT message to retrieve the text for a particular item.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.NOINTEGRALHEIGHT">
            <summary>
            Specifies that the size of the combo box is exactly the size specified by the application when it created the combo box. Normally, the system sizes a combo box so that it does not display partial items
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.DISABLENOSCROLL">
            <summary>
            Shows a disabled vertical scroll bar in the list box when the box does not contain enough items to scroll. Without this style, the scroll bar is hidden when the list box does not contain enough items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.UPPERCASE">
            <summary>
            Converts to uppercase all text in both the selection field and the list.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.CBS.LOWERCASE">
            <summary>
            Converts to lowercase all text in both the selection field and the list.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.DTM">
            <summary>
            DateTimePicker Messages.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.DTN">
            <summary>
            DateTimePicker Notifications.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.DTS">
            <summary>
            DateTimePicker Styles.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.EM">
            <summary>
            Edit control Messages.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETSEL">
            <summary>
            This message retrieves the starting and ending character positions of the current selection in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETSEL">
            <summary>
            This message selects a range of characters in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETRECT">
            <summary>
            This message retrieves the formatting rectangle of an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETRECT">
            <summary>
            This message sets the formatting rectangle of a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETRECTNP">
            <summary>
            This message sets the formatting rectangle of a multiline edit control. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SCROLL">
            <summary>
            This message scrolls the text vertically in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.LINESCROLL">
            <summary>
            This message scrolls the text vertically or horizontally in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SCROLLCARET">
            <summary>
            This message scrolls the caret into view in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETMODIFY">
            <summary>
            This message determines whether the contents of an edit control have been modified.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETMODIFY">
            <summary>
            This message sets or clears the modification flag for an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETLINECOUNT">
            <summary>
            This message retrieves the number of lines in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.LINEINDEX">
            <summary>
            This message retrieves the character index of a line in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.LINELENGTH">
            <summary>
            This message retrieves the length of a line, in characters, in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.REPLACESEL">
            <summary>
            This message replaces the current selection in an edit control with the specified text.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETLINE">
            <summary>
            This message copies a line of text from an edit control and places the text in a specified buffer. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.LIMITTEXT">
            <summary>
            This message limits the amount of text the user can enter into an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.CANUNDO">
            <summary>
            This message determines whether an edit-control operation can be undone; that is, whether the control can respond to the EM_UNDO message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.UNDO">
            <summary>
            This message reverses the effect of the last edit control operation.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.FMTLINES">
            <summary>
            This message sets the inclusion flag for soft line-break characters on or off within a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.LINEFROMCHAR">
            <summary>
            This message retrieves the index of the line that contains the specified character index in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETTABSTOPS">
            <summary>
            This message sets the tab stops in a multiline edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETPASSWORDCHAR">
            <summary>
            This message sets or removes a password character displayed in a single-line edit control when the user types text.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.EMPTYUNDOBUFFER">
            <summary>
            This message resets the undo flag of an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETFIRSTVISIBLELINE">
            <summary>
            This message determines the uppermost visible line in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETREADONLY">
            <summary>
            This message sets or removes the read-only style (ES_READONLY) of an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETPASSWORDCHAR">
            <summary>
            This message retrieves the password character displayed in an edit control when the user enters text.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETMARGINS">
            <summary>
            This message sets the widths of the left and right margins for an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETMARGINS">
            <summary>
            This message retrieves the widths of the left and right margins for an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.SETLIMITTEXT">
            <summary>
            This message limits the amount of text the user can enter into an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.GETLIMITTEXT">
            <summary>
            This message retrieves the current text limit, in characters, for an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.POSFROMCHAR">
            <summary>
            This message retrieves the coordinates of the specified character in an edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.EM.CHARFROMPOS">
            <summary>
            This message retrieves the zero-based character index and zero-based line index of the character nearest the specified point in an edit control.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.ES">
            <summary>
            Edit control styles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.LEFT">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.CENTER">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.RIGHT">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.MULTILINE">
            <summary>
            Designates a multiline edit control. The default is single-line edit control. 
            When the multiline edit control is in a dialog box, the default response to pressing the ENTER key is to activate the default button. To use the ENTER key as a carriage return, use the ES_WANTRETURN style.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.UPPERCASE">
            <summary>
            Force uppercase
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.LOWERCASE">
            <summary>
            Force lowercase
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.PASSWORD">
            <summary>
            Displays an asterisk (*) for each character typed into the edit control. This style is valid only for single-line edit controls
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.AUTOVSCROLL">
            <summary>
            Show vertical scrollbars automatically
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.AUTOHSCROLL">
            <summary>
            Show horizontal scrollbars automatically
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.NOHIDESEL">
            <summary>
            Negates the default behavior for an edit control. The default behavior hides the selection when the control loses the input focus and inverts the selection when the control receives the input focus. If you specify ES_NOHIDESEL, the selected text is inverted, even if the control does not have the focus.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.COMBOBOX">
            <summary>
            Combobox
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.OEMCONVERT">
            <summary>
            Converts text entered in the edit control. The text is converted from the Windows character set to the OEM character set and then back to the Windows character set. This ensures proper character conversion when the application calls the CharToOem function to convert a Windows string in the edit control to OEM characters. This style is most useful for edit controls that contain file names that will be used on file systems that do not support Unicode.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.READONLY">
            <summary>
            Prevents the user from typing or editing text in the edit control
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.WANTRETURN">
            <summary>
            Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiline edit control in a dialog box. If you do not specify this style, pressing the ENTER key has the same effect as pressing the dialog box's default push button. This style has no effect on a single-line edit control.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.ES.NUMBER">
            <summary>
            Allows only digits to be entered into the edit control. Note that, even with this set, it is still possible to paste non-digits into the edit control.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.GDTR">
            <summary>
            GetDateTimeRange.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.GW">
            <summary>
            Window relationships used with GetWindow.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.HWNDFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.HWNDLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.HWNDNEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.HWNDPREV">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.OWNER">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GW.CHILD">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.GWL">
            <summary>
            Parameters for GetWindowLong.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.WNDPROC">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.HINSTANCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.HWNDPARENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.STYLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.EXSTYLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.USERDATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.GWL.ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.HS">
            <summary>
            HTML control styles.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.HWND">
            <summary>
            Preset window handles.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.LBS">
            <summary>
            Listbox control styles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.NOTIFY">
            <summary>
            Parent window receives an input message whenever the user clicks or double-clicks a string
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.SORT">
            <summary>
            Strings in the list box are sorted alphabetically.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.NOREDRAW">
            <summary>
            List-box display is not updated when changes are made. This style can be changed at any time by sending a WM_SETREDRAW message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.MULTIPLESEL">
            <summary>
            String selection is toggled each time the user clicks or double-clicks the string. Any number of strings can be selected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.HASSTRINGS">
            <summary>
            Specifies an owner-draw list box that contains items consisting of strings. The list box maintains the memory and pointers for the strings so the application can use the GetText member function to retrieve the text for a particular item.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.USETABSTOPS">
            <summary>
            Allows a list box to recognize and expand tab characters when drawing its strings. The default tab positions are 32 dialog units. (A dialog unit is a horizontal or vertical distance. One horizontal dialog unit is equal to one-fourth of the current dialog base width unit. The dialog base units are computed based on the height and width of the current system font. The GetDialogBaseUnits Windows function returns the current dialog base units in pixels.) This style should not be used with LBS_OWNERDRAWFIXED.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.NOINTEGRALHEIGHT">
            <summary>
            The size of the list box is exactly the size specified by the application when it created the list box. Usually, Windows sizes a list box so that the list box does not display partial items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.MULTICOLUMN">
            <summary>
            Specifies a multicolumn list box that is scrolled horizontally. The SetColumnWidth member function sets the width of the columns.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.WANTKEYBOARDINPUT">
            <summary>
            The owner of the list box receives WM_VKEYTOITEM or WM_CHARTOITEM messages whenever the user presses a key while the list box has input focus. This allows an application to perform special processing on the keyboard input.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.EXTENDEDSEL">
            <summary>
            The user can select multiple items using the SHIFT key and the mouse or special key combinations.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.DISABLENOSCROLL">
            <summary>
            The list box shows a disabled vertical scroll bar when the list box does not contain enough items to scroll. Without this style, the scroll bar is hidden when the list box does not contain enough items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.NODATA">
            <summary>
            Specifies a no-data list box. Specify this style when the count of items in the list box will exceed one thousand. A no-data list box must also have the LBS_OWNERDRAWFIXED style, but must not have the LBS_SORT or LBS_HASSTRINGS style.
            A no-data list box resembles an owner-drawn list box except that it contains no string or bitmap data for an item. Commands to add, insert, or delete an item always ignore any given item data; requests to find a string within the list box always fail. The system sends the WM_DRAWITEM message to the owner window when an item must be drawn. The itemID member of the DRAWITEMSTRUCT structure passed with the WM_DRAWITEM message specifies the line number of the item to be drawn. A no-data list box does not send a WM_DELETEITEM message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.LBS.STANDARD">
            <summary>
            Strings in the list box are sorted alphabetically, and the parent window receives an input message whenever the user clicks or double-clicks a string. The list box contains borders on all sides.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.LVM">
            <summary>
            ListView Messages.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.MCM">
            <summary>
            MonthCalendar Messages.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.MCN">
            <summary>
            MonthCalendar notifications.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.MCS">
            <summary>
            MonthCalendar styles.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.MCSC">
            <summary>
            MonthCalendar Colors.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.NMHDR">
            <summary>
            Notification header returned in WM_NOTIFY lParam
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.hwndFrom">
            <summary>
            Window that has sent WM_NOTIFY
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.idFrom">
            <summary>
            Control ID of the window that sent the notification
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.code">
            <summary>
            Notification code
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.HIDE">
            <summary>
            Hides the window and activates another window
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except the window is not actived.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SW.RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SWP">
            <summary>
            Flags used with SetWindowPos.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOSIZE">
            <summary>
            Retains current size (ignores the cx and cy members). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOMOVE">
            <summary>
            Retains current position (ignores the x and y members). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOZORDER">
            <summary>
            Retains current ordering (ignores the hwndInsertAfter member).
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOREDRAW">
            <summary>
            Does not redraw changes.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOACTIVATE">
            <summary>
            Does not activate the window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.FRAMECHANGED">
            <summary>
            Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z-order.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.DRAWFRAME">
            <summary>
            Draws a frame (defined in the class description for the window) around the window. The window receives a WM_NCCALCSIZE message
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.NOREPOSITION">
            <summary>
            Same as SWP_NOOWNERZORDER
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.DEFERERASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SWP.ASYNCWINDOWPOS">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.TCN">
            <summary>
            Notification Messages.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.WA">
            <summary>
            wParams for the WM.ACTIVATE message
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WA.INACTIVE">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WA.ACTIVE">
            <summary>
            Activated by some method other than a mouse click (for example, by a call to the SetActiveWindow function or by use of the keyboard interface to select the window).
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WA.CLICKACTIVE">
            <summary>
            Activated by a mouse click
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Win32Window">
            <summary>
            A helper class for working with native windows.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.ShowWindow(OpenNETCF.Win32.SW)">
            <summary>
            The ShowWindow function sets the specified window's show state. 
            </summary>
            <param name="showFlags">Specifies how the window is to be shown</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function creates an overlapped, pop-up, or child window with an extended style; otherwise, this function is identical to the CreateWindow function.
            </summary>
            <param name="dwExStyle">Specifies the extended style of the window</param>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <param name="dwStyle">Specifies the style of the window being created.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="hWndParent"></param>
            <param name="hMenu"></param>
            <param name="hInstance"></param>
            <param name="lpParam"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.DestroyWindow(System.IntPtr)">
            <summary>
            This function destroys the specified window.
            </summary>
            <param name="hWnd">Handle to the window to be destroyed.</param>
            <returns>Nonzero indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.FindWindow(System.String,System.String)">
            <summary>
            This function retrieves the handle to the top-level window whose class name and window name match the specified strings.
            </summary>
            <param name="className">The class name.</param>
            <param name="wndName">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <returns>A handle to the window that has the specified class name and window name indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindow(System.IntPtr,OpenNETCF.Win32.GW)">
            <summary>
            Retrieves the handle to a window that has the specified relationship to the Win32Window.
            </summary>
            <param name="hWnd"></param>
            <param name="nCmd">Specifies the relationship between the specified window and the window which is to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowText(System.IntPtr)">
            <summary>
            Copies the text of the specified window's title bar or controls body.
            </summary>
            <returns>The window text.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowRect(System.IntPtr)">
            <summary>
            Returns a Rectangle representing the bounds of the window
            </summary>
            <param name="hWnd">a valid window handle</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> representing the bounds of the specified window.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetActiveWindow">
            <summary>
            Retrieves the window handle to the active window associated with the thread that calls the function.
            </summary>
            <returns>The handle to the active window associated with the calling thread's message queue indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetFocus">
            <summary>
            Retrieves the handle to the keyboard focus window associated with the thread that called the function.
            </summary>
            <returns>The handle to the window with the keyboard focus indicates success. NULL indicates that the calling thread's message queue does not have an associated window with the keyboard focus.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetCapture">
            <summary>
            Retrieves the handle to the window, if any, that has captured the mouse or stylus input. Only one window at a time can capture the mouse or stylus input.
            </summary>
            <returns>The handle of the capture window associated with the current thread indicates success. NULL indicates that no window in the current thread has captured the mouse.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowLong(System.IntPtr,OpenNETCF.Win32.GWL)">
            <summary>
            Retrieves information about the specified window.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nItem">Specifies the zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
            <returns>The requested 32-bit value indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="X">Specifies the new position of the left side of the window.</param>
            <param name="Y">Specifies the new position of the top of the window.</param>
            <param name="cx">Specifies the new width of the window.</param>
            <param name="cy">Specifies the new height of the window.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the specified window and then returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetWindowLong(System.IntPtr,OpenNETCF.Win32.GWL,System.Int32)">
            <summary>
            Changes an attribute of the specified window.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="GetWindowLongParam">Specifies the zero-based offset to the value to be set.</param>
            <param name="nValue">Specifies the replacement value.</param>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.
            </summary>
            <param name="hWnd">Handle to the window to be enabled or disabled.</param>
            <param name="bEnable">Boolean that specifies whether to enable or disable the window. If this parameter is TRUE, the window is enabled. If the parameter is FALSE, the window is disabled.</param>
            <returns>Nonzero indicates that the window was previously disabled. Zero indicates that the window was not previously disabled.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The returned message value can be used when calling the SendMessage or PostMessage function.
            </summary>
            <param name="lpMsg">String that specifies the message to be registered.</param>
            <returns>A message identifier in the range 0xC000 through 0xFFFF indicates that the message is successfully registered. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetFocus(System.IntPtr)">
            <summary>
            Sets the keyboard focus to the specified window. All subsequent keyboard input is directed to this window. The window, if any, that previously had the keyboard focus loses it.
            </summary>
            <param name="hWnd">Handle to the window that will receive the keyboard input.
            If this parameter is NULL, keystrokes are ignored.</param>
            <returns>The handle to the window that previously had the keyboard focus indicates success. NULL indicates that the hWnd parameter is invalid or the window is not associated with the calling thread's message queue.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetForegroundWindow(System.IntPtr)">
            <summary>
            Puts the thread that created the specified window into the foreground and activates the window.
            </summary>
            <param name="hWnd">Handle to the window that should be activated and brought to the foreground.</param>
            <returns>Nonzero indicates that the window was brought to the foreground. Zero indicates that the window was not brought to the foreground.</returns>
        </member>
        <member name="P:OpenNETCF.Win32.Win32Window.Handle">
            <summary>
            Returns the native window handle.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Win32Window.Text">
            <summary>
            Text of the Win32Window
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.WM">
            <summary>
            Window Messages.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WM.LBUTTONDOWN">
            <summary>   
            This message is posted when the user presses the touch-screen in the client area of a window.   
            </summary>      
        </member>
        <member name="F:OpenNETCF.Win32.WM.USER">
            <summary>   
            This message is used by applications to help define private messages.   
            </summary> 
        </member>
        <member name="T:OpenNETCF.Win32.WS">
            <summary>
            Window style flags.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.BORDER">
            <summary>
            Creates a window that has a thin-line border. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.CAPTION">
            <summary>
            Creates a window that has a title bar (includes the BORDER style). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.CHILD">
            <summary>
            Creates a child window. This style cannot be used with the POPUP style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. If CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.DISABLED">
            <summary>
            Creates a window that is initially disabled. A disabled window cannot receive input from the user. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.DLGFRAME">
            <summary>
            Creates a window that has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.GROUP">
            <summary>
            Specifies the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the GROUP style. The first control in each group usually has the TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.HSCROLL">
            <summary>
            Creates a window that has a horizontal scroll bar. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.MAXIMIZEBOX">
            <summary>
            Creates a window that has a Maximize button. Cannot be combined with the EX_CONTEXTHELP style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.MINIMIZEBOX">
            <summary>
            Creates a window that has a Minimize button. Cannot be combined with the EX_CONTEXTHELP style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the TILED style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the CHILD style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.SYSMENU">
            <summary>
            Creates a window that has a Close (X) button in the non-client area. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.TABSTOP">
            <summary>
            Specifies a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to the next control with the TABSTOP style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the SIZEBOX style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.VISIBLE">
            <summary>
            Creates a window that is initially visible. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS.VSCROLL">
            <summary>
            Creates a window that has a vertical scroll bar. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.WS_EX">
            <summary>
            Extended control styles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.NOACTIVATE">
            <summary>
            A top-level window created with this style cannot be activated. If a child window has this style, tapping it does not cause its top-level parent to be activated. A window that has this style receives stylus events, but neither it nor its child windows can get the focus. Supported in Windows CE versions 2.0 and later. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.OVERLAPPEDWINDOW">
            <summary>
            Combines the CLIENTEDGE and WINDOWEDGE styles. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.CAPTIONOKBUTTON">
            <summary>
            Window includes an OK button in the title bar
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.NODRAG">
            <summary>
            A window created with this style cannot be dragged using a mouse or stylus
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.ABOVESTARTUP">
            <summary>
            Places window above Start bar.  When combined with WS_EX.TOPMOST, generates a full-screen, top-most Window
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.INK">
            <summary>
            Indicates that no default beeping sound is generated on clicking on the window.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.NOANIMATION">
            <summary>
            A window created with this style does not show animated exploding and imploding rectangles, and does not have a button on the taskbar. Supported in Windows CE 2.0 and later.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.WS_EX.NONE">
            <summary>
            Additional value for Completeness
            </summary>
        </member>
    </members>
</doc>
